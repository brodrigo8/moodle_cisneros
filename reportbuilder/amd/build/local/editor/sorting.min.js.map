{"version":3,"file":"sorting.min.js","sources":["../../../src/local/editor/sorting.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder columns sorting editor\n *\n * @module      core_reportbuilder/local/editor/sorting\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {subscribe} from 'core/pubsub';\nimport SortableList from 'core/sortable_list';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {reorderColumnSorting, toggleColumnSorting} from 'core_reportbuilder/local/repository/sorting';\nimport Templates from 'core/templates';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport * as reportEvents from 'core_reportbuilder/local/events';\n\n// These constants match PHP consts SORT_ASC, SORT_DESC.\nconst SORTORDER = {\n    ASCENDING: 4,\n    DESCENDING: 3,\n};\n\n/**\n * Reload sorting settings region\n *\n * @param {Object} context\n * @return {Promise}\n */\nconst reloadSettingsSortingRegion = context => {\n    const pendingPromise = new Pending('core_reportbuilder/sorting:reload');\n    const settingsSortingRegion = document.querySelector(reportSelectors.regions.settingsSorting);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/sorting', {sorting: context})\n        .then(({html, js}) => {\n            Templates.replaceNode(settingsSortingRegion, html, js);\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Updates column sorting\n *\n * @param {Element} reportElement\n * @param {Element} element\n * @param {Number} sortenabled\n * @param {Number} sortdirection\n * @return {Promise}\n */\nconst updateSorting = (reportElement, element, sortenabled, sortdirection) => {\n    const reportId = reportElement.dataset.reportId;\n    const listElement = element.closest('li');\n    const columnId = listElement.dataset.columnSortId;\n    const columnName = listElement.dataset.columnSortName;\n\n    return toggleColumnSorting(reportId, columnId, sortenabled, sortdirection)\n        .then(reloadSettingsSortingRegion)\n        .then(() => getString('columnsortupdated', 'core_reportbuilder', columnName))\n        .then(addToast)\n        .then(() => {\n            dispatchEvent(reportEvents.tableReload, {}, reportElement);\n            return null;\n        });\n};\n\n/**\n * Initialise module\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = (initialized) => {\n    if (initialized) {\n        return;\n    }\n\n    // Update sorting region each time report columns are updated (added or removed).\n    subscribe(reportEvents.publish.reportColumnsUpdated, data => reloadSettingsSortingRegion(data)\n        .catch(Notification.exception)\n    );\n\n    document.addEventListener('click', event => {\n\n        // Enable/disable sorting on columns.\n        const toggleSorting = event.target.closest(reportSelectors.actions.reportToggleColumnSort);\n        if (toggleSorting) {\n            event.preventDefault();\n\n            const pendingPromise = new Pending('core_reportbuilder/sorting:toggle');\n            const reportElement = toggleSorting.closest(reportSelectors.regions.report);\n            const sortdirection = parseInt(toggleSorting.closest('li').dataset.columnSortDirection);\n\n            updateSorting(reportElement, toggleSorting, toggleSorting.checked, sortdirection)\n                .then(() => {\n                    // Re-focus the toggle sorting element after reloading the region.\n                    const toggleSortingElement = document.getElementById(toggleSorting.id);\n                    toggleSortingElement?.focus();\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n\n        // Change column sort direction.\n        const toggleSortDirection = event.target.closest(reportSelectors.actions.reportToggleColumnSortDirection);\n        if (toggleSortDirection) {\n            event.preventDefault();\n\n            const pendingPromise = new Pending('core_reportbuilder/sorting:direction');\n            const reportElement = toggleSortDirection.closest(reportSelectors.regions.report);\n            const listElement = toggleSortDirection.closest('li');\n            const toggleSorting = listElement.querySelector(reportSelectors.actions.reportToggleColumnSort);\n\n            let sortdirection = parseInt(listElement.dataset.columnSortDirection);\n            if (sortdirection === SORTORDER.ASCENDING) {\n                sortdirection = SORTORDER.DESCENDING;\n            } else if (sortdirection === SORTORDER.DESCENDING) {\n                sortdirection = SORTORDER.ASCENDING;\n            }\n\n            updateSorting(reportElement, toggleSortDirection, toggleSorting.checked, sortdirection)\n                .then(() => {\n                    // Re-focus the toggle sort direction element after reloading the region.\n                    const toggleSortDirectionElement = document.getElementById(toggleSortDirection.id);\n                    toggleSortDirectionElement?.focus();\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n\n    // Initialize sortable list to handle column sorting moving (note JQuery dependency, see MDL-72293 for resolution).\n    var columnsSortingSortableList = new SortableList(`${reportSelectors.regions.settingsSorting} ul`, {isHorizontal: false});\n    columnsSortingSortableList.getElementName = element => Promise.resolve(element.data('columnSortName'));\n\n    $(document).on(SortableList.EVENTS.DROP, `${reportSelectors.regions.report} li[data-column-sort-id]`, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/sorting:reorder');\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const columnId = info.element.data('columnSortId');\n            const columnPosition = info.element.data('columnSortPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetColumnSortPosition = info.targetNextElement.data('columnSortPosition') || info.element.siblings().length + 2;\n            if (targetColumnSortPosition > columnPosition) {\n                targetColumnSortPosition--;\n            }\n\n            reorderColumnSorting(reportElement.dataset.reportId, columnId, targetColumnSortPosition)\n                .then(reloadSettingsSortingRegion)\n                .then(() => getString('columnsortupdated', 'core_reportbuilder', info.element.data('columnSortName')))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return null;\n                })\n                .then(() => pendingPromise.resolve())\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_exports","value","init","_jquery","_notification","_pending","_sortable_list","reportSelectors","_templates","reportEvents","SORTORDER","reloadSettingsSortingRegion","context","pendingPromise","Pending","settingsSortingRegion","document","querySelector","regions","settingsSorting","Templates","renderForPromise","sorting","then","_ref","html","js","replaceNode","resolve","updateSorting","reportElement","element","sortenabled","sortdirection","reportId","dataset","listElement","closest","columnId","columnSortId","columnName","columnSortName","toggleColumnSorting","getString","addToast","dispatchEvent","tableReload","initialized","subscribe","publish","reportColumnsUpdated","data","catch","Notification","exception","addEventListener","event","toggleSorting","target","actions","reportToggleColumnSort","preventDefault","report","parseInt","columnSortDirection","checked","toggleSortingElement","getElementById","id","focus","toggleSortDirection","reportToggleColumnSortDirection","toggleSortDirectionElement","SortableList","concat","isHorizontal","getElementName","Promise","$","on","EVENTS","DROP","info","positionChanged","columnPosition","targetColumnSortPosition","targetNextElement","siblings","length","reorderColumnSorting"],"mappings":"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"}