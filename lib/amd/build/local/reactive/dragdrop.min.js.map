{"version":3,"file":"dragdrop.min.js","sources":["../../../src/local/reactive/dragdrop.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Drag and drop helper component.\n *\n * This component is used to delegate drag and drop handling.\n *\n * To delegate the logic to this particular element the component should create a new instance\n * passing \"this\" as param. The component will use all the necessary callbacks and add all the\n * necessary listeners to the component element.\n *\n * Component attributes used by dragdrop module:\n * - element: the draggable or dropzone element.\n * - (optional) classes: object with alternative CSS classes\n * - (optional) fullregion: page element affeted by the elementy dragging. Use this attribute if\n *                          the draggable element affects a bigger region (for example a draggable\n *                          title).\n * - (optional) autoconfigDraggable: by default, the component will be draggable if it has a\n *                                   getDraggableData method. If this value is false draggable\n *                                  property must be defined using setDraggable method.\n * - (optional) relativeDrag: by default the drag image is located at point (0,0) relative to the\n *                            mouse position to prevent the mouse from covering it. If this attribute\n *                            is true the drag image will be located at the click offset.\n *\n * Methods the parent component should have for making it draggable:\n *\n * - getDraggableData(): Object|data\n *      Return the data that will be passed to any valid dropzone while it is dragged.\n *      If the component has this method, the dragdrop module will enable the dragging,\n *      this is the only required method for dragging.\n *      If at the dragging moment this method returns a false|null|undefined, the dragging\n *      actions won't be captured.\n *\n * - (optional) dragStart(Object dropdata, Event event): void\n * - (optional) dragEnd(Object dropdata, Event event): void\n *      Callbacks dragdrop will call when the element is dragged and getDraggableData\n *      return some data.\n *\n * Methods the parent component should have for enabling it as a dropzone:\n *\n * - validateDropData(Object dropdata): boolean\n *      If that method exists, the dragdrop module will automathically configure the element as dropzone.\n *      This method will return true if the dropdata is accepted. In case it returns false, no drag and\n *      drop event will be listened for this specific dragged dropdata.\n *\n * - (Optional) showDropZone(Object dropdata, Event event): void\n * - (Optional) hideDropZone(Object dropdata, Event event): void\n *      Methods called when a valid dragged data pass over the element.\n *\n * - (Optional) drop(Object dropdata, Event event): void\n *      Called when a valid dragged element is dropped over the element.\n *\n *      Note that none of this methods will be called if validateDropData\n *      returns a false value.\n *\n * This module will also add or remove several CSS classes from both dragged elements and dropzones.\n * See the \"this.classes\" in the create method for more details. In case the parent component wants\n * to use the same classes, it can use the getClasses method. On the other hand, if the parent\n * component has an alternative \"classes\" attribute, this will override the default drag and drop\n * classes.\n *\n * @module     core/local/reactive/dragdrop\n * @class      core/local/reactive/dragdrop\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core/local/reactive/basecomponent';\n\n// Map with the dragged element generate by an specific reactive applications.\n// Potentially, any component can generate a draggable element to interact with other\n// page elements. However, the dragged data is specific and could only interact with\n// components of the same reactive instance.\nlet activeDropData = new Map();\n\n// Drag & Drop API provides the final drop point and incremental movements but we can\n// provide also starting points and displacements. Absolute displacements simplifies\n// moving components with aboslute position around the page.\nlet dragStartPoint = {};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {BaseComponent} parent the parent component.\n     */\n    create(parent) {\n        // Optional component name for debugging.\n        this.name = `${parent.name ?? 'unkown'}_dragdrop`;\n\n        // Default drag and drop classes.\n        this.classes = Object.assign(\n                {\n                // This class indicate a dragging action is active at a page level.\n                BODYDRAGGING: 'dragging',\n\n                // Added when draggable and drop are ready.\n                DRAGGABLEREADY: 'draggable',\n                DROPREADY: 'dropready',\n\n                // When a valid drag element is over the element.\n                DRAGOVER: 'dragover',\n                // When a the component is dragged.\n                DRAGGING: 'dragging',\n\n                // Dropzones classes names.\n                DROPUP: 'drop-up',\n                DROPDOWN: 'drop-down',\n                DROPZONE: 'drop-zone',\n\n                // Drag icon class.\n                DRAGICON: 'dragicon',\n            },\n            parent?.classes ?? {}\n        );\n\n        // Add the affected region if any.\n        this.fullregion = parent.fullregion;\n\n        // Keep parent to execute drap and drop handlers.\n        this.parent = parent;\n\n        // Check if parent handle draggable manually.\n        this.autoconfigDraggable = this.parent.draggable ?? true;\n\n        // Drag image relative position.\n        this.relativeDrag = this.parent.relativeDrag ?? false;\n\n        // Sub HTML elements will trigger extra dragEnter and dragOver all the time.\n        // To prevent that from affecting dropzones, we need to count the enters and leaves.\n        this.entercount = 0;\n\n        // Stores if the droparea is shown or not.\n        this.dropzonevisible = false;\n\n    }\n\n    /**\n     * Return the component drag and drop CSS classes.\n     *\n     * @returns {Object} the dragdrop css classes\n     */\n    getClasses() {\n        return this.classes;\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * This method will add all the necessary event listeners to the component depending on the\n     * parent methods.\n     *  - Add drop events to the element if the parent component has validateDropData method.\n     *  - Configure the elements draggable if the parent component has getDraggableData method.\n     */\n    stateReady() {\n        // Add drop events to the element if the parent component has dropable types.\n        if (typeof this.parent.validateDropData === 'function') {\n            this.element.classList.add(this.classes.DROPREADY);\n            this.addEventListener(this.element, 'dragenter', this._dragEnter);\n            this.addEventListener(this.element, 'dragleave', this._dragLeave);\n            this.addEventListener(this.element, 'dragover', this._dragOver);\n            this.addEventListener(this.element, 'drop', this._drop);\n        }\n\n        // Configure the elements draggable if the parent component has dragable data.\n        if (this.autoconfigDraggable && typeof this.parent.getDraggableData === 'function') {\n            this.setDraggable(true);\n        }\n    }\n\n    /**\n     * Enable or disable the draggable property.\n     *\n     * @param {bool} value the new draggable value\n     */\n    setDraggable(value) {\n        if (typeof this.parent.getDraggableData !== 'function') {\n            throw new Error(`Draggable components must have a getDraggableData method`);\n        }\n        this.element.setAttribute('draggable', value);\n        if (value) {\n            this.addEventListener(this.element, 'dragstart', this._dragStart);\n            this.addEventListener(this.element, 'dragend', this._dragEnd);\n            this.element.classList.add(this.classes.DRAGGABLEREADY);\n        } else {\n            this.removeEventListener(this.element, 'dragstart', this._dragStart);\n            this.removeEventListener(this.element, 'dragend', this._dragEnd);\n            this.element.classList.remove(this.classes.DRAGGABLEREADY);\n        }\n    }\n\n    /**\n     * Drag start event handler.\n     *\n     * This method will generate the current dropable data. This data is the one used to determine\n     * if a droparea accepts the dropping or not.\n     *\n     * @param {Event} event the event.\n     */\n    _dragStart(event) {\n        // Cancel dragging if any editable form element is focussed.\n        if (document.activeElement.matches(`textarea, input`)) {\n            event.preventDefault();\n            return;\n        }\n\n        const dropdata = this.parent.getDraggableData();\n        if (!dropdata) {\n            return;\n        }\n\n        // Save the starting point.\n        dragStartPoint = {\n            pageX: event.pageX,\n            pageY: event.pageY,\n        };\n\n        // If the drag event is accepted we prevent any other draggable element from interfiering.\n        event.stopPropagation();\n\n        // Save the drop data of the current reactive intance.\n        activeDropData.set(this.reactive, dropdata);\n\n        // Add some CSS classes to indicate the state.\n        document.body.classList.add(this.classes.BODYDRAGGING);\n        this.element.classList.add(this.classes.DRAGGING);\n        this.fullregion?.classList.add(this.classes.DRAGGING);\n\n        // Force the drag image. This makes the UX more consistent in case the\n        // user dragged an internal element like a link or some other element.\n        let dragImage = this.element;\n        if (this.parent.setDragImage !== undefined) {\n            const customImage = this.parent.setDragImage(dropdata, event);\n            if (customImage) {\n                dragImage = customImage;\n            }\n        }\n        // Define the image position relative to the mouse.\n        const position = {x: 0, y: 0};\n        if (this.relativeDrag) {\n            position.x = event.offsetX;\n            position.y = event.offsetY;\n        }\n        event.dataTransfer.setDragImage(dragImage, position.x, position.y);\n\n        this._callParentMethod('dragStart', dropdata, event);\n    }\n\n    /**\n     * Drag end event handler.\n     *\n     * @param {Event} event the event.\n     */\n    _dragEnd(event) {\n        const dropdata = activeDropData.get(this.reactive);\n        if (!dropdata) {\n            return;\n        }\n\n        // Remove the current dropdata.\n        activeDropData.delete(this.reactive);\n\n        // Remove the dragging classes.\n        document.body.classList.remove(this.classes.BODYDRAGGING);\n        this.element.classList.remove(this.classes.DRAGGING);\n        this.fullregion?.classList.remove(this.classes.DRAGGING);\n\n        // We add the total movement to the event in case the component\n        // wants to move its absolute position.\n        this._addEventTotalMovement(event);\n\n        this._callParentMethod('dragEnd', dropdata, event);\n    }\n\n    /**\n     * Drag enter event handler.\n     *\n     * The JS drag&drop API triggers several dragenter events on the same element because it bubbles the\n     * child events as well. To prevent this form affecting the dropzones display, this methods use\n     * \"entercount\" to determine if it's one extra child event or a valid one.\n     *\n     * @param {Event} event the event.\n     */\n    _dragEnter(event) {\n        const dropdata = this._processEvent(event);\n        if (dropdata) {\n            this.entercount++;\n            this.element.classList.add(this.classes.DRAGOVER);\n            if (this.entercount == 1 && !this.dropzonevisible) {\n                this.dropzonevisible = true;\n                this.element.classList.add(this.classes.DRAGOVER);\n                this._callParentMethod('showDropZone', dropdata, event);\n            }\n        }\n    }\n\n    /**\n     * Drag over event handler.\n     *\n     * We only use dragover event when a draggable action starts inside a valid dropzone. In those cases\n     * the API won't trigger any dragEnter because the dragged alement was already there. We use the\n     * dropzonevisible to determine if the component needs to display the dropzones or not.\n     *\n     * @param {Event} event the event.\n     */\n    _dragOver(event) {\n        const dropdata = this._processEvent(event);\n        if (dropdata && !this.dropzonevisible) {\n            this.dropzonevisible = true;\n            this.element.classList.add(this.classes.DRAGOVER);\n            this._callParentMethod('showDropZone', dropdata, event);\n        }\n    }\n\n    /**\n     * Drag over leave handler.\n     *\n     * The JS drag&drop API triggers several dragleave events on the same element because it bubbles the\n     * child events as well. To prevent this form affecting the dropzones display, this methods use\n     * \"entercount\" to determine if it's one extra child event or a valid one.\n     *\n     * @param {Event} event the event.\n     */\n    _dragLeave(event) {\n        const dropdata = this._processEvent(event);\n        if (dropdata) {\n            this.entercount--;\n            if (this.entercount == 0 && this.dropzonevisible) {\n                this.dropzonevisible = false;\n                this.element.classList.remove(this.classes.DRAGOVER);\n                this._callParentMethod('hideDropZone', dropdata, event);\n            }\n        }\n    }\n\n    /**\n     * Drop event handler.\n     *\n     * This method will call both hideDropZones and drop methods on the parent component.\n     *\n     * @param {Event} event the event.\n     */\n    _drop(event) {\n        const dropdata = this._processEvent(event);\n        if (dropdata) {\n            this.entercount = 0;\n            if (this.dropzonevisible) {\n                this.dropzonevisible = false;\n                this._callParentMethod('hideDropZone', dropdata, event);\n            }\n            this.element.classList.remove(this.classes.DRAGOVER);\n            this._callParentMethod('drop', dropdata, event);\n            // An accepted drop resets the initial position.\n            // Save the starting point.\n            dragStartPoint = {};\n        }\n    }\n\n    /**\n     * Process a drag and drop event and delegate logic to the parent component.\n     *\n     * @param {Event} event the drag and drop event\n     * @return {Object|false} the dropdata or null if the event should not be processed\n     */\n    _processEvent(event) {\n        const dropdata = this._getDropData(event);\n        if (!dropdata) {\n            return null;\n        }\n        if (this.parent.validateDropData(dropdata)) {\n            // All accepted drag&drop event must prevent bubbling and defaults, otherwise\n            // parent dragdrop instances could capture it by mistake.\n            event.preventDefault();\n            event.stopPropagation();\n            this._addEventTotalMovement(event);\n            return dropdata;\n        }\n        return null;\n    }\n\n    /**\n     * Add the total amout of movement to a mouse event.\n     *\n     * @param {MouseEvent} event\n     */\n    _addEventTotalMovement(event) {\n        if (dragStartPoint.pageX === undefined || event.pageX === undefined) {\n            return;\n        }\n        event.fixedMovementX = event.pageX - dragStartPoint.pageX;\n        event.fixedMovementY = event.pageY - dragStartPoint.pageY;\n        event.initialPageX = dragStartPoint.pageX;\n        event.initialPageY = dragStartPoint.pageY;\n        // The element possible new top.\n        const current = this.element.getBoundingClientRect();\n        // Add the new position fixed position.\n        event.newFixedTop = current.top + event.fixedMovementY;\n        event.newFixedLeft = current.left + event.fixedMovementX;\n        // The affected region possible new top.\n        if (this.fullregion !== undefined) {\n            const current = this.fullregion.getBoundingClientRect();\n            event.newRegionFixedxTop = current.top + event.fixedMovementY;\n            event.newRegionFixedxLeft = current.left + event.fixedMovementX;\n        }\n    }\n\n    /**\n     * Convenient method for calling parent component functions if present.\n     *\n     * @param {string} methodname the name of the method\n     * @param {Object} dropdata the current drop data object\n     * @param {Event} event the original event\n     */\n    _callParentMethod(methodname, dropdata, event) {\n        if (typeof this.parent[methodname] === 'function') {\n            this.parent[methodname](dropdata, event);\n        }\n    }\n\n    /**\n     * Get the current dropdata for a specific event.\n     *\n     * The browser can generate drag&drop events related to several user interactions:\n     *  - Drag a page elements: this case is registered in the activeDropData map\n     *  - Drag some HTML selections: ignored for now\n     *  - Drag a file over the browser: file drag may appear in the future but for now they are ignored.\n     *\n     * @param {Event} event the original event.\n     * @returns {Object|undefined} with the dragged data (or undefined if none)\n     */\n    _getDropData(event) {\n        if (this._containsOnlyFiles(event)) {\n            return undefined;\n        }\n        return activeDropData.get(this.reactive);\n    }\n\n    /**\n     * Check if the dragged event contains only files.\n     *\n     * Files dragging does not generate drop data because they came from outside the page and the component\n     * must check it before validating the event.\n     *\n     * @param {Event} event the original event.\n     * @returns {boolean} if the drag dataTransfers contains files.\n     */\n    _containsOnlyFiles(event) {\n        if (event.dataTransfer.types && event.dataTransfer.types.length > 0) {\n            // Chrome drag page images as files. To differentiate a real file from a page\n            // image we need to check if all the dataTransfers types are files.\n            return event.dataTransfer.types.every(type => type === 'Files');\n        }\n        return false;\n    }\n}\n"],"names":["obj","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","arg","key","input","hint","_typeof","prim","Symbol","toPrimitive","undefined","res","call","String","Number","_toPrimitive","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","e","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","constructor","arguments","apply","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","getPrototypeOf","_basecomponent","__esModule","default","activeDropData","Map","dragStartPoint","_default","_BaseComponent","subClass","superClass","create","value","_inherits","protoProps","staticProps","_super","parent","_parent$name","_parent$classes","_this$parent$draggabl","_this$parent$relative","name","classes","assign","BODYDRAGGING","DRAGGABLEREADY","DROPREADY","DRAGOVER","DRAGGING","DROPUP","DROPDOWN","DROPZONE","DRAGICON","fullregion","autoconfigDraggable","draggable","relativeDrag","entercount","dropzonevisible","validateDropData","element","classList","add","addEventListener","_dragEnter","_dragLeave","_dragOver","_drop","getDraggableData","setDraggable","Error","setAttribute","_dragStart","_dragEnd","removeEventListener","remove","event","_this$fullregion","document","activeElement","matches","preventDefault","dropdata","pageX","pageY","stopPropagation","set","reactive","body","dragImage","setDragImage","customImage","position","x","y","offsetX","offsetY","dataTransfer","_callParentMethod","_this$fullregion2","get","delete","_addEventTotalMovement","_processEvent","_getDropData","fixedMovementX","fixedMovementY","initialPageX","initialPageY","current","getBoundingClientRect","newFixedTop","top","newFixedLeft","left","newRegionFixedxTop","newRegionFixedxLeft","methodname","_containsOnlyFiles","types","every","type","BaseComponent","_exports"],"mappings":"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"}