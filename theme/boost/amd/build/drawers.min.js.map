{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from 'core/modal_backdrop';\nimport Templates from 'core/templates';\nimport * as Aria from 'core/aria';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {debounce} from 'core/utils';\nimport Pending from 'core/pending';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\nconst SELECTORS = {\n    BUTTONS: '[data-toggler=\"drawers\"]',\n    CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\n    OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\n    TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\n    DRAWERS: '[data-region=\"fixed-drawer\"]',\n    CONTAINER: '#page.drawers',\n    DRAWERCONTENT: '.drawercontent',\n};\n\nconst CLASSES = {\n    SCROLLED: 'scrolled',\n    SHOW: 'show',\n    NOTINITIALISED: 'not-initialized',\n};\n\n/**\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\n * Breakpoints\n *\n * @private\n */\nconst sizes = {\n    medium: 991,\n    large: 1400\n};\n\n/**\n * Get the current body width.\n *\n * @returns {number} the current body width.\n * @private\n */\nconst getCurrentWidth = () => {\n    const DomRect = document.body.getBoundingClientRect();\n    return DomRect.x + DomRect.width;\n};\n\n/**\n * Check if the user uses a small size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\n * @private\n */\nconst isSmall = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth < sizes.medium;\n};\n\n/**\n * Check if the user uses a large size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.large max size.\n * @private\n */\nconst isLarge = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth >= sizes.large;\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n    if (!backdropPromise) {\n        backdropPromise = Templates.render('core/modal_backdrop', {})\n        .then(html => new ModalBackdrop(html))\n        .then(modalBackdrop => {\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\n                e.preventDefault();\n                Drawers.closeAllDrawers();\n            });\n            return modalBackdrop;\n        })\n        .catch();\n    }\n    return backdropPromise;\n};\n\n/**\n * Get the button element to open a specific drawer.\n *\n * @param {String} drawerId the drawer element Id\n * @return {HTMLElement|undefined} the open button element\n * @private\n */\nconst getDrawerOpenButton = (drawerId) => {\n    let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\n    if (!openButton) {\n        openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\n    }\n    return openButton;\n};\n\n/**\n * Disable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst disableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        disableButtonTooltip(button);\n    });\n};\n\n/**\n * Disable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\n * @private\n */\nconst disableButtonTooltip = (button, enableOnBlur) => {\n    if (button.hasAttribute('data-original-title')) {\n        // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n        jQuery(button).tooltip('disable');\n        button.setAttribute('title', button.dataset.originalTitle);\n    } else {\n        button.dataset.disabledToggle = button.dataset.toggle;\n        button.removeAttribute('data-toggle');\n    }\n    if (enableOnBlur) {\n        button.dataset.restoreTooltipOnBlur = true;\n    }\n};\n\n/**\n * Enable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst enableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        enableButtonTooltip(button);\n    });\n};\n\n/**\n * Enable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @private\n */\nconst enableButtonTooltip = (button) => {\n    // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n    if (button.hasAttribute('data-original-title')) {\n        jQuery(button).tooltip('enable');\n        button.removeAttribute('title');\n    } else if (button.dataset.disabledToggle) {\n        button.dataset.toggle = button.dataset.disabledToggle;\n        jQuery(button).tooltip();\n    }\n    delete button.dataset.restoreTooltipOnBlur;\n};\n\n/**\n * Add scroll listeners to a drawer element.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst addInnerScrollListener = (drawerNode) => {\n    const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\n    if (!content) {\n        return;\n    }\n    content.addEventListener(\"scroll\", () => {\n        drawerNode.classList.toggle(\n            CLASSES.SCROLLED,\n            content.scrollTop != 0\n        );\n    });\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n    /**\n     * The underlying HTMLElement which is controlled.\n     */\n    drawerNode = null;\n\n    constructor(drawerNode) {\n        this.drawerNode = drawerNode;\n\n        if (isSmall()) {\n            this.closeDrawer({focusOnOpenButton: false, updatePreferences: false});\n        }\n\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.openDrawer({focusOnCloseButton: false});\n        } else if (this.drawerNode.dataset.forceopen == 1) {\n            if (!isSmall()) {\n                this.openDrawer({focusOnCloseButton: false});\n            }\n        } else {\n            Aria.hide(this.drawerNode);\n        }\n\n        // Disable tooltips in small screens.\n        if (isSmall()) {\n            disableDrawerTooltips(this.drawerNode);\n        }\n\n        addInnerScrollListener(this.drawerNode);\n\n        drawerMap.set(drawerNode, this);\n\n        drawerNode.classList.remove(CLASSES.NOTINITIALISED);\n    }\n\n    /**\n     * Whether the drawer is open.\n     *\n     * @returns {boolean}\n     */\n    get isOpen() {\n        return this.drawerNode.classList.contains(CLASSES.SHOW);\n    }\n\n    /**\n     * Whether the drawer should close when the window is resized\n     *\n     * @returns {boolean}\n     */\n    get closeOnResize() {\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\n    }\n\n    /**\n     * The list of event types.\n     *\n     * @static\n     * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n     * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n     * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n     * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n     */\n    static eventTypes = {\n        /**\n         * An event triggered before a drawer is shown.\n         *\n         * @event theme_boost/drawers:show\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be opened.\n         */\n        drawerShow: 'theme_boost/drawers:show',\n\n        /**\n         * An event triggered after a drawer is shown.\n         *\n         * @event theme_boost/drawers:shown\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be opened.\n         */\n        drawerShown: 'theme_boost/drawers:shown',\n\n        /**\n         * An event triggered before a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hide\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be hidden.\n         */\n        drawerHide: 'theme_boost/drawers:hide',\n\n        /**\n         * An event triggered after a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hidden\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be hidden.\n         */\n        drawerHidden: 'theme_boost/drawers:hidden',\n    };\n\n\n    /**\n     * Get the drawer instance for the specified node\n     *\n     * @param {HTMLElement} drawerNode\n     * @returns {module:theme_boost/drawers}\n     */\n    static getDrawerInstanceForNode(drawerNode) {\n        if (!drawerMap.has(drawerNode)) {\n            new Drawers(drawerNode);\n        }\n\n        return drawerMap.get(drawerNode);\n    }\n\n    /**\n     * Dispatch a drawer event.\n     *\n     * @param {string} eventname the event name\n     * @param {boolean} cancelable if the event is cancelable\n     * @returns {CustomEvent} the resulting custom event\n     */\n    dispatchEvent(eventname, cancelable = false) {\n        return dispatchEvent(\n            eventname,\n            {\n                drawerInstance: this,\n            },\n            this.drawerNode,\n            {\n                cancelable,\n            }\n        );\n    }\n\n    /**\n     * Open the drawer.\n     *\n     * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\n     * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\n     * focusOnCloseButton parameter can be set to false to prevent this behaviour.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\n     */\n    openDrawer({focusOnCloseButton = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:open');\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n        if (showEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is showing to prevent glitchy effects.\n        this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle('hidden', true);\n\n        // Remove open tooltip if still visible.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton && openButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(openButton)?.tooltip('hide');\n        }\n\n        Aria.unhide(this.drawerNode);\n        this.drawerNode.classList.add(CLASSES.SHOW);\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\n            M.util.set_user_preference(preference, true);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.add(state);\n        }\n\n        if (isSmall()) {\n            getBackdrop().then(backdrop => {\n                backdrop.show();\n\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'hidden';\n                return backdrop;\n            })\n            .catch();\n        }\n\n        // Show close button once the drawer is fully opened.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        if (focusOnCloseButton && closeButton) {\n            disableButtonTooltip(closeButton, true);\n        }\n        setTimeout(() => {\n            closeButton.classList.toggle('hidden', false);\n            if (focusOnCloseButton) {\n                closeButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\n    }\n\n    /**\n     * Close the drawer.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\n     * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\n     */\n    closeDrawer({focusOnOpenButton = true, updatePreferences = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:close');\n\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n        if (hideEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is hiding to prevent glitchy effects.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        closeButton?.classList.toggle('hidden', true);\n        // Remove the close button tooltip if visible.\n        if (closeButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(closeButton)?.tooltip('hide');\n        }\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && updatePreferences && !isSmall()) {\n            M.util.set_user_preference(preference, false);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.remove(state);\n        }\n\n        Aria.hide(this.drawerNode);\n        this.drawerNode.classList.remove(CLASSES.SHOW);\n\n        getBackdrop().then(backdrop => {\n            backdrop.hide();\n\n            if (isSmall()) {\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'auto';\n            }\n            return backdrop;\n        })\n        .catch();\n\n        // Move focus to the open drawer (or toggler) button once the drawer is hidden.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton) {\n            disableButtonTooltip(openButton, true);\n        }\n        setTimeout(() => {\n            if (openButton && focusOnOpenButton) {\n                openButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n    }\n\n    /**\n     * Toggle visibility of the drawer.\n     */\n    toggleVisibility() {\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.closeDrawer();\n        } else {\n            this.openDrawer();\n        }\n    }\n\n    /**\n     * Close all drawers.\n     */\n    static closeAllDrawers() {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Close all drawers except for the specified drawer.\n     *\n     * @param {module:theme_boost/drawers} comparisonInstance\n     */\n    static closeOtherDrawers(comparisonInstance) {\n        drawerMap.forEach(drawerInstance => {\n            if (drawerInstance === comparisonInstance) {\n                return;\n            }\n\n            drawerInstance.closeDrawer();\n        });\n    }\n}\n\n/**\n * Activate the scroller helper for the drawer layout.\n *\n * @private\n */\nconst scroller = () => {\n    const body = document.querySelector('body');\n    const drawerLayout = document.querySelector(SELECTORS.CONTAINER);\n    if (drawerLayout) {\n        drawerLayout.addEventListener(\"scroll\", () => {\n            if (drawerLayout.scrollTop >= window.innerHeight) {\n                body.classList.add(CLASSES.SCROLLED);\n            } else {\n                body.classList.remove(CLASSES.SCROLLED);\n            }\n        });\n    }\n};\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n    if (toggleButton.dataset.target) {\n        document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`)\n        .forEach(btn => {\n            btn.dataset.lastused = false;\n        });\n        toggleButton.dataset.lastused = true;\n    }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n    const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\n    if (lastUsedButton) {\n        lastUsedButton.focus();\n    }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n    // Listen for show/hide events.\n    document.addEventListener('click', e => {\n        const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\n        if (toggleButton && toggleButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.toggleVisibility();\n        }\n\n        const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\n        if (openDrawerButton && openDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.openDrawer();\n        }\n\n        const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n            drawerInstance.closeDrawer();\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\n        }\n    });\n\n    // Close drawer when another drawer opens.\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        if (isLarge()) {\n            return;\n        }\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\n    });\n\n    // Tooglers and openers blur listeners.\n    const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\n    document.addEventListener('focusout', (e) => {\n        const button = e.target.closest(btnSelector);\n        if (button?.dataset.restoreTooltipOnBlur !== undefined) {\n            enableButtonTooltip(button);\n        }\n    });\n\n    const closeOnResizeListener = () => {\n        if (isSmall()) {\n            let anyOpen = false;\n            drawerMap.forEach(drawerInstance => {\n                disableDrawerTooltips(drawerInstance.drawerNode);\n                if (drawerInstance.isOpen) {\n                    if (drawerInstance.closeOnResize) {\n                        drawerInstance.closeDrawer();\n                    } else {\n                        anyOpen = true;\n                    }\n                }\n            });\n\n            if (anyOpen) {\n                getBackdrop().then(backdrop => backdrop.show()).catch();\n            }\n        } else {\n            drawerMap.forEach(drawerInstance => {\n                enableDrawerTooltips(drawerInstance.drawerNode);\n            });\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\n        }\n    };\n\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\n};\n\nscroller();\nregisterListeners();\n\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_defineProperty","value","arg","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_modal_backdrop","_templates","Aria","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","desc","set","_interopRequireWildcard","_pending","_jquery","backdropPromise","drawerMap","Map","SELECTORS","CLASSES","sizes","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","querySelector","concat","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","jQuery","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","instance","Constructor","_classCallCheck","this","closeDrawer","focusOnOpenButton","updatePreferences","classList","contains","openDrawer","focusOnCloseButton","forceopen","hide","content","scrollTop","addInnerScrollListener","remove","protoProps","staticProps","parseInt","closeOnResize","eventname","cancelable","dispatchEvent","drawerInstance","_this$drawerNode$quer","_ref","arguments","_ref$focusOnCloseButt","pendingPromise","Pending","showEvent","eventTypes","drawerShow","defaultPrevented","_jQuery","unhide","add","preference","M","util","set_user_preference","state","page","getElementById","backdrop","show","style","overflow","closeButton","setTimeout","focus","resolve","drawerShown","_ref2","_ref2$focusOnOpenButt","_ref2$updatePreferenc","hideEvent","drawerHide","_jQuery2","drawerHidden","comparisonInstance","_exports","drawerLayout","setLastUsedToggle","toggleButton","querySelectorAll","btn","lastused","window","innerHeight","closest","targetDrawer","getDrawerInstanceForNode","toggleVisibility","openDrawerButton","lastUsedButton","closeDrawerButton","closeOtherDrawers","detail","btnSelector","debounce","anyOpen","isOpen","registerListeners"],"mappings":"uPA6B4B,SAAAA,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAA,IAAAD,QAAAE,iBAAA,IAAAF,QAAA,OAAAF,yBAAA,SAAAC,aAAA,OAAAA,YAAAG,iBAAAD,iBAAA,GAAAF,YAAA,CAAA,SAAAI,uBAAAC,KAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAA,CAAAE,QAAAF,IAAA,CAAA,SAAAG,QAAAH,KAAA,OAAAG,QAAA,mBAAAC,QAAA,iBAAAA,OAAAC,SAAA,SAAAL,KAAA,cAAAA,KAAA,SAAAA,KAAA,OAAAA,KAAA,mBAAAI,QAAAJ,IAAAM,cAAAF,QAAAJ,MAAAI,OAAAG,UAAA,gBAAAP,GAAA,EAAAG,QAAAH,IAAA,CAAA,SAAAQ,kBAAAC,OAAAC,OAAA,IAAA,IAAAC,EAAA,EAAAA,EAAAD,MAAAE,OAAAD,IAAA,CAAA,IAAAE,WAAAH,MAAAC,GAAAE,WAAAC,WAAAD,WAAAC,aAAA,EAAAD,WAAAE,cAAA,EAAA,UAAAF,aAAAA,WAAAG,UAAA,GAAAC,OAAAC,eAAAT,OAAAU,eAAAN,WAAAO,KAAAP,YAAA,CAAA,SAAAQ,gBAAArB,IAAAoB,IAAAE,OAAA,OAAAF,IAAAD,eAAAC,QAAApB,IAAAiB,OAAAC,eAAAlB,IAAAoB,IAAA,CAAAE,MAAAA,MAAAR,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAhB,IAAAoB,KAAAE,MAAAtB,GAAA,CAAA,SAAAmB,eAAAI,KAAA,IAAAH,IAAA,SAAAI,MAAAC,MAAA,GAAA,WAAAtB,QAAAqB,QAAA,OAAAA,MAAA,OAAAA,MAAA,IAAAE,KAAAF,MAAApB,OAAAuB,aAAA,QAAAC,IAAAF,KAAA,CAAA,IAAAG,IAAAH,KAAAI,KAAAN,MAAAC,MAAA,WAAA,GAAA,WAAAtB,QAAA0B,KAAA,OAAAA,IAAA,MAAA,IAAAE,UAAA,+CAAA,CAAA,OAAA,WAAAN,KAAAO,OAAAC,QAAAT,MAAA,CAAAU,CAAAX,IAAA,UAAA,MAAA,WAAApB,QAAAiB,KAAAA,IAAAY,OAAAZ,IAAA,iFAP5Be,gBAAApC,uBAAAoC,iBACAC,WAAArC,uBAAAqC,YACAC,KAK4B,SAAArC,IAAAL,aAAA,IAAAA,aAAAK,KAAAA,IAAAC,WAAA,OAAAD,IAAA,GAAA,OAAAA,KAAA,WAAAG,QAAAH,MAAA,mBAAAA,IAAA,MAAA,CAAAE,QAAAF,KAAA,IAAAsC,MAAA5C,yBAAAC,aAAA,GAAA2C,OAAAA,MAAAC,IAAAvC,KAAA,OAAAsC,MAAAE,IAAAxC,KAAA,IAAAyC,OAAA,CAAA,EAAAC,sBAAAzB,OAAAC,gBAAAD,OAAA0B,yBAAA,IAAA,IAAAvB,OAAApB,IAAA,GAAA,YAAAoB,KAAAH,OAAAV,UAAAqC,eAAAd,KAAA9B,IAAAoB,KAAA,CAAA,IAAAyB,KAAAH,sBAAAzB,OAAA0B,yBAAA3C,IAAAoB,KAAA,KAAAyB,OAAAA,KAAAL,KAAAK,KAAAC,KAAA7B,OAAAC,eAAAuB,OAAArB,IAAAyB,MAAAJ,OAAArB,KAAApB,IAAAoB,IAAA,CAAAqB,OAAAvC,QAAAF,IAAAsC,OAAAA,MAAAQ,IAAA9C,IAAAyC,QAAA,OAAAA,MAAA,CAL5BM,CAAAV,MAGAW,SAAAjD,uBAAAiD,UAEAC,QAAAlD,uBAAAkD,SAEA,IAAIC,gBAAkB,KAEhBC,UAAY,IAAIC,IAEhBC,kBACO,2BADPA,mBAEQ,sDAFRA,kBAGO,qDAHPA,oBAIS,iDAJTA,kBAKO,+BALPA,oBAMS,gBANTA,wBAOa,iBAGbC,iBACQ,WADRA,aAEI,OAFJA,uBAGc,kBASdC,aACM,IADNA,YAEK,KASLC,gBAAkB,WACpB,IAAMC,QAAUC,SAASC,KAAKC,wBAC9B,OAAOH,QAAQI,EAAIJ,QAAQK,OASzBC,QAAU,WAEZ,OADqBP,kBACCD,cAoBpBS,YAAc,WAahB,OAZKd,kBACDA,gBAAkBe,WAAAA,QAAUC,OAAO,sBAAuB,IACzDC,MAAK,SAAAC,MAAI,OAAI,IAAIC,gBAAAA,QAAcD,KAAK,IACpCD,MAAK,SAAAG,eAKF,OAJAA,cAAcC,qBAAqB/B,IAAI,GAAGgC,iBAAiB,SAAS,SAAAC,GAChEA,EAAEC,iBACFC,QAAQC,iBACZ,IACON,iBAEVO,SAEE3B,iBAUL4B,oBAAsB,SAACC,UACzB,IAAIC,WAAatB,SAASuB,cAAiB5B,GAAAA,OAAAA,kBAAkC0B,kBAAAA,OAAAA,SAAa,OAI1F,OAHKC,aACDA,WAAatB,SAASuB,cAAa,GAAAC,OAAI7B,oBAAoC0B,kBAAAA,OAAAA,SAAa,QAErFC,YASLG,sBAAwB,SAACC,YACX,CACZA,WAAWH,cAAc5B,oBACzByB,oBAAoBM,WAAWC,KAE3BC,SAAQ,SAAAC,QACPA,QAGLC,qBAAqBD,OACzB,KAUEC,qBAAuB,SAACD,OAAQE,cAC9BF,OAAOG,aAAa,yBAEpB,EAAAC,QAAAA,SAAOJ,QAAQK,QAAQ,WACvBL,OAAOM,aAAa,QAASN,OAAOO,QAAQC,iBAE5CR,OAAOO,QAAQE,eAAiBT,OAAOO,QAAQG,OAC/CV,OAAOW,gBAAgB,gBAEvBT,eACAF,OAAOO,QAAQK,sBAAuB,IA6BxCC,oBAAsB,SAACb,QAErBA,OAAOG,aAAa,yBACpB,EAAAC,QAAAA,SAAOJ,QAAQK,QAAQ,UACvBL,OAAOW,gBAAgB,UAChBX,OAAOO,QAAQE,iBACtBT,OAAOO,QAAQG,OAASV,OAAOO,QAAQE,gBACvC,EAAAL,iBAAOJ,QAAQK,kBAEZL,OAAOO,QAAQK,sBAuELxB,QAAO,WAMxB,SAAAA,QAAYS,aA9PY,SAAAiB,SAAAC,aAAA,KAAAD,oBAAAC,aAAA,MAAA,IAAAvE,UAAA,oCAAA,CA8PAwE,CAAAC,KAAA7B,SAAAtD,gBAAAmF,KAAA,aAFX,MAGTA,KAAKpB,WAAaA,WAEdrB,WACAyC,KAAKC,YAAY,CAACC,mBAAmB,EAAOC,mBAAmB,IAG/DH,KAAKpB,WAAWwB,UAAUC,SAASvD,cACnCkD,KAAKM,WAAW,CAACC,oBAAoB,IACO,GAArCP,KAAKpB,WAAWU,QAAQkB,UAC1BjD,WACDyC,KAAKM,WAAW,CAACC,oBAAoB,IAGzC1E,KAAK4E,KAAKT,KAAKpB,YAIfrB,WACAoB,sBAAsBqB,KAAKpB,YAvFR,SAACA,YAC5B,IAAM8B,QAAU9B,WAAWH,cAAc5B,yBACpC6D,SAGLA,QAAQ1C,iBAAiB,UAAU,WAC/BY,WAAWwB,UAAUX,OACjB3C,iBACqB,GAArB4D,QAAQC,UAEhB,IAgFIC,CAAuBZ,KAAKpB,YAE5BjC,UAAUL,IAAIsC,WAAYoB,MAE1BpB,WAAWwB,UAAUS,OAAO/D,uBAChC,CAzRwB,IAAAgD,YAAAgB,WAAAC,YAsiBvB,OAtiBuBjB,YAyRvB3B,QAzRuB2C,WAyRvB,CAAA,CAAAlG,IAAA,SAAAoB,IAOD,WACI,OAAOgE,KAAKpB,WAAWwB,UAAUC,SAASvD,aAC9C,GAAC,CAAAlC,IAAA,gBAAAoB,IAOD,WACI,QAASgF,SAAShB,KAAKpB,WAAWU,QAAQ2B,cAC9C,GAAC,CAAArG,IAAA,gBAAAE,MAuED,SAAcoG,WAA+B,IAApBC,mEACrB,OAAO,EAAAC,kBAAAA,eACHF,UACA,CACIG,eAAgBrB,MAEpBA,KAAKpB,WACL,CACIuC,WAAAA,YAGZ,GAAC,CAAAvG,IAAA,aAAAE,MAYD,WAA6C,IAAAwG,sBAAAC,KAAAC,UAAApH,OAAA,QAAAgB,IAAAoG,UAAA,GAAAA,UAAA,GAAJ,CAAE,EAAAC,sBAAAF,KAA/BhB,mBAAAA,mDAAyBkB,sBAE3BC,eAAiB,IAAIC,SAAOjI,QAAC,4BAC7BkI,UAAY5B,KAAKoB,cAAcjD,QAAQ0D,WAAWC,YAAY,GACpE,IAAIF,UAAUG,iBAAd,CAKA,QAAAT,sBAAAtB,KAAKpB,WAAWH,cAAc5B,2BAA9B,IAAAyE,uBAAAA,sBAAmDlB,UAAUX,OAAO,UAAU,GAG9E,IACkEuC,QAD9DxD,WAAaF,oBAAoB0B,KAAKpB,WAAWC,IACjDL,YAAcA,WAAWU,aAAa,iCAEtCC,SAAAA,EAAAA,QAAAA,SAAOX,gCAAPwD,QAAoB5C,QAAQ,SAGhCvD,KAAKoG,OAAOjC,KAAKpB,YACjBoB,KAAKpB,WAAWwB,UAAU8B,IAAIpF,cAE9B,IAAMqF,WAAanC,KAAKpB,WAAWU,QAAQ6C,WACvCA,aAAe5E,WAAmD,GAArCyC,KAAKpB,WAAWU,QAAQkB,WACrD4B,EAAEC,KAAKC,oBAAoBH,YAAY,GAG3C,IAAMI,MAAQvC,KAAKpB,WAAWU,QAAQiD,MACtC,GAAIA,MAAO,CACP,IAAMC,KAAOtF,SAASuF,eAAe,QACrCD,KAAKpC,UAAU8B,IAAIK,MACvB,CAEIhF,WACAC,cAAcG,MAAK,SAAA+E,UAKf,OAJAA,SAASC,OAEWzF,SAASuF,eAAe,QAChCG,MAAMC,SAAW,SACtBH,YAEVrE,QAIL,IAAMyE,YAAc9C,KAAKpB,WAAWH,cAAc5B,oBAC9C0D,oBAAsBuC,aACtB9D,qBAAqB8D,aAAa,GAEtCC,YAAW,WACPD,YAAY1C,UAAUX,OAAO,UAAU,GACnCc,oBACAuC,YAAYE,QAEhBtB,eAAeuB,SAClB,GAAE,KAEHjD,KAAKoB,cAAcjD,QAAQ0D,WAAWqB,YAlDtC,CAmDJ,GAAC,CAAAtI,IAAA,cAAAE,MASD,WAAuE,IAAAqI,MAAA3B,UAAApH,OAAA,QAAAgB,IAAAoG,UAAA,GAAAA,UAAA,GAAJ,CAAE,EAAA4B,sBAAAD,MAAxDjD,kBAAAA,kDAAwBkD,sBAAAC,sBAAAF,MAAEhD,kBAAAA,kDAAwBkD,sBAErD3B,eAAiB,IAAIC,SAAOjI,QAAC,6BAE7B4J,UAAYtD,KAAKoB,cAAcjD,QAAQ0D,WAAW0B,YAAY,GACpE,IAAID,UAAUvB,iBAAd,CAKA,IAGqDyB,SAH/CV,YAAc9C,KAAKpB,WAAWH,cAAc5B,oBAClDiG,mBAAAA,YAAa1C,UAAUX,OAAO,UAAU,GAEpCqD,YAAY5D,aAAa,iCAEzBC,UAAAA,EAAAA,QAAAA,SAAO2D,kCAAPU,SAAqBpE,QAAQ,SAGjC,IAAM+C,WAAanC,KAAKpB,WAAWU,QAAQ6C,WACvCA,YAAchC,oBAAsB5C,WACpC6E,EAAEC,KAAKC,oBAAoBH,YAAY,GAG3C,IAAMI,MAAQvC,KAAKpB,WAAWU,QAAQiD,MACtC,GAAIA,MAAO,CACP,IAAMC,KAAOtF,SAASuF,eAAe,QACrCD,KAAKpC,UAAUS,OAAO0B,MAC1B,CAEA1G,KAAK4E,KAAKT,KAAKpB,YACfoB,KAAKpB,WAAWwB,UAAUS,OAAO/D,cAEjCU,cAAcG,MAAK,SAAA+E,UAOf,OANAA,SAASjC,OAELlD,YACoBL,SAASuF,eAAe,QAChCG,MAAMC,SAAW,QAE1BH,YAEVrE,QAGD,IAAIG,WAAaF,oBAAoB0B,KAAKpB,WAAWC,IACjDL,YACAQ,qBAAqBR,YAAY,GAErCuE,YAAW,WACHvE,YAAc0B,mBACd1B,WAAWwE,QAEftB,eAAeuB,SAClB,GAAE,KAEHjD,KAAKoB,cAAcjD,QAAQ0D,WAAW4B,aAhDtC,CAiDJ,GAAC,CAAA7I,IAAA,mBAAAE,MAKD,WACQkF,KAAKpB,WAAWwB,UAAUC,SAASvD,cACnCkD,KAAKC,cAELD,KAAKM,YAEb,IA9gBwBS,YA8gBvB,CAAA,CAAAnG,IAAA,2BAAAE,MA3KD,SAAgC8D,YAK5B,OAJKjC,UAAUZ,IAAI6C,aACf,IAAIT,QAAQS,YAGTjC,UAAUX,IAAI4C,WACzB,GAAC,CAAAhE,IAAA,kBAAAE,MA0KD,WACI6B,UAAUmC,SAAQ,SAAAuC,gBACdA,eAAepB,aACnB,GACJ,GAAC,CAAArF,IAAA,oBAAAE,MAOD,SAAyB4I,oBACrB/G,UAAUmC,SAAQ,SAAAuC,gBACVA,iBAAmBqC,oBAIvBrC,eAAepB,aACnB,GACJ,IAtiBwBa,YAAA9G,kBAAA8F,YAAA/F,UAAA+G,YAAAC,aAAA/G,kBAAA8F,YAAAiB,aAAAtG,OAAAC,eAAAoF,YAAA,YAAA,CAAAtF,UAAA,IAsiBvB2D,OAAA,CA9SuB,GA8SvBwF,SAAAjK,QAAAyE,QAAAtD,gBA9SgBsD,QA8DG,aAAA,CAQhB2D,WAAY,2BASZoB,YAAa,4BASbK,WAAY,2BASZE,aAAc,+BAqNtB,IACUtG,KACAyG,aAiBJC,kBAAoB,SAACC,cACnBA,aAAaxE,QAAQrF,SACrBiD,SAAS6G,iBAAgB,GAAArF,OAAI7B,2CAAkCiH,aAAaxE,QAAQrF,OAAW,OAC9F6E,SAAQ,SAAAkF,KACLA,IAAI1E,QAAQ2E,UAAW,CAC3B,IACAH,aAAaxE,QAAQ2E,UAAW,IAuGoC,OA/HlE9G,KAAOD,SAASuB,cAAc,SAC9BmF,aAAe1G,SAASuB,cAAc5B,uBAExC+G,aAAa5F,iBAAiB,UAAU,WAChC4F,aAAajD,WAAauD,OAAOC,YACjChH,KAAKiD,UAAU8B,IAAIpF,kBAEnBK,KAAKiD,UAAUS,OAAO/D,iBAE9B,IAmCkB,WAEtBI,SAASc,iBAAiB,SAAS,SAAAC,GAC/B,IAAM6F,aAAe7F,EAAEhE,OAAOmK,QAAQvH,qBACtC,GAAIiH,cAAgBA,aAAaxE,QAAQrF,OAAQ,CAC7CgE,EAAEC,iBACF,IAAMmG,aAAenH,SAASuF,eAAeqB,aAAaxE,QAAQrF,QAC5DoH,eAAiBlD,QAAQmG,yBAAyBD,cACxDR,kBAAkBC,cAElBzC,eAAekD,kBACnB,CAEA,IAAMC,iBAAmBvG,EAAEhE,OAAOmK,QAAQvH,mBAC1C,GAAI2H,kBAAoBA,iBAAiBlF,QAAQrF,OAAQ,CACrDgE,EAAEC,iBACF,IAAMmG,cAAenH,SAASuF,eAAe+B,iBAAiBlF,QAAQrF,QAChEoH,gBAAiBlD,QAAQmG,yBAAyBD,eACxDR,kBAAkBC,cAElBzC,gBAAef,YACnB,CAEA,IAnCqBrG,OACnBwK,eAkCIC,kBAAoBzG,EAAEhE,OAAOmK,QAAQvH,oBAC3C,GAAI6H,mBAAqBA,kBAAkBpF,QAAQrF,OAAQ,CACvDgE,EAAEC,iBACF,IAAMmG,eAAenH,SAASuF,eAAeiC,kBAAkBpF,QAAQrF,QAChDkE,QAAQmG,yBAAyBD,gBAEzCpE,cAzCEhG,OA0CGyK,kBAAkBpF,QAAQrF,QAzChDwK,eAAiBvH,SAASuB,cAAiB5B,GAAAA,OAAAA,kBAAkC5C,kBAAAA,OAAAA,OAAgC,8BAE/GwK,eAAezB,OAwCf,CACJ,IAGA9F,SAASc,iBAAiBG,QAAQ0D,WAAWC,YAAY,SAAA7D,GAhkBpCjB,mBACED,aAmkBnBoB,QAAQwG,kBAAkB1G,EAAE2G,OAAOvD,eACvC,IAGA,IAAMwD,YAAW,GAAAnG,OAAM7B,oBAAmB,MAAA6B,OAAK7B,kBAAiB,MAAA6B,OAAK7B,oBACrEK,SAASc,iBAAiB,YAAY,SAACC,GACnC,IAAMc,OAASd,EAAEhE,OAAOmK,QAAQS,kBACazJ,KAAzC2D,kBAAAA,EAAAA,OAAQO,QAAQK,uBAChBC,oBAAoBb,OAE5B,IA2BAmF,OAAOlG,iBAAiB,UAAU,EAAA8G,OAAQA,WAzBZ,WAC1B,GAAIvH,UAAW,CACX,IAAIwH,SAAU,EACdpI,UAAUmC,SAAQ,SAAAuC,gBACd1C,sBAAsB0C,eAAezC,YACjCyC,eAAe2D,SACX3D,eAAeJ,cACfI,eAAepB,cAEf8E,SAAU,EAGtB,IAEIA,SACAvH,cAAcG,MAAK,SAAA+E,UAAQ,OAAIA,SAASC,UAAQtE,OAExD,MACI1B,UAAUmC,SAAQ,SAAAuC,gBA3gBD,IAACzC,WACV,EADUA,WA4gBOyC,eAAezC,YA1gBjCH,cAAc5B,oBACzByB,oBAAoBM,WAAWC,KAE3BC,SAAQ,SAAAC,QACPA,QAGLa,oBAAoBb,OACxB,GAmgBQ,IACAvB,cAAcG,MAAK,SAAA+E,UAAQ,OAAIA,SAASjC,UAAQpC,UAIU,MAItE4G,GAEgB/H,SAAS6G,iBAAiBlH,mBAClCiC,SAAQ,SAAAF,YAAU,OAAIT,QAAQmG,yBAAyB1F,eAAa+E,SAAAjK,OAAA"}