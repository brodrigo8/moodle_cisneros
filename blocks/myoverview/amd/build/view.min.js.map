{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n *\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Repository from 'block_myoverview/repository';\nimport * as PagedContentFactory from 'core/paged_content_factory';\nimport * as PubSub from 'core/pubsub';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport * as Notification from 'core/notification';\nimport * as Templates from 'core/templates';\nimport * as CourseEvents from 'core_course/events';\nimport SELECTORS from 'block_myoverview/selectors';\nimport * as PagedContentEvents from 'core/paged_content_events';\nimport * as Aria from 'core/aria';\nimport {debounce} from 'core/utils';\n\nconst TEMPLATES = {\n    COURSES_CARDS: 'block_myoverview/view-cards',\n    COURSES_LIST: 'block_myoverview/view-list',\n    COURSES_SUMMARY: 'block_myoverview/view-summary',\n    NOCOURSES: 'core_course/no-courses'\n};\n\nconst GROUPINGS = {\n    GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n    GROUPING_ALL: 'all',\n    GROUPING_INPROGRESS: 'inprogress',\n    GROUPING_FUTURE: 'future',\n    GROUPING_PAST: 'past',\n    GROUPING_FAVOURITES: 'favourites',\n    GROUPING_HIDDEN: 'hidden'\n};\n\nconst NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\nlet loadedPages = [];\n\nlet courseOffset = 0;\n\nlet lastPage = 0;\n\nlet lastLimit = 0;\n\nlet namespace = null;\n\n/**\n * Get filter values from DOM.\n *\n * @param {object} root The root element for the courses view.\n * @return {filters} Set filters.\n */\nconst getFilterValues = root => {\n    const courseRegion = root.find(SELECTORS.courseView.region);\n    return {\n        display: courseRegion.attr('data-display'),\n        grouping: courseRegion.attr('data-grouping'),\n        sort: courseRegion.attr('data-sort'),\n        displaycategories: courseRegion.attr('data-displaycategories'),\n        customfieldname: courseRegion.attr('data-customfieldname'),\n        customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n    };\n};\n\n// We want the paged content controls below the paged content area.\n// and the controls should be ignored while data is loading.\nconst DEFAULT_PAGED_CONTENT_CONFIG = {\n    ignoreControlWhileLoading: true,\n    controlPlacementBottom: true,\n    persistentLimitKey: 'block_myoverview_user_paging_preference'\n};\n\n/**\n * Get enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @return {promise} Resolved with an array of courses.\n */\nconst getMyCourses = (filters, limit) => {\n    return Repository.getEnrolledCoursesByTimeline({\n        offset: courseOffset,\n        limit: limit,\n        classification: filters.grouping,\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue\n    });\n};\n\n/**\n * Search for enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @param {string} searchValue What does the user want to search within their courses.\n * @return {promise} Resolved with an array of courses.\n */\nconst getSearchMyCourses = (filters, limit, searchValue) => {\n    return Repository.getEnrolledCoursesByTimeline({\n        offset: courseOffset,\n        limit: limit,\n        classification: 'search',\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue,\n        searchvalue: searchValue\n    });\n};\n\n/**\n * Get the container element for the favourite icon.\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n * @return {Object} The favourite icon container\n */\nconst getFavouriteIconContainer = (root, courseId) => {\n    return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the paged content container element.\n *\n * @param {Object} root The course overview container\n * @param {Number} index Rendered page index.\n * @return {Object} The rendered paged container.\n */\nconst getPagedContentContainer = (root, index) => {\n    return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n};\n\n/**\n * Get the course id from a favourite element.\n *\n * @param {Object} root The favourite icon container element.\n * @return {Number} Course id.\n */\nconst getCourseId = root => {\n    return root.attr('data-course-id');\n};\n\n/**\n * Hide the favourite icon.\n *\n * @param {Object} root The favourite icon container element.\n * @param {Number} courseId Course id number.\n */\nconst hideFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.addClass('hidden');\n    Aria.hide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.removeClass('hidden');\n    Aria.unhide(notFavourteIcon);\n};\n\n/**\n * Show the favourite icon.\n *\n * @param {Object} root The course overview container.\n * @param {Number} courseId Course id number.\n */\nconst showFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.removeClass('hidden');\n    Aria.unhide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.addClass('hidden');\n    Aria.hide(notFavourteIcon);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The add to favourite menu item.\n */\nconst getAddFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The remove from favourites menu item.\n */\nconst getRemoveFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Add course to favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst addToFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(courseId, true).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.favourited, courseId);\n            removeAction.removeClass('hidden');\n            addAction.addClass('hidden');\n            showFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Remove course from favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst removeFromFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(courseId, false).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.unfavorited, courseId);\n            removeAction.addClass('hidden');\n            addAction.removeClass('hidden');\n            hideFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The hide course menu item.\n */\nconst getHideCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The show course menu item.\n */\nconst getShowCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Hide course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst hideCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, true);\n\n    // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.addClass('hidden');\n    showAction.removeClass('hidden');\n};\n\n/**\n * Show course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst showCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, null);\n\n    // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.removeClass('hidden');\n    showAction.addClass('hidden');\n};\n\n/**\n * Set the courses hidden status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {Boolean} status new hidden status.\n * @return {Promise} Repository promise.\n */\nconst setCourseHiddenState = (courseId, status) => {\n\n    // If the given status is not hidden, the preference has to be deleted with a null value.\n    if (status === false) {\n        status = null;\n    }\n    return Repository.updateUserPreferences({\n        preferences: [\n            {\n                type: 'block_myoverview_hidden_course_' + courseId,\n                value: status\n            }\n        ]\n    });\n};\n\n/**\n * Reset the loadedPages dataset to take into account the hidden element\n *\n * @param {Object} root The course overview container\n * @param {Number} id The course id number\n */\nconst hideElement = (root, id) => {\n    const pagingBar = root.find('[data-region=\"paging-bar\"]');\n    const jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n    // Get a reduced dataset for the current page.\n    const courseList = loadedPages[jumpto];\n    let reducedCourse = courseList.courses.reduce((accumulator, current) => {\n        if (+id !== +current.id) {\n            accumulator.push(current);\n        }\n        return accumulator;\n    }, []);\n\n    // Get the next page's data if loaded and pop the first element from it.\n    if (typeof (loadedPages[jumpto + 1]) !== 'undefined') {\n        const newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n        // Adjust the dataset for the reset of the pages that are loaded.\n        loadedPages.forEach((courseList, index) => {\n            if (index > jumpto) {\n                let popElement = [];\n                if (typeof (loadedPages[index + 1]) !== 'undefined') {\n                    popElement = loadedPages[index + 1].courses.slice(0, 1);\n                }\n                loadedPages[index].courses = [...loadedPages[index].courses.slice(1), ...popElement];\n            }\n        });\n\n        reducedCourse = [...reducedCourse, ...newElement];\n    }\n\n    // Check if the next page is the last page and if it still has data associated to it.\n    if (lastPage === jumpto + 1 && loadedPages[jumpto + 1].courses.length === 0) {\n        const pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n        PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n    }\n\n    loadedPages[jumpto].courses = reducedCourse;\n\n    // Reduce the course offset.\n    courseOffset--;\n\n    // Render the paged content for the current.\n    const pagedContentPage = getPagedContentContainer(root, jumpto);\n    renderCourses(root, loadedPages[jumpto]).then((html, js) => {\n        return Templates.replaceNodeContents(pagedContentPage, html, js);\n    }).catch(Notification.exception);\n\n    // Delete subsequent pages in order to trigger the callback.\n    loadedPages.forEach((courseList, index) => {\n        if (index > jumpto) {\n            const page = getPagedContentContainer(root, index);\n            page.remove();\n        }\n    });\n};\n\n/**\n * Set the courses favourite status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {boolean} status new favourite status.\n * @return {Promise} Repository promise.\n */\nconst setCourseFavouriteState = (courseId, status) => {\n\n    return Repository.setFavouriteCourses({\n        courses: [\n            {\n                'id': courseId,\n                'favourite': status\n            }\n        ]\n    }).then(result => {\n        if (result.warnings.length === 0) {\n            loadedPages.forEach(courseList => {\n                courseList.courses.forEach((course, index) => {\n                    if (course.id == courseId) {\n                        courseList.courses[index].isfavourite = status;\n                    }\n                });\n            });\n            return true;\n        } else {\n            return false;\n        }\n    }).catch(Notification.exception);\n};\n\n/**\n * Given there are no courses to render provide the rendered template.\n *\n * @param {object} root The root element for the courses view.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst noCoursesRender = root => {\n    const nocoursesimg = root.find(SELECTORS.courseView.region).attr('data-nocoursesimg');\n    const newcourseurl = root.find(SELECTORS.courseView.region).attr('data-newcourseurl');\n    return Templates.render(TEMPLATES.NOCOURSES, {\n        nocoursesimg: nocoursesimg,\n        newcourseurl: newcourseurl\n    });\n};\n\n/**\n * Render the dashboard courses.\n *\n * @param {object} root The root element for the courses view.\n * @param {array} coursesData containing array of returned courses.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst renderCourses = (root, coursesData) => {\n\n    const filters = getFilterValues(root);\n\n    let currentTemplate = '';\n    if (filters.display === 'card') {\n        currentTemplate = TEMPLATES.COURSES_CARDS;\n    } else if (filters.display === 'list') {\n        currentTemplate = TEMPLATES.COURSES_LIST;\n    } else {\n        currentTemplate = TEMPLATES.COURSES_SUMMARY;\n    }\n\n    if (!coursesData) {\n        return noCoursesRender(root);\n    } else {\n        // Sometimes we get weird objects coming after a failed search, cast to ensure typing functions.\n        if (Array.isArray(coursesData.courses) === false) {\n            coursesData.courses = Object.values(coursesData.courses);\n        }\n        // Whether the course category should be displayed in the course item.\n        coursesData.courses = coursesData.courses.map(course => {\n            course.showcoursecategory = filters.displaycategories === 'on';\n            return course;\n        });\n        if (coursesData.courses.length) {\n            return Templates.render(currentTemplate, {\n                courses: coursesData.courses,\n            });\n        } else {\n            return noCoursesRender(root);\n        }\n    }\n};\n\n/**\n * Return the callback to be passed to the subscribe event\n *\n * @param {object} root The root element for the courses view\n * @return {function} Partially applied function that'll execute when passed a limit\n */\nconst setLimit = root => {\n    // @param {Number} limit The paged limit that is passed through the event.\n    return limit => root.find(SELECTORS.courseView.region).attr('data-paging', limit);\n};\n\n/**\n * Intialise the paged list and cards views on page load.\n * Returns an array of paged contents that we would like to handle here\n *\n * @param {object} root The root element for the courses view\n * @param {string} namespace The namespace for all the events attached\n */\nconst registerPagedEventHandlers = (root, namespace) => {\n    const event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n    PubSub.subscribe(event, setLimit(root));\n};\n\n/**\n * Figure out how many items are going to be allowed to be rendered in the block.\n *\n * @param  {Number} pagingLimit How many courses to display\n * @param  {Object} root The course overview container\n * @return {Number[]} How many courses will be rendered\n */\nconst itemsPerPageFunc = (pagingLimit, root) => {\n    let itemsPerPage = NUMCOURSES_PERPAGE.map(value => {\n        let active = false;\n        if (value === pagingLimit) {\n            active = true;\n        }\n\n        return {\n            value: value,\n            active: active\n        };\n    });\n\n    // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n    const totalCourseCount = parseInt(root.find(SELECTORS.courseView.region).attr('data-totalcoursecount'), 10);\n    return itemsPerPage.filter(pagingOption => {\n        return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n    });\n};\n\n/**\n * Mutates and controls the loadedPages array and handles the bootstrapping.\n *\n * @param {Array|Object} coursesData Array of all of the courses to start building the page from\n * @param {Number} currentPage What page are we currently on?\n * @param {Object} pageData Any current page information\n * @param {Object} actions Paged content helper\n * @param {null|boolean} activeSearch Are we currently actively searching and building up search results?\n */\nconst pageBuilder = (coursesData, currentPage, pageData, actions, activeSearch = null) => {\n    // If the courseData comes in an object then get the value otherwise it is a pure array.\n    let courses = coursesData.courses ? coursesData.courses : coursesData;\n    let nextPageStart = 0;\n    let pageCourses = [];\n\n    // If current page's data is loaded make sure we max it to page limit.\n    if (typeof (loadedPages[currentPage]) !== 'undefined') {\n        pageCourses = loadedPages[currentPage].courses;\n        const currentPageLength = pageCourses.length;\n        if (currentPageLength < pageData.limit) {\n            nextPageStart = pageData.limit - currentPageLength;\n            pageCourses = {...loadedPages[currentPage].courses, ...courses.slice(0, nextPageStart)};\n        }\n    } else {\n        // When the page limit is zero, there is only one page of courses, no start for next page.\n        nextPageStart = pageData.limit || false;\n        pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n    }\n\n    // Finished setting up the current page.\n    loadedPages[currentPage] = {\n        courses: pageCourses\n    };\n\n    // Set up the next page (if there is more than one page).\n    const remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n    if (remainingCourses.length) {\n        loadedPages[currentPage + 1] = {\n            courses: remainingCourses\n        };\n    }\n\n    // Set the last page to either the current or next page.\n    if (loadedPages[currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n        lastPage = currentPage;\n        if (activeSearch === null) {\n            actions.allItemsLoaded(currentPage);\n        }\n    } else if (typeof (loadedPages[currentPage + 1]) !== 'undefined'\n        && loadedPages[currentPage + 1].courses.length < pageData.limit) {\n        lastPage = currentPage + 1;\n    }\n\n    courseOffset = coursesData.nextoffset;\n};\n\n/**\n * In cases when switching between regular rendering and search rendering we need to reset some variables.\n */\nconst resetGlobals = () => {\n    courseOffset = 0;\n    loadedPages = [];\n    lastPage = 0;\n    lastLimit = 0;\n};\n\n/**\n * The default functionality of fetching paginated courses without special handling.\n *\n * @return {function(Object, Object, Object, Object, Object, Promise, Number): void}\n */\nconst standardFunctionalityCurry = () => {\n    resetGlobals();\n    return (filters, currentPage, pageData, actions, root, promises, limit) => {\n        const pagePromise = getMyCourses(\n            filters,\n            limit\n        ).then(coursesData => {\n            pageBuilder(coursesData, currentPage, pageData, actions);\n            return renderCourses(root, loadedPages[currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(pagePromise);\n    };\n};\n\n/**\n * Initialize the searching functionality so we can call it when required.\n *\n * @return {function(Object, Number, Object, Object, Object, Promise, Number, String): void}\n */\nconst searchFunctionalityCurry = () => {\n    resetGlobals();\n    return (filters, currentPage, pageData, actions, root, promises, limit, inputValue) => {\n        const searchingPromise = getSearchMyCourses(\n            filters,\n            limit,\n            inputValue\n        ).then(coursesData => {\n            pageBuilder(coursesData, currentPage, pageData, actions);\n            return renderCourses(root, loadedPages[currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(searchingPromise);\n    };\n};\n\n/**\n * Initialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n * @param {function} promiseFunction How do we fetch the courses and what do we do with them?\n * @param {null | string} inputValue What to search for\n */\nconst initializePagedContent = (root, promiseFunction, inputValue = null) => {\n    const pagingLimit = parseInt(root.find(SELECTORS.courseView.region).attr('data-paging'), 10);\n    let itemsPerPage = itemsPerPageFunc(pagingLimit, root);\n\n    const filters = getFilterValues(root);\n    const config = {...{}, ...DEFAULT_PAGED_CONTENT_CONFIG};\n    config.eventNamespace = namespace;\n\n    const pagedContentPromise = PagedContentFactory.createWithLimit(\n        itemsPerPage,\n        (pagesData, actions) => {\n            let promises = [];\n            pagesData.forEach(pageData => {\n                const currentPage = pageData.pageNumber;\n                let limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                // Reset local variables if limits have changed.\n                if (+lastLimit !== +limit) {\n                    loadedPages = [];\n                    courseOffset = 0;\n                    lastPage = 0;\n                }\n\n                if (lastPage === currentPage) {\n                    // If we are on the last page and have it's data then load it from cache.\n                    actions.allItemsLoaded(lastPage);\n                    promises.push(renderCourses(root, loadedPages[currentPage]));\n                    return;\n                }\n\n                lastLimit = limit;\n\n                // Get 2 pages worth of data as we will need it for the hidden functionality.\n                if (typeof (loadedPages[currentPage + 1]) === 'undefined') {\n                    if (typeof (loadedPages[currentPage]) === 'undefined') {\n                        limit *= 2;\n                    }\n                }\n\n                // Call the curried function that'll handle the course promise and any manipulation of it.\n                promiseFunction(filters, currentPage, pageData, actions, root, promises, limit, inputValue);\n            });\n            return promises;\n        },\n        config\n    );\n\n    pagedContentPromise.then((html, js) => {\n        registerPagedEventHandlers(root, namespace);\n        return Templates.replaceNodeContents(root.find(SELECTORS.courseView.region), html, js);\n    }).catch(Notification.exception);\n};\n\n/**\n * Listen to, and handle events for the myoverview block.\n *\n * @param {Object} root The myoverview block container element.\n * @param {HTMLElement} page The whole HTMLElement for our block.\n */\nconst registerEventListeners = (root, page) => {\n\n    CustomEvents.define(root, [\n        CustomEvents.events.activate\n    ]);\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        addToFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        removeFromFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, (e, data) => {\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n        const courseId = getCourseId(target);\n        hideCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n        const courseId = getCourseId(target);\n        showCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    // Searching functionality event handlers.\n    const input = page.querySelector(SELECTORS.region.searchInput);\n    const clearIcon = page.querySelector(SELECTORS.region.clearIcon);\n\n    clearIcon.addEventListener('click', () => {\n        input.value = '';\n        input.focus();\n        clearSearch(clearIcon, root);\n    });\n\n    input.addEventListener('input', debounce(() => {\n        if (input.value === '') {\n            clearSearch(clearIcon, root);\n        } else {\n            activeSearch(clearIcon);\n            initializePagedContent(root, searchFunctionalityCurry(), input.value.trim());\n        }\n    }, 1000));\n};\n\n/**\n * Reset the search icon and trigger the init for the block.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n * @param {Object} root The myoverview block container element.\n */\nexport const clearSearch = (clearIcon, root) => {\n    clearIcon.classList.add('d-none');\n    init(root);\n};\n\n/**\n * Change the searching icon to its' active state.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n */\nconst activeSearch = (clearIcon) => {\n    clearIcon.classList.remove('d-none');\n};\n\n/**\n * Intialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n */\nexport const init = root => {\n    root = $(root);\n    loadedPages = [];\n    lastPage = 0;\n    courseOffset = 0;\n\n    if (!root.attr('data-init')) {\n        const page = document.querySelector(SELECTORS.region.selectBlock);\n        registerEventListeners(root, page);\n        namespace = \"block_myoverview_\" + root.attr('id') + \"_\" + Math.random();\n        root.attr('data-init', true);\n    }\n\n    initializePagedContent(root, standardFunctionalityCurry());\n};\n\n/**\n * Reset the courses views to their original\n * state on first page load.courseOffset\n *\n * This is called when configuration has changed for the event lists\n * to cause them to reload their data.\n *\n * @param {Object} root The root element for the timeline view.\n */\nexport const reset = root => {\n    if (loadedPages.length > 0) {\n        loadedPages.forEach((courseList, index) => {\n            let pagedContentPage = getPagedContentContainer(root, index);\n            renderCourses(root, courseList).then((html, js) => {\n                return Templates.replaceNodeContents(pagedContentPage, html, js);\n            }).catch(Notification.exception);\n        });\n    } else {\n        init(root);\n    }\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","String","Number","_toPrimitive","_toPropertyKey","configurable","writable","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","iterator","from","_iterableToArray","o","minLen","n","toString","slice","constructor","name","test","_unsupportedIterableToArray","_nonIterableSpread","len","arr2","_jquery","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","_selectors","PagedContentEvents","Aria","TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","getFilterValues","root","courseRegion","find","SELECTORS","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","courseId","FAVOURITE_ICON","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","publish","favourited","removeClass","addClass","iconContainer","isFavouriteIcon","ICON_IS_FAVOURITE","unhide","notFavourteIcon","ICON_NOT_FAVOURITE","hide","showFavouriteIcon","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","updateUserPreferences","preferences","type","hideElement","id","pagingBar","jumpto","parseInt","reducedCourse","courses","reduce","accumulator","current","newElement","courseList","popElement","concat","pagedContentContainer","resetLastPageNumber","$","pagedContentPage","renderCourses","html","js","replaceNodeContents","remove","setFavouriteCourses","favourite","result","warnings","course","isfavourite","noCoursesRender","nocoursesimg","newcourseurl","render","coursesData","filters","currentTemplate","values","map","showcoursecategory","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","limit","setLimit","itemsPerPageFunc","pagingLimit","itemsPerPage","active","totalCourseCount","pagingOption","pageBuilder","currentPage","pageData","actions","activeSearch","nextPageStart","pageCourses","currentPageLength","remainingCourses","allItemsLoaded","nextoffset","resetGlobals","standardFunctionalityCurry","promises","pagePromise","getEnrolledCoursesByTimeline","offset","classification","getMyCourses","searchFunctionalityCurry","inputValue","searchingPromise","searchValue","searchvalue","getSearchMyCourses","initializePagedContent","promiseFunction","config","eventNamespace","pagedContentPromise","createWithLimit","pagesData","pageNumber","registerEventListeners","page","define","events","activate","on","ACTION_ADD_FAVOURITE","e","data","closest","originalEvent","preventDefault","ACTION_REMOVE_FAVOURITE","ACTION_HIDE_COURSE","hideAction","showAction","hideCourse","ACTION_SHOW_COURSE","showCourse","querySelector","searchInput","clearIcon","addEventListener","focus","clearSearch","debounce","trim","classList","add","init","_exports","document","selectBlock","Math","random","reset"],"mappings":"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"}