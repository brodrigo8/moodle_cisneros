{"version":3,"file":"dynamic.min.js","sources":["../src/dynamic.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features.\n *\n * @module     core_table/dynamic\n * @copyright  2020 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport Events from './local/dynamic/events';\nimport Pending from 'core/pending';\nimport {addIconToContainer} from 'core/loadingicon';\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\nimport Notification from 'core/notification';\n\nlet watching = false;\n\n/**\n * Ensure that a table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Bool}\n */\nconst checkTableIsDynamic = tableRoot => {\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    if (!tableRoot.matches(Selectors.main.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return true;\n};\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @param {Bool} resetContent\n * @returns {Promise}\n */\nexport const refreshTableContent = (tableRoot, resetContent = false) => {\n    const filterset = getFiltersetFromTable(tableRoot);\n    addIconToContainer(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\n\n    return fetchTableData(\n        tableRoot.dataset.tableComponent,\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n            firstinitial: tableRoot.dataset.tableFirstInitial,\n            lastinitial: tableRoot.dataset.tableLastInitial,\n            pageNumber: tableRoot.dataset.tablePageNumber,\n            pageSize: tableRoot.dataset.tablePageSize,\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\n        },\n        resetContent,\n    )\n    .then(data => {\n        const placeholder = document.createElement('div');\n        placeholder.innerHTML = data.html;\n        tableRoot.replaceWith(...placeholder.childNodes);\n\n        // Update the tableRoot.\n        return getTableFromId(tableRoot.dataset.tableUniqueid);\n    }).then(tableRoot => {\n        tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\n            bubbles: true,\n        }));\n\n        return tableRoot;\n    })\n    .then(tableRoot => {\n        pendingPromise.resolve();\n\n        return tableRoot;\n    });\n};\n\nexport const updateTable = (tableRoot, {\n    sortBy = null,\n    sortOrder = null,\n    filters = null,\n    firstInitial = null,\n    lastInitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = null,\n} = {}, refreshContent = true) => {\n    checkTableIsDynamic(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\n    let tableConfigChanged = false;\n\n    // Update sort fields.\n    if (sortBy && sortOrder) {\n        // Always update the table if requested and there were sort fields.\n        // These fields are only ever normalised in the backend.\n        tableConfigChanged = true;\n\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\n        sortData.unshift({\n            sortby: sortBy,\n            sortorder: parseInt(sortOrder, 10),\n        });\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\n    }\n\n    // Update initials.\n    if (firstInitial !== null) {\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFirstInitial = firstInitial;\n    }\n\n    if (lastInitial !== null) {\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableLastInitial = lastInitial;\n    }\n\n    if (pageSize !== null) {\n        if (tableRoot.dataset.tablePageSize != pageSize) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageSize = pageSize;\n    }\n\n    // Update filters.\n    if (filters) {\n        const filterJson = JSON.stringify(filters);\n\n        if (tableRoot.dataset.tableFilters !== filterJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFilters = filterJson;\n    }\n\n    // Reset to page 1 when table content is being altered by filtering or sorting.\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\n    if (tableConfigChanged) {\n        pageNumber = 1;\n    }\n\n    // Update hidden columns.\n    if (hiddenColumns) {\n        const columnJson = JSON.stringify(hiddenColumns);\n\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableHiddenColumns = columnJson;\n    }\n\n    if (pageNumber !== null) {\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageNumber = pageNumber;\n    }\n\n    // Refresh.\n    if (refreshContent && tableConfigChanged) {\n        return refreshTableContent(tableRoot)\n        .then(tableRoot => {\n            pendingPromise.resolve();\n            return tableRoot;\n        });\n    } else {\n        pendingPromise.resolve();\n        return Promise.resolve(tableRoot);\n    }\n};\n\n/**\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {DOMStringMap}\n */\nconst getTableData = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return tableRoot.dataset;\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\n    updateTable(tableRoot, {filters}, refreshContent);\n\n/**\n * Get the filter data for the specified table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nexport const getFilters = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return getFiltersetFromTable(tableRoot);\n};\n\n/**\n * Update the sort order.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} sortBy\n * @param {Number} sortOrder\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\n\n/**\n * Set the page number.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} pageNumber\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\n    updateTable(tableRoot, {pageNumber}, refreshContent);\n\n/**\n * Get the current page number.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\n\n/**\n * Set the page size.\n *\n * @param {HTMLElement} tableRoot\n * @param {Number} pageSize\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\n\n/**\n * Get the current page size.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\n\n/**\n * Update the first initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} firstInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\n    updateTable(tableRoot, {firstInitial}, refreshContent);\n\n/**\n * Get the current first initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\n\n/**\n * Update the last initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} lastInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\n    updateTable(tableRoot, {lastInitial}, refreshContent);\n\n/**\n * Get the current last initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\n\n/**\n * Hide a column in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToHide\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns.push(columnToHide);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Make a hidden column visible in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToShow\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Reset table preferences.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    if (watching) {\n        // Already watching.\n        return;\n    }\n    watching = true;\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.main.region);\n\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\n        if (sortableLink) {\n            e.preventDefault();\n\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\n            .catch(Notification.exception);\n        }\n\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\n        if (firstInitialLink !== null) {\n            e.preventDefault();\n\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\n        if (lastInitialLink !== null) {\n            e.preventDefault();\n\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\n        if (pageItem) {\n            e.preventDefault();\n\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\n        }\n\n        const hide = e.target.closest(Selectors.table.links.hide);\n        if (hide) {\n            e.preventDefault();\n\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\n        }\n\n        const show = e.target.closest(Selectors.table.links.show);\n        if (show) {\n            e.preventDefault();\n\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\n        }\n\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\n        if (resetTablePreferencesLink) {\n            e.preventDefault();\n\n            resetTablePreferences(tableRoot).catch(Notification.exception);\n        }\n\n        const showCountLink = e.target.closest(Selectors.showCount.links.toggle);\n        if (showCountLink) {\n            e.preventDefault();\n\n            setPageSize(tableRoot, showCountLink.dataset.targetPageSize).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Fetch the table via its table region id.\n *\n * @param {String} tableRegionId\n * @returns {HTMLElement}\n */\nexport const getTableFromId = tableRegionId => {\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\n\n\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return tableRoot;\n};\n\nexport {\n    Events\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","Symbol","iterator","from","_iterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","length","i","arr2","Selectors","_typeof","cache","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","_interopRequireWildcard","_events","_pending","_notification","watching","checkTableIsDynamic","tableRoot","Error","matches","main","region","getFiltersetFromTable","JSON","parse","dataset","tableFilters","refreshTableContent","resetContent","filterset","addIconToContainer","pendingPromise","Pending","fetchTableData","tableComponent","tableHandler","tableUniqueid","sortData","tableSortData","joinType","jointype","filters","firstinitial","tableFirstInitial","lastinitial","tableLastInitial","pageNumber","tablePageNumber","pageSize","tablePageSize","hiddenColumns","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","_exports","updateTable","_ref","arguments","undefined","_ref$sortBy","sortBy","_ref$sortOrder","sortOrder","_ref$filters","_ref$firstInitial","firstInitial","_ref$lastInitial","lastInitial","_ref$pageNumber","_ref$pageSize","_ref$hiddenColumns","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setFilters","getFilters","setSortOrder","setPageNumber","getPageNumber","setPageSize","getPageSize","setFirstInitial","getFirstInitial","setLastInitial","getLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","init","addEventListener","e","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferences","showCountLink","showCount","toggle","targetPageSize","tableRegionId","querySelector","fromRegionId"],"mappings":"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"}