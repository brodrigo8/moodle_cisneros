{"version":3,"file":"datafilter.min.js","sources":["../src/datafilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Data filter management.\n *\n * @module     core/datafilter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from 'core/datafilter/filtertypes/courseid';\nimport GenericFilter from 'core/datafilter/filtertype';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\nexport default class {\n\n    /**\n     * Initialise the filter on the element with the given filterSet and callback.\n     *\n     * @param {HTMLElement} filterSet The filter element.\n     * @param {Function} applyCallback Callback function when updateTableFromFilter\n     */\n    constructor(filterSet, applyCallback) {\n\n        this.filterSet = filterSet;\n        this.applyCallback = applyCallback;\n        // Keep a reference to all of the active filters.\n        this.activeFilters = {\n            courseid: new CourseFilter('courseid', filterSet),\n        };\n    }\n\n    /**\n     * Initialise event listeners to the filter.\n     */\n    init() {\n        // Add listeners for the main actions.\n        this.filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filterset.actions.addRow)) {\n                e.preventDefault();\n\n                this.addFilterRow();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n                e.preventDefault();\n\n                this.updateTableFromFilter();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n                e.preventDefault();\n\n                this.removeAllFilters();\n            }\n        });\n\n        // Add the listener to remove a single filter.\n        this.filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filter.actions.remove)) {\n                e.preventDefault();\n\n                this.removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n            }\n        });\n\n        // Add listeners for the filter type selection.\n        let filterRegion = jQuery(this.getFilterRegion());\n        CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n        filterRegion.on(CustomEvents.events.accessibleChange, e => {\n            const typeField = e.target.closest(Selectors.filter.fields.type);\n            if (typeField && typeField.value) {\n                const filter = e.target.closest(Selectors.filter.region);\n\n                this.addFilter(filter, typeField.value);\n            }\n        });\n\n        this.filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n            this.filterSet.dataset.filterverb = e.target.value;\n        });\n    }\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    getFilterRegion() {\n        return this.filterSet.querySelector(Selectors.filterset.regions.filterlist);\n    }\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    addFilterRow() {\n        const pendingPromise = new Pending('core/datafilter:addFilterRow');\n        const rownum = 1 + this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rownum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.appendNodeContents(this.getFilterRegion(), html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(result => {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    getFilterDataSource(filterType) {\n        const filterDataNode = this.filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    }\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    async addFilter(filterRow, filterType, initialFilterValues) {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = this.getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        this.activeFilters[filterType] = new Filter(filterType, this.filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        return this.activeFilters[filterType];\n    }\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    getFilterObject(name) {\n        return this.activeFilters[name];\n    }\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    removeOrReplaceFilterRow(filterRow, refreshContent) {\n        const filterCount = this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        if (filterCount === 1) {\n            this.replaceFilterRow(filterRow, refreshContent);\n        } else {\n            this.removeFilterRow(filterRow, refreshContent);\n        }\n    }\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    async removeFilterRow(filterRow, refreshContent = true) {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        this.removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            this.updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await this.getAvailableFilterLegends();\n\n        this.getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    }\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    replaceFilterRow(filterRow, refreshContent = true, rowNum = 1) {\n        // Remove the filter object.\n        this.removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rowNum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                // Refresh the table.\n                if (refreshContent) {\n                    return this.updateTableFromFilter();\n                } else {\n                    return filterRow;\n                }\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    removeFilterObject(filterName) {\n        if (filterName) {\n            const filter = this.getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete this.activeFilters[filterName];\n            }\n        }\n    }\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    removeAllFilters() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => this.removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return this.updateTableFromFilter();\n    }\n\n    /**\n     * Remove any empty filters.\n     */\n    removeEmptyFilters() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                this.removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    }\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    updateFiltersOptions() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (this.activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = this.filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = this.filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            this.filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            this.filterSet.dataset.filterverb = 2;\n        } else {\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     */\n    updateTableFromFilter() {\n        const pendingPromise = new Pending('core/datafilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(this.activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        if (this.applyCallback) {\n            this.applyCallback(filters, pendingPromise);\n        }\n    }\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    async getAvailableFilterLegends() {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n            .then(fetchedStrings => {\n                return fetchedStrings;\n            })\n            .catch(Notification.exception);\n\n        return legendStrings;\n    }\n\n}\n"],"names":["_courseid","_interopRequireDefault","_filtertype","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","_systemImportTransformerGlobalIdentifier","window","self","global","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","o","minLen","n","Object","toString","call","slice","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","length","i","arr2","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","key","desc","value","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_default","filterSet","applyCallback","instance","Constructor","_classCallCheck","activeFilters","courseid","CourseFilter","protoProps","staticProps","_getAvailableFilterLegends","_removeFilterRow","_addFilter","_this","querySelector","Selectors","filterset","region","addEventListener","e","closest","actions","addRow","preventDefault","addFilterRow","applyFilters","updateTableFromFilter","resetFilters","removeAllFilters","regions","filterlist","filter","remove","removeOrReplaceFilterRow","filterRegion","jQuery","getFilterRegion","CustomEvents","events","accessibleChange","on","typeField","fields","addFilter","join","dataset","filterverb","_this2","pendingPromise","Pending","rownum","querySelectorAll","Templates","renderForPromise","rownumber","_ref","html","js","appendNodeContents","filterRow","typeList","data","contentNode","contentTypeList","innerHTML","updateFiltersOptions","Notification","filterType","datasource","byName","initialFilterValues","filterDataNode","Filter","_context","getFilterDataSource","GenericFilter","filterTypeClass","amd","require","disabled","_callee","_x","_x2","_x3","refreshContent","replaceFilterRow","removeFilterRow","hasFilterValue","filterLegends","_args2","_context2","removeFilterObject","getAvailableFilterLegends","index","innerText","_callee2","_x4","_this3","rowNum","_ref2","replaceNode","filterName","getFilterObject","tearDown","_this4","_this5","_this6","filters","option","classList","add","addRowButton","all","setAttribute","removeAttribute","filtermatch","filterValue","_callee3","maxFilters","requests","legendStrings","_context3","document","typeListSelect","_","rowIndex","component","param","getStrings","get_strings","fetchedStrings","_exports"],"mappings":"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"}