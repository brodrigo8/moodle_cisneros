{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Execute a basic section state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} sectionIds the section ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _sectionBasicAction(stateManager, action, sectionIds, targetSectionId, targetCmId) {\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            sectionIds,\n            targetSectionId,\n            targetCmId\n        );\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Execute a basic course module state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} cmIds the cm ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _cmBasicAction(stateManager, action, cmIds, targetSectionId, targetCmId) {\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            cmIds,\n            targetSectionId,\n            targetCmId\n        );\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmIds, false);\n    }\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is comming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Hides sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionHide(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_hide', sectionIds);\n    }\n\n    /**\n     * Show sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionShow(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_show', sectionIds);\n    }\n\n    /**\n     * Show cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmShow(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_show', cmIds);\n    }\n\n    /**\n     * Hide cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmHide(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_hide', cmIds);\n    }\n\n    /**\n     * Stealth cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmStealth(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_stealth', cmIds);\n    }\n\n    /**\n     * Duplicate course modules\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {number|undefined} targetSectionId the optional target sectionId\n     * @param {number|undefined} targetCmId the target course module id\n     */\n    async cmDuplicate(stateManager, cmIds, targetSectionId, targetCmId) {\n        const course = stateManager.get('course');\n        // Lock all target sections.\n        const sectionIds = new Set();\n        if (targetSectionId) {\n            sectionIds.add(targetSectionId);\n        } else {\n            cmIds.forEach((cmId) => {\n                const cm = stateManager.get('cm', cmId);\n                sectionIds.add(cm.sectionid);\n            });\n        }\n        this.sectionLock(stateManager, Array.from(sectionIds), true);\n\n        const updates = await this._callEditWebservice('cm_duplicate', course.id, cmIds, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n\n        this.sectionLock(stateManager, Array.from(sectionIds), false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of section ids\n     */\n    async cmDelete(stateManager, cmIds) {\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice('cm_delete', course.id, cmIds);\n        this.cmLock(stateManager, cmIds, false);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Update the course index collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionIndexCollapsed(stateManager, sectionIds, collapsed) {\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'indexcollapsed', sectionIds, collapsed);\n        const course = stateManager.get('course');\n        await this._callEditWebservice('section_index_collapsed', course.id, collapsedIds);\n    }\n\n    /**\n     * Update the course content collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionContentCollapsed(stateManager, sectionIds, collapsed) {\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'contentcollapsed', sectionIds, collapsed);\n        const course = stateManager.get('course');\n        await this._callEditWebservice('section_content_collapsed', course.id, collapsedIds);\n    }\n\n    /**\n     * Private batch update for a section preference attribute.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} preferenceName the preference name\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} preferenceValue the new preferenceValue value\n     * @return {array} the list of all sections with that preference set to true\n     */\n    _updateStateSectionPreference(stateManager, preferenceName, sectionIds, preferenceValue) {\n        stateManager.setReadOnly(false);\n        const affectedSections = new Set();\n        // Check if we need to update preferences.\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return;\n            }\n            const newValue = preferenceValue ?? section[preferenceName];\n            if (section[preferenceName] != newValue) {\n                section[preferenceName] = newValue;\n                affectedSections.add(section.id);\n            }\n        });\n        stateManager.setReadOnly(true);\n        if (affectedSections.size == 0) {\n            return [];\n        }\n        // Get all collapsed section ids.\n        const collapsedSectionIds = [];\n        const state = stateManager.state;\n        state.section.forEach(section => {\n            if (section[preferenceName]) {\n                collapsedSectionIds.push(section.id);\n            }\n        });\n        return collapsedSectionIds;\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"names":["obj","_typeof","Symbol","iterator","constructor","prototype","_regeneratorRuntime","exports","Op","Object","hasOwn","hasOwnProperty","defineProperty","key","desc","value","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_ajax","__esModule","default","_default","instance","Constructor","_classCallCheck","protoProps","staticProps","_courseState","_sectionState","_cmState","_sectionContentCollapsed","_sectionIndexCollapsed","_cmDelete","_sectionDelete","_addSection","_sectionMove","_cmMove","_cmDuplicate","_cmStealth","_cmHide","_cmShow","_sectionShow","_sectionHide","_cmBasicAction2","_sectionBasicAction2","_callEditWebservice2","_callee","action","courseId","ids","targetSectionId","targetCmId","ajaxresult","_context","courseid","targetsectionid","targetcmid","ajax","methodname","JSON","parse","_x","_x2","_x3","_x4","_x5","_callee2","stateManager","sectionIds","course","updates","_context2","get","sectionLock","_callEditWebservice","id","processUpdates","_x6","_x7","_x8","_x9","_x10","_callee3","cmIds","_context3","cmLock","_x11","_x12","_x13","_x14","_x15","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","_callee4","_context4","_sectionBasicAction","_x16","_x17","_callee5","_context5","_x18","_x19","_callee6","_context6","_cmBasicAction","_x20","_x21","_callee7","_context7","_x22","_x23","_callee8","_context8","_x24","_x25","_context9","Set","add","cmId","cm","sectionid","Array","from","_callee9","_x26","_x27","_x28","_x29","cmids","_context10","_callee10","_x30","_x31","_x32","_x33","_context11","_callee11","_x34","_x35","_x36","_callee12","_context12","_x37","_x38","_callee13","_context13","_x39","_x40","_callee14","_context14","_x41","_x42","dragValue","setPageItem","_setElementsValue","newValue","lockValue","fieldName","setReadOnly","element","isStatic","newPageItem","pageItem","sectionId","section","collapsed","collapsedIds","_context15","_updateStateSectionPreference","_callee15","_x43","_x44","_x45","_context16","_callee16","_x46","_x47","_x48","preferenceName","preferenceValue","affectedSections","size","collapsedSectionIds","_callee17","_context17","_x49","_x50","_callee18","_context18","_x51","_x52","_context19","_callee19","_x53","_exports"],"mappings":"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"}