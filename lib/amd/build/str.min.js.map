{"version":3,"file":"str.min.js","sources":["../src/str.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Fetch and return language strings.\n *\n * @module     core/str\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n *\n */\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport LocalStorage from 'core/localstorage';\n\n// Module cache for the promises so that we don't make multiple\n// unnecessary requests.\nlet promiseCache = [];\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * Return a Promise that resolves to a string.\n *\n * If the string has previously been cached, then the Promise will be resolved immediately, otherwise it will be fetched\n * from the server and resolved when available.\n *\n * @method get_string\n * @param {string} key The language string key\n * @param {string} component The language string component\n * @param {string} param The param for variable expansion in the string.\n * @param {string} lang The users language - if not passed it is deduced.\n * @return {Promise}\n *\n * @example <caption>Fetching a string</caption>\n *\n * import {get_string as getString} from 'core/str';\n * get_string('cannotfindteacher', 'error')\n * .then(str => {\n *     window.console.log(str); // Cannot find teacher\n * })\n * .catch();\n */\n// eslint-disable-next-line camelcase\nexport const get_string = (key, component, param, lang) => {\n    return get_strings([{key, component, param, lang}])\n        .then(results => results[0]);\n};\n\n/**\n * Make a batch request to load a set of strings.\n *\n * Any missing string will be fetched from the server.\n * The Promise will only be resolved once all strings are available, or an attempt has been made to fetch them.\n *\n * @method get_strings\n * @param {Object[]} requests List of strings to fetch\n * @param {string} requests.key The string identifer to fetch\n * @param {string} [requests.component='core'] The componet to fetch from\n * @param {string} [requests.lang] The language to fetch a string for. Defaults to current page language.\n * @param {object|string} [requests.param] The param for variable expansion in the string.\n * @return {Promise[]}\n *\n * @example <caption>Fetching a set of strings</caption>\n *\n * import {get_strings as getStrings} from 'core/str';\n * get_strings([\n *     {\n *         key: 'cannotfindteacher',\n *         component: 'error',\n *     },\n *     {\n *         key: 'yes',\n *         component: 'core',\n *     },\n *     {\n *         key: 'no',\n *         component: 'core',\n *     },\n * ])\n * .then((cannotFindTeacher, yes, no) => {\n *     window.console.log(cannotFindTeacher); // Cannot find teacher\n *     window.console.log(yes); // Yes\n *     window.console.log(no); // No\n * })\n * .catch();\n */\n// eslint-disable-next-line camelcase\nexport const get_strings = (requests) => {\n    let requestData = [];\n    const pageLang = $('html').attr('lang').replace(/-/g, '_');\n    // Helper function to construct the cache key.\n    const getCacheKey = ({key, component, lang = pageLang}) => {\n        if (!component) {\n            component = 'core';\n        }\n        return `core_str/${key}/${component}/${lang}`;\n    };\n\n    const stringPromises = requests.map((request) => {\n        const cacheKey = getCacheKey(request);\n        const {component, key, param, lang = pageLang} = request;\n        // Helper function to add the promise to cache.\n        const buildReturn = (promise) => {\n            // Make sure the promise cache contains our promise.\n            promiseCache[cacheKey] = promise;\n            return promise;\n        };\n\n        // Check if we can serve the string straight from M.str.\n        if (component in M.str && key in M.str[component]) {\n            return buildReturn(new Promise((resolve) => {\n                resolve(M.util.get_string(key, component, param, lang));\n            }));\n        }\n\n        // Check if the string is in the browser's local storage.\n        const cached = LocalStorage.get(cacheKey);\n        if (cached) {\n            M.str[component] = {...M.str[component], [key]: cached};\n            return buildReturn(new Promise((resolve) => {\n                resolve(M.util.get_string(key, component, param, lang));\n            }));\n        }\n\n        // Check if we've already loaded this string from the server.\n        if (cacheKey in promiseCache) {\n            return buildReturn(promiseCache[cacheKey]).then(() => {\n                return M.util.get_string(key, component, param, lang);\n            });\n        } else {\n            // We're going to have to ask the server for the string so\n            // add this string to the list of requests to be sent.\n            return buildReturn(new Promise((resolve, reject) => {\n                requestData.push({\n                    methodname: 'core_get_string',\n                    args: {\n                        stringid: key,\n                        stringparams: [],\n                        component,\n                        lang,\n                    },\n                    done: (str) => {\n                        // When we get the response from the server\n                        // we should update M.str and the browser's\n                        // local storage before resolving this promise.\n                        M.str[component] = {...M.str[component], [key]: str};\n                        LocalStorage.set(cacheKey, str);\n                        resolve(M.util.get_string(key, component, param, lang));\n                    },\n                    fail: reject\n                });\n            }));\n        }\n    });\n\n    if (requestData.length) {\n        // If we need to load any strings from the server then send\n        // off the request.\n        Ajax.call(requestData, true, false, false, 0, M.cfg.langrev);\n    }\n\n    // We need to use jQuery here because some calling code uses the\n    // .done handler instead of the .then handler.\n    return $.when.apply($, stringPromises)\n        .then((...strings) => strings);\n};\n\n/**\n * Add a list of strings to the caches.\n *\n * This function should typically only be called from core APIs to pre-cache values.\n *\n * @method cache_strings\n * @protected\n * @param {Object[]} strings List of strings to fetch\n * @param {string} strings.key The string identifer to fetch\n * @param {string} strings.value The string value\n * @param {string} [strings.component='core'] The componet to fetch from\n * @param {string} [strings.lang] The language to fetch a string for. Defaults to current page language.\n */\n// eslint-disable-next-line camelcase\nexport const cache_strings = (strings) => {\n    const defaultLang = $('html').attr('lang').replace(/-/g, '_');\n\n    strings.forEach(({key, component, value, lang = defaultLang}) => {\n        const cacheKey = ['core_str', key, component, lang].join('/');\n\n        // Check M.str caching.\n        if (!(component in M.str) || !(key in M.str[component])) {\n            if (!(component in M.str)) {\n                M.str[component] = {};\n            }\n\n            M.str[component][key] = value;\n        }\n\n        // Check local storage.\n        if (!LocalStorage.get(cacheKey)) {\n            LocalStorage.set(cacheKey, value);\n        }\n\n        // Check the promises cache.\n        if (!(cacheKey in promiseCache)) {\n            promiseCache[cacheKey] = $.Deferred().resolve(value).promise();\n        }\n    });\n};\n/* eslint-enable no-restricted-properties */\n"],"names":["_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","arg","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","configurable","writable","_jquery","_ajax","_localstorage","promiseCache","_exports","get_string","component","param","lang","get_strings","then","results","requests","requestData","pageLang","$","attr","replace","stringPromises","map","request","cacheKey","_ref","_ref$lang","concat","getCacheKey","_request$lang","buildReturn","promise","M","str","Promise","resolve","util","cached","LocalStorage","get","reject","methodname","args","stringid","stringparams","done","set","fail","Ajax","cfg","langrev","when","_len","strings","Array","_key","cache_strings","defaultLang","_ref2","_ref2$lang","join","Deferred"],"mappings":"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"}