{"version":3,"file":"exporter.min.js","sources":["../../../src/local/courseeditor/exporter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to export parts of the state and transform them to be used in templates\n * and as draggable data.\n *\n * @module     core_courseformat/local/courseeditor/exporter\n * @class      core_courseformat/local/courseeditor/exporter\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    /**\n     * Class constructor.\n     *\n     * @param {CourseEditor} reactive the course editor object\n     */\n    constructor(reactive) {\n        this.reactive = reactive;\n\n        // Completions states are defined in lib/completionlib.php. There are 4 different completion\n        // state values, however, the course index uses the same state for complete and complete_pass.\n        // This is the reason why completed appears twice in the array.\n        this.COMPLETIONS = ['incomplete', 'complete', 'complete', 'fail'];\n    }\n\n    /**\n     * Generate the course export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @returns {Object}\n     */\n    course(state) {\n        // Collect section information from the state.\n        const data = {\n            sections: [],\n            editmode: this.reactive.isEditing,\n            highlighted: state.course.highlighted ?? '',\n        };\n        const sectionlist = state.course.sectionlist ?? [];\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid) ?? {};\n            const section = this.section(state, sectioninfo);\n            data.sections.push(section);\n        });\n        data.hassections = (data.sections.length != 0);\n\n        return data;\n    }\n\n    /**\n     * Generate a section export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} sectioninfo the section state data.\n     * @returns {Object}\n     */\n    section(state, sectioninfo) {\n        const section = {\n            ...sectioninfo,\n            highlighted: state.course.highlighted ?? '',\n            cms: [],\n        };\n        const cmlist = sectioninfo.cmlist ?? [];\n        cmlist.forEach(cmid => {\n            const cminfo = state.cm.get(cmid);\n            const cm = this.cm(state, cminfo);\n            section.cms.push(cm);\n        });\n        section.hascms = (section.cms.length != 0);\n\n        return section;\n    }\n\n    /**\n     * Generate a cm export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} cminfo the course module state data.\n     * @returns {Object}\n     */\n    cm(state, cminfo) {\n        const cm = {\n            ...cminfo,\n            isactive: false,\n        };\n        return cm;\n    }\n\n    /**\n     * Generate a dragable cm data structure.\n     *\n     * This method is used by any draggable course module element to generate drop data\n     * for its reactive/dragdrop instance.\n     *\n     * @param {*} state the state object\n     * @param {*} cmid the cours emodule id\n     * @returns {Object|null}\n     */\n    cmDraggableData(state, cmid) {\n        const cminfo = state.cm.get(cmid);\n        if (!cminfo) {\n            return null;\n        }\n\n        // Drop an activity over the next activity is the same as doing anything.\n        let nextcmid;\n        const section = state.section.get(cminfo.sectionid);\n        const currentindex = section?.cmlist.indexOf(cminfo.id);\n        if (currentindex !== undefined) {\n            nextcmid = section?.cmlist[currentindex + 1];\n        }\n\n        return {\n            type: 'cm',\n            id: cminfo.id,\n            name: cminfo.name,\n            sectionid: cminfo.sectionid,\n            nextcmid,\n        };\n    }\n\n    /**\n     * Generate a dragable cm data structure.\n     *\n     * This method is used by any draggable section element to generate drop data\n     * for its reactive/dragdrop instance.\n     *\n     * @param {*} state the state object\n     * @param {*} sectionid the cours section id\n     * @returns {Object|null}\n     */\n    sectionDraggableData(state, sectionid) {\n        const sectioninfo = state.section.get(sectionid);\n        if (!sectioninfo) {\n            return null;\n        }\n        return {\n            type: 'section',\n            id: sectioninfo.id,\n            name: sectioninfo.name,\n            number: sectioninfo.number,\n        };\n    }\n\n    /**\n     * Generate a compoetion export data from the cm element.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} cminfo the course module state data.\n     * @returns {Object}\n     */\n    cmCompletion(state, cminfo) {\n        const data = {\n            statename: '',\n            state: 'NaN',\n        };\n        if (cminfo.completionstate !== undefined) {\n            data.state = cminfo.completionstate;\n            data.hasstate = true;\n            const statename = this.COMPLETIONS[cminfo.completionstate] ?? 'NaN';\n            data[`is${statename}`] = true;\n        }\n        return data;\n    }\n\n    /**\n     * Return a sorted list of all sections and cms items in the state.\n     *\n     * @param {Object} state the current state.\n     * @returns {Array} all sections and cms items in the state.\n     */\n    allItemsArray(state) {\n        const items = [];\n        const sectionlist = state.course.sectionlist ?? [];\n        // Add sections.\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid);\n            items.push({type: 'section', id: sectioninfo.id, url: sectioninfo.sectionurl});\n            // Add cms.\n            const cmlist = sectioninfo.cmlist ?? [];\n            cmlist.forEach(cmid => {\n                const cminfo = state.cm.get(cmid);\n                items.push({type: 'cm', id: cminfo.id, url: cminfo.url});\n            });\n        });\n        return items;\n    }\n}\n"],"names":["_default","reactive","_classCallCheck","this","COMPLETIONS","key","value","state","_state$course$highlig","_state$course$section","_this","data","sections","editmode","isEditing","highlighted","course","sectionlist","forEach","sectionid","_state$section$get","sectioninfo","section","get","push","hassections","length","_state$course$highlig2","_sectioninfo$cmlist","_this2","cms","cmlist","cmid","cminfo","cm","hascms","isactive","nextcmid","currentindex","indexOf","id","undefined","type","name","number","statename","completionstate","_this$COMPLETIONS$cmi","hasstate","_state$course$section2","items","_sectioninfo$cmlist2","url","sectionurl","_exports","default"],"mappings":"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"}