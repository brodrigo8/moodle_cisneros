{"version":3,"file":"group.min.js","sources":["../../../src/comboboxsearch/searchtype/group.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for groups within the grade area.\n *\n * @module    core/comboboxsearch/searchtype/group\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport TertiarySearchClass from 'core/comboboxsearch/search_combobox';\nimport * as Repository from 'core_grades/searchwidget/repository';\nimport {renderForPromise, replaceNodeContents} from 'core/templates';\nimport {debounce} from 'core/utils';\n\n// Define our standard lookups.\nconst selectors = {\n    component: '.group-search',\n    courseid: '[data-region=\"courseid\"]',\n    placeholder: '.groupsearchdropdown [data-region=\"searchplaceholder\"]',\n};\nconst component = document.querySelector(selectors.component);\nconst bannedFilterFields = ['id', 'link', 'groupimageurl'];\n\nexport default class GroupSearch extends TertiarySearchClass {\n\n    courseID = component.querySelector(selectors.courseid).dataset.courseid;\n\n    constructor() {\n        super();\n        this.renderDefault();\n    }\n\n    static init() {\n        return new GroupSearch();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setComponentSelector() {\n        return '.group-search';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    setDropdownSelector() {\n        return '.groupsearchdropdown';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setTriggerSelector() {\n        return '.groupsearchwidget';\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('core_grades/local/group/resultset', {\n            groups: this.getMatchedResults(),\n            hasresults: this.getMatchedResults().length > 0,\n            searchterm: this.getSearchTerm(),\n        });\n        replaceNodeContents(selectors.placeholder, html, js);\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n        this.filterMatchDataset();\n\n        await this.renderDropdown();\n\n        this.updateNodes();\n        this.registerInputEvents();\n\n        // Add a small BS listener so that we can set the focus correctly on open.\n        this.$component.on('shown.bs.dropdown', () => {\n            this.searchInput.focus({preventScroll: true});\n        });\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    async fetchDataset() {\n        return await Repository.groupFetch(this.courseID).then((r) => r.groups);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} The users that match the given criteria.\n     */\n    async filterDataset(filterableData) {\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return filterableData;\n        }\n        return filterableData.filter((group) => Object.keys(group).some((key) => {\n            if (group[key] === \"\" || bannedFilterFields.includes(key)) {\n                return false;\n            }\n            return group[key].toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        }));\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     */\n    filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((group) => {\n                return {\n                    id: group.id,\n                    name: group.name,\n                    link: this.selectOneLink(group.id),\n                    groupimageurl: group.groupimageurl,\n                };\n            })\n        );\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            // User has given something for us to filter against.\n            await this.filterrenderpipe();\n        }, 300));\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    async clickHandler(e) {\n        if (e.target.closest(this.selectors.dropdown)) {\n            // Forcibly prevent BS events so that we can control the open and close.\n            // Really needed because by default input elements cant trigger a dropdown.\n            e.stopImmediatePropagation();\n        }\n        this.clearSearchButton.addEventListener('click', async() => {\n            this.searchInput.value = '';\n            this.setSearchTerms(this.searchInput.value);\n            await this.filterrenderpipe();\n        });\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {KeyboardEvent} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        super.keyHandler(e);\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'Tab':\n                if (e.target.closest(this.selectors.input)) {\n                    e.preventDefault();\n                    this.clearSearchButton.focus({preventScroll: true});\n                }\n                break;\n            case 'Escape':\n                if (document.activeElement.getAttribute('role') === 'option') {\n                    e.stopPropagation();\n                    this.searchInput.focus({preventScroll: true});\n                } else if (e.target.closest(this.selectors.input)) {\n                    const trigger = this.component.querySelector(this.selectors.trigger);\n                    trigger.focus({preventScroll: true});\n                }\n                break;\n        }\n    }\n\n    /**\n     * Override the input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.getSearchTerm() === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n        }, 300));\n    }\n\n    /**\n     * Build up the view all link that is dedicated to a particular result.\n     *\n     * @param {Number} groupID The ID of the group selected.\n     */\n    selectOneLink(groupID) {\n        throw new Error(`selectOneLink(${groupID}) must be implemented in ${this.constructor.name}`);\n    }\n}\n"],"names":["selectors","component","document","querySelector","bannedFilterFields","GroupSearch","TertiarySearchClass","constructor","dataset","courseid","renderDefault","setComponentSelector","setDropdownSelector","setTriggerSelector","html","js","groups","this","getMatchedResults","hasresults","length","searchterm","getSearchTerm","setMatchedResults","filterDataset","getDataset","filterMatchDataset","renderDropdown","updateNodes","registerInputEvents","$component","on","searchInput","focus","preventScroll","Repository","groupFetch","courseID","then","r","filterableData","getPreppedSearchTerm","filter","group","Object","keys","some","key","includes","toString","toLowerCase","map","id","name","link","selectOneLink","groupimageurl","addEventListener","async","setSearchTerms","value","clearSearchButton","classList","add","remove","filterrenderpipe","e","target","closest","dropdown","stopImmediatePropagation","button","window","location","href","keyHandler","input","preventDefault","activeElement","getAttribute","stopPropagation","trigger","registerInputHandlers","groupID","Error"],"mappings":"q0CA4BMA,oBACS,gBADTA,mBAEQ,2BAFRA,sBAGW,yDAEXC,UAAYC,SAASC,cAAcH,qBACnCI,mBAAqB,CAAC,KAAM,OAAQ,uBAErBC,oBAAoBC,yBAIrCC,gLAFWN,UAAUE,cAAcH,oBAAoBQ,QAAQC,eAItDC,qCAIE,IAAIL,YAQfM,6BACW,gBAQXC,4BACW,uBAQXC,2BACW,kDAODC,KAACA,KAADC,GAAOA,UAAY,+BAAiB,oCAAqC,CAC3EC,OAAQC,KAAKC,oBACbC,WAAYF,KAAKC,oBAAoBE,OAAS,EAC9CC,WAAYJ,KAAKK,qDAEDtB,sBAAuBc,KAAMC,+BAO5CQ,wBAAwBN,KAAKO,oBAAoBP,KAAKQ,oBACtDC,2BAECT,KAAKU,sBAENC,mBACAC,2BAGAC,WAAWC,GAAG,qBAAqB,UAC/BC,YAAYC,MAAM,CAACC,eAAe,yCAU9BC,WAAWC,WAAWnB,KAAKoB,UAAUC,MAAMC,GAAMA,EAAEvB,6BAShDwB,sBAEoB,KAAhCvB,KAAKwB,uBACED,eAEJA,eAAeE,QAAQC,OAAUC,OAAOC,KAAKF,OAAOG,MAAMC,KAC1C,KAAfJ,MAAMI,OAAe3C,mBAAmB4C,SAASD,MAG9CJ,MAAMI,KAAKE,WAAWC,cAAcF,SAAS/B,KAAKwB,4BAOjEf,0BACSH,kBACDN,KAAKC,oBAAoBiC,KAAKR,QACnB,CACHS,GAAIT,MAAMS,GACVC,KAAMV,MAAMU,KACZC,KAAMrC,KAAKsC,cAAcZ,MAAMS,IAC/BI,cAAeb,MAAMa,mBASrC3B,2BAESG,YAAYyB,iBAAiB,SAAS,oBAASC,eAC3CC,eAAe1C,KAAKe,YAAY4B,OAEN,KAA3B3C,KAAKe,YAAY4B,WAEZC,kBAAkBC,UAAUC,IAAI,eAGhCF,kBAAkBC,UAAUE,OAAO,gBAGtC/C,KAAKgD,qBACZ,yBAQYC,GACXA,EAAEC,OAAOC,QAAQnD,KAAKjB,UAAUqE,WAGhCH,EAAEI,gCAEDT,kBAAkBJ,iBAAiB,SAASC,eACxC1B,YAAY4B,MAAQ,QACpBD,eAAe1C,KAAKe,YAAY4B,aAC/B3C,KAAKgD,sBAGXC,EAAEC,OAAOC,QAAQ,mBAAkC,IAAbF,EAAEK,SACxCC,OAAOC,SAAWP,EAAEC,OAAOC,QAAQ,kBAAkBM,MAS7DC,WAAWT,gBACDS,WAAWT,GAETA,EAAEnB,SACD,MACGmB,EAAEC,OAAOC,QAAQnD,KAAKjB,UAAU4E,SAChCV,EAAEW,sBACGhB,kBAAkB5B,MAAM,CAACC,eAAe,eAGhD,YACmD,WAAhDhC,SAAS4E,cAAcC,aAAa,QACpCb,EAAEc,uBACGhD,YAAYC,MAAM,CAACC,eAAe,SACpC,GAAIgC,EAAEC,OAAOC,QAAQnD,KAAKjB,UAAU4E,OAAQ,CAC/B3D,KAAKhB,UAAUE,cAAcc,KAAKjB,UAAUiF,SACpDhD,MAAM,CAACC,eAAe,MAS9CgD,6BAESlD,YAAYyB,iBAAiB,SAAS,oBAAS,UAC3CE,eAAe1C,KAAKe,YAAY4B,OAER,KAAzB3C,KAAKK,qBAEAuC,kBAAkBC,UAAUC,IAAI,eAGhCF,kBAAkBC,UAAUE,OAAO,YAE7C,MAQPT,cAAc4B,eACJ,IAAIC,8BAAuBD,4CAAmClE,KAAKV,YAAY8C"}