{"version":3,"sources":["../src/manual_completion_toggle.js"],"names":["TOGGLE_TYPES","TOGGLE_MARK_DONE","TOGGLE_UNDO","toggleManualCompletionState","toggleButton","originalInnerHtml","innerHTML","setAttribute","toggleType","getAttribute","cmid","completed","Templates","render","loadingHtml","replaceNodeContents","request","methodname","args","Ajax","call","templateContext","overallcomplete","overallincomplete","renderForPromise","renderObject","replaceNode","html","js","removeAttribute","Notification","exception","SELECTORS","MANUAL_TOGGLE","registerEventListener","addEventListener","e","currentTarget"],"mappings":"6MAyBA,OACA,OACA,O,qXAgBMA,CAAAA,CAAY,CAAG,CACjBC,gBAAgB,CAAE,kBADD,CAEjBC,WAAW,CAAE,aAFI,C,CAsBfC,CAA2B,4CAAG,WAAOC,CAAP,uGAE1BC,CAF0B,CAEND,CAAY,CAACE,SAFP,CAKhCF,CAAY,CAACG,YAAb,CAA0B,UAA1B,CAAsC,UAAtC,EAEMC,CAP0B,CAObJ,CAAY,CAACK,YAAb,CAA0B,iBAA1B,CAPa,CAQ1BC,CAR0B,CAQnBN,CAAY,CAACK,YAAb,CAA0B,WAA1B,CARmB,CAU5BE,CAV4B,CAUhBH,CAAU,GAAKR,CAAY,CAACC,gBAVZ,gBAaNW,WAAUC,MAAV,CAAiB,cAAjB,CAAiC,EAAjC,CAbM,QAa1BC,CAb0B,wBAc1BF,WAAUG,mBAAV,CAA8BX,CAA9B,CAA4CU,CAA5C,CAAyD,EAAzD,CAd0B,mBAkBtBE,CAlBsB,CAkBZ,CACZC,UAAU,CAAE,4DADA,CAEZC,IAAI,CAAE,CACFR,IAAI,CAAEA,CADJ,CAEFC,SAAS,CAAEA,CAFT,CAFM,CAlBY,iBAyBtBQ,WAAKC,IAAL,CAAU,CAACJ,CAAD,CAAV,EAAqB,CAArB,CAzBsB,SA4BtBK,CA5BsB,CA4BJ,CACpBX,IAAI,CAAEA,CADc,CAEpBY,eAAe,CAAEX,CAFG,CAGpBY,iBAAiB,CAAE,CAACZ,CAHA,CA5BI,iBAiCDC,WAAUY,gBAAV,CAA2B,+BAA3B,CAA4DH,CAA5D,CAjCC,SAiCtBI,CAjCsB,wBAoCtBb,WAAUc,WAAV,CAAsBtB,CAAtB,CAAoCqB,CAAY,CAACE,IAAjD,CAAuDF,CAAY,CAACG,EAApE,CApCsB,+DAwC5BxB,CAAY,CAACyB,eAAb,CAA6B,UAA7B,EACAzB,CAAY,CAACE,SAAb,CAAyBD,CAAzB,CAGAyB,UAAaC,SAAb,OA5C4B,wDAAH,uD,WAgDlB,CACXC,SAAS,CAhFK,CACdC,aAAa,CAAE,8CADD,CA+EH,CAEXC,qBAAqB,CA9DK,QAAxBA,CAAAA,qBAAwB,CAAC9B,CAAD,CAAkB,CAC5CA,CAAY,CAAC+B,gBAAb,CAA8B,OAA9B,4CAAuC,WAAOC,CAAP,kGAC7BjC,CAAAA,CAA2B,CAACiC,CAAC,CAACC,aAAH,CADE,yCAAvC,wDAGH,CAwDc,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the functionality for toggling the manual completion state of a course module through\n * the manual completion button.\n *\n * @module      core_course/manual_completion_toggle\n * @package     core_course\n * @copyright   2021 Jun Pataleta <jun@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n/**\n * Selectors in the manual completion template.\n *\n * @type {{MANUAL_TOGGLE: string}}\n */\nconst SELECTORS = {\n    MANUAL_TOGGLE: 'button[data-action=toggle-manual-completion]',\n};\n\n/**\n * Toggle type values for the data-toggletype attribute in the core_course/completion_manual template.\n *\n * @type {{TOGGLE_UNDO: string, TOGGLE_MARK_DONE: string}}\n */\nconst TOGGLE_TYPES = {\n    TOGGLE_MARK_DONE: 'manual:mark-done',\n    TOGGLE_UNDO: 'manual:undo',\n};\n\n/**\n * Registers the click event listener for the manual completion toggle button.\n *\n * @param {HTMLElement} toggleButton\n */\nconst registerEventListener = (toggleButton) => {\n    toggleButton.addEventListener('click', async (e) => {\n        await toggleManualCompletionState(e.currentTarget);\n    });\n};\n\n/**\n * Toggles the manual completion state of the module for the given user.\n *\n * @param {HTMLElement} toggleButton\n * @returns {Promise<void>}\n */\nconst toggleManualCompletionState = async (toggleButton) => {\n    // Make a copy of the original content of the button.\n    const originalInnerHtml = toggleButton.innerHTML;\n\n    // Disable the button to prevent double clicks.\n    toggleButton.setAttribute('disabled', 'disabled');\n\n    const toggleType = toggleButton.getAttribute('data-toggletype');\n    const cmid = toggleButton.getAttribute('data-cmid');\n    // Get the target completion state.\n    let completed = toggleType === TOGGLE_TYPES.TOGGLE_MARK_DONE;\n\n    // Replace the button contents with the loading icon.\n    const loadingHtml = await Templates.render('core/loading', {});\n    await Templates.replaceNodeContents(toggleButton, loadingHtml, '');\n\n    try {\n        // Call the webservice to update the manual completion status.\n        const request = {\n            methodname: 'core_completion_update_activity_completion_status_manually',\n            args: {\n                cmid: cmid,\n                completed: completed\n            }\n        };\n        await Ajax.call([request])[0];\n\n        // All good so far. Refresh the manual completion button to reflect its new state by re-rendering the template.\n        const templateContext = {\n            cmid: cmid,\n            overallcomplete: completed,\n            overallincomplete: !completed,\n        };\n        const renderObject = await Templates.renderForPromise('core_course/completion_manual', templateContext);\n\n        // Replace the toggle button with the newly loaded template.\n        await Templates.replaceNode(toggleButton, renderObject.html, renderObject.js);\n\n    } catch (exception) {\n        // In case of an error, revert the original state and appearance of the button.\n        toggleButton.removeAttribute('disabled');\n        toggleButton.innerHTML = originalInnerHtml;\n\n        // Show the exception.\n        Notification.exception(exception);\n    }\n};\n\nexport default {\n    SELECTORS: SELECTORS,\n    registerEventListener: registerEventListener,\n};\n"],"file":"manual_completion_toggle.min.js"}