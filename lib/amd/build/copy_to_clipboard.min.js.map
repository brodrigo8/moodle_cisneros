{"version":3,"sources":["../src/copy_to_clipboard.js"],"names":["addEventListeners","document","addEventListener","e","copyButton","target","closest","dataset","clipboardTarget","copyTarget","querySelector","preventDefault","textToCopy","getTextFromContainer","successMessage","clipboardSuccessMessage","defaultSuccessMessage","navigator","clipboard","writeText","then","catch","displayException","HTMLInputElement","HTMLTextAreaElement","focus","select","execCommand","unableToCopyMessage","container","value","innerText","loaded","key","component","copiedString","unableToCopyString"],"mappings":"2kCA6BMA,CAAAA,CAAiB,CAAG,UAAM,CAC5BC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CACpC,GAAMC,CAAAA,CAAU,CAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,mCAAjB,CAAnB,CACA,GAAI,CAACF,CAAL,CAAiB,CACb,MACH,CAED,GAAI,CAACA,CAAU,CAACG,OAAX,CAAmBC,eAAxB,CAAyC,CACrC,MACH,CAED,GAAMC,CAAAA,CAAU,CAAGR,QAAQ,CAACS,aAAT,CAAuBN,CAAU,CAACG,OAAX,CAAmBC,eAA1C,CAAnB,CACA,GAAI,CAACC,CAAL,CAAiB,CACb,MACH,CAIDN,CAAC,CAACQ,cAAF,GAGA,GAAMC,CAAAA,CAAU,CAAGC,CAAoB,CAACJ,CAAD,CAAvC,CACA,GAAIG,CAAJ,CAAgB,CACZ,GAAME,CAAAA,CAAc,CAAGV,CAAU,CAACG,OAAX,CAAmBQ,uBAAnB,EAA8CC,CAArE,CAEA,GAAIC,SAAS,CAACC,SAAd,CAAyB,CACrBD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BP,CAA9B,EACKQ,IADL,CACU,iBAAM,UAASN,CAAT,CAAyB,EAAzB,CAAN,CADV,EAEKO,KAFL,CAEWC,WAFX,EAIA,MACH,CAND,IAMO,IAAIb,CAAU,WAAYc,CAAAA,gBAAtB,EAA0Cd,CAAU,WAAYe,CAAAA,mBAApE,CAAyF,CAQ5Ff,CAAU,CAACgB,KAAX,GACAhB,CAAU,CAACiB,MAAX,GAGA,GAAIzB,QAAQ,CAAC0B,WAAT,CAAqB,MAArB,CAAJ,CAAkC,CAC9B,UAASb,CAAT,CAAyB,EAAzB,EACKO,KADL,CACWC,WADX,EAGA,MACH,CACJ,CACJ,CAGD,UAASM,CAAT,CAA8B,EAA9B,EACKP,KADL,CACWC,WADX,CAEH,CAtDD,CAuDH,C,CAQKT,CAAoB,CAAG,SAAAgB,CAAS,CAAI,CACtC,GAAIA,CAAS,CAACC,KAAd,CAAqB,CAEjB,MAAOD,CAAAA,CAAS,CAACC,KACpB,CAHD,IAGO,IAAID,CAAS,CAACE,SAAd,CAAyB,CAE5B,MAAOF,CAAAA,CAAS,CAACE,SACpB,CAED,MAAO,KACV,C,CAEGC,CAAM,G,CACNhB,C,CACAY,C,CAEJ,GAAI,CAACI,CAAL,CAAa,CAET,kBAAW,CACP,CAACC,GAAG,CAAE,uBAAN,CAA+BC,SAAS,CAAE,MAA1C,CADO,CAEP,CAACD,GAAG,CAAE,yBAAN,CAAiCC,SAAS,CAAE,MAA5C,CAFO,CAAX,EAGGd,IAHH,CAGQ,WAAwC,cAAtCe,CAAsC,MAAxBC,CAAwB,MAC5CpB,CAAqB,CAAGmB,CAAxB,CACAP,CAAmB,CAAGQ,CAAtB,CACA,QACH,CAPD,EAOGf,KAPH,CAOSC,WAPT,EAUAtB,CAAiB,GACjBgC,CAAM,GACT,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module that enhances a button and text container to support copy-to-clipboard functionality.\n *\n * @module     core/copy_to_clipboard\n * @copyright  2021 Jun Pataleta\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {get_strings as getStrings} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport {exception as displayException} from 'core/notification';\n\n/**\n * Add event listeners to trigger elements through event delegation.\n */\nconst addEventListeners = () => {\n    document.addEventListener('click', e => {\n        const copyButton = e.target.closest('[data-action=\"copytoclipboard\"]');\n        if (!copyButton) {\n            return;\n        }\n\n        if (!copyButton.dataset.clipboardTarget) {\n            return;\n        }\n\n        const copyTarget = document.querySelector(copyButton.dataset.clipboardTarget);\n        if (!copyTarget) {\n            return;\n        }\n\n        // This is a copy target and there is content.\n        // Prevent the default action.\n        e.preventDefault();\n\n        // We have a copy target - great. Let's copy its content.\n        const textToCopy = getTextFromContainer(copyTarget);\n        if (textToCopy) {\n            const successMessage = copyButton.dataset.clipboardSuccessMessage || defaultSuccessMessage;\n\n            if (navigator.clipboard) {\n                navigator.clipboard.writeText(textToCopy)\n                    .then(() => addToast(successMessage, {}))\n                    .catch(displayException);\n\n                return;\n            } else if (copyTarget instanceof HTMLInputElement || copyTarget instanceof HTMLTextAreaElement) {\n                // The clipboard API is not available.\n                // This may happen when the page is not served over SSL.\n                // Try to fall back to document.execCommand() approach of copying the text.\n                // WARNING: This is deprecated functionality that may get dropped at anytime by browsers.\n\n                // Focus and select the text in the target element.\n                // If the execCommand fails, at least the user can readily copy the text.\n                copyTarget.focus();\n                copyTarget.select();\n\n                // Try to copy the text from the target element.\n                if (document.execCommand('copy')) {\n                    addToast(successMessage, {})\n                        .catch(displayException);\n\n                    return;\n                }\n            }\n        }\n\n        // If we reached this point, it means we cannot copy the text at all.\n        addToast(unableToCopyMessage, {})\n            .catch(displayException);\n    });\n};\n\n/**\n * Fetches the text to be copied from the container.\n *\n * @param {HTMLElement} container The element containing the text to be copied.\n * @returns {null|string}\n */\nconst getTextFromContainer = container => {\n    if (container.value) {\n        // For containers which are form elements (e.g. text area, text input), get the element's value.\n        return container.value;\n    } else if (container.innerText) {\n        // For other elements, try to use the innerText attribute.\n        return container.innerText;\n    }\n\n    return null;\n};\n\nlet loaded = false,\n    defaultSuccessMessage,\n    unableToCopyMessage;\n\nif (!loaded) {\n    // Load default success and error strings.\n    getStrings([\n        {key: 'textcopiedtoclipboard', component: 'core'},\n        {key: 'unabletocopytoclipboard', component: 'core'},\n    ]).then(([copiedString, unableToCopyString]) => {\n        defaultSuccessMessage = copiedString;\n        unableToCopyMessage = unableToCopyString;\n        return true;\n    }).catch(displayException);\n\n    // Add event listeners.\n    addEventListeners();\n    loaded = true;\n}\n"],"file":"copy_to_clipboard.min.js"}