{"version":3,"file":"participants_filter.min.js","sources":["../src/participants_filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter management.\n *\n * @module     core_user/participants_filter\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CoreFilter from 'core/datafilter';\nimport * as DynamicTable from 'core_table/dynamic';\nimport Selectors from 'core/datafilter/selectors';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} filterRegionId The id for the filter element.\n */\nexport const init = filterRegionId => {\n\n    const filterSet = document.getElementById(filterRegionId);\n\n    // Create and initialize filter.\n    const coreFilter = new CoreFilter(filterSet, function(filters, pendingPromise) {\n        DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n            .then(result => {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    });\n    coreFilter.init();\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n            return coreFilter.addFilterRow()\n                .then(([filterRow]) => {\n                    coreFilter.addFilter(filterRow, filterType, filterValues);\n                    return;\n                });\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises)\n            .then(() => {\n                return coreFilter.removeEmptyFilters();\n            })\n            .then(() => {\n                coreFilter.updateFiltersOptions();\n                return;\n            })\n            .then(() => {\n                coreFilter.updateTableFromFilter();\n                return;\n            });\n    };\n\n    // Initialize DynamicTable for showing result.\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core/filter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n            .then(() => initialFilterPromise.resolve())\n            .catch();\n    }\n};\n\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","return","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","prototype","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","_datafilter","DynamicTable","_typeof","cache","has","get","newObj","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","_interopRequireWildcard","_selectors","_notification","_pending","_exports","init","filterRegionId","filterSet","document","getElementById","coreFilter","CoreFilter","filters","pendingPromise","setFilters","getTableFromId","dataset","tableRegion","jointype","parseInt","querySelector","Selectors","filterset","fields","join","then","result","resolve","catch","Notification","exception","tableRoot","initialFilters","getFilters","initialFilterPromise","Pending","config","filterConfig","entries","Promise","filterPromises","map","_ref","_ref2","filterType","filterData","filterValues","values","addFilterRow","_ref3","filterRow","addFilter","filter","promise","all","removeEmptyFilters","updateFiltersOptions","updateTableFromFilter","setFilterFromConfig"],"mappings":"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"}