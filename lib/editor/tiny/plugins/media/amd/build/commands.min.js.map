{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media commands.\n *\n * @module      tiny_media/commands\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_strings as getStrings} from 'core/str';\nimport {\n    component,\n    imageButtonName,\n    videoButtonName,\n    mediaManagerButtonName\n} from './common';\nimport {MediaImage} from './image';\nimport {MediaEmbed} from './embed';\nimport {MediaManager} from './manager';\nimport {getButtonImage} from 'editor_tiny/utils';\n\nconst isImage = (node) => node.nodeName.toLowerCase() === 'img';\nconst isVideo = (node) => node.nodeName.toLowerCase() === 'video' || node.nodeName.toLowerCase() === 'audio';\n\nconst registerImageCommand = (editor, imageButtonText) => {\n    const imageIcon = 'image';\n    const handleImageAction = () => {\n        const mediaImage = new MediaImage(editor);\n        mediaImage.displayDialogue();\n    };\n\n    // Register the Menu Button as a toggle.\n    // This means that when highlighted over an existing Media Image element it will show as toggled on.\n    editor.ui.registry.addToggleButton(imageButtonName, {\n        icon: imageIcon,\n        tooltip: imageButtonText,\n        onAction: handleImageAction,\n        onSetup: api => {\n            return editor.selection.selectorChangedWithUnbind(\n                'img:not([data-mce-object]):not([data-mce-placeholder]),figure.image',\n                api.setActive\n            ).unbind;\n        }\n    });\n\n    editor.ui.registry.addMenuItem(imageButtonName, {\n        icon: imageIcon,\n        text: imageButtonText,\n        onAction: handleImageAction,\n    });\n\n    editor.ui.registry.addContextToolbar(imageButtonName, {\n        predicate: isImage,\n        items: imageButtonName,\n        position: 'node',\n        scope: 'node'\n    });\n\n    editor.ui.registry.addContextMenu(imageButtonName, {\n        update: isImage,\n    });\n};\n\nconst registerEmbedCommand = (editor, videoButtonText) => {\n    const videoIcon = 'embed';\n    const handleEmbedAction = () => {\n        const mediaImage = new MediaEmbed(editor);\n        mediaImage.displayDialogue();\n    };\n\n    // Register the Menu Button as a toggle.\n    // This means that when highlighted over an existing Media Video element it will show as toggled on.\n    editor.ui.registry.addToggleButton(videoButtonName, {\n        icon: videoIcon,\n        tooltip: videoButtonText,\n        onAction: handleEmbedAction,\n        onSetup: api => {\n            return editor.selection.selectorChangedWithUnbind(\n                'video:not([data-mce-object]):not([data-mce-placeholder]),' +\n                'audio:not([data-mce-object]):not([data-mce-placeholder])',\n                api.setActive\n            ).unbind;\n        }\n    });\n\n    editor.ui.registry.addMenuItem(videoButtonName, {\n        icon: videoIcon,\n        text: videoButtonText,\n        onAction: handleEmbedAction,\n    });\n\n    editor.ui.registry.addContextMenu(videoButtonName, {\n        update: isVideo,\n    });\n\n    editor.ui.registry.addContextToolbar(videoButtonName, {\n        predicate: isVideo,\n        items: videoButtonName,\n        position: 'node',\n        scope: 'node'\n    });\n\n};\n\nconst registerManagerCommand = (editor, mediaManagerButtonText, mediaManagerButtonImage) => {\n    const mediaManagerIcon = 'filemanager';\n    const handleMediaManager = () => {\n        const mediaManager = new MediaManager(editor);\n        mediaManager.displayDialogue();\n    };\n\n    // Register the Menu Button as a toggle.\n    editor.ui.registry.addIcon(mediaManagerIcon, mediaManagerButtonImage.html);\n    editor.ui.registry.addButton(mediaManagerButtonName, {\n        icon: mediaManagerIcon,\n        tooltip: mediaManagerButtonText,\n        onAction: () => {\n            handleMediaManager();\n        }\n    });\n\n    editor.ui.registry.addMenuItem(mediaManagerButtonName, {\n        icon: mediaManagerIcon,\n        text: mediaManagerButtonText,\n        onAction: () => {\n            handleMediaManager();\n        }\n    });\n};\n\nexport const getSetup = async() => {\n    const [\n        imageButtonText,\n        mediaButtonText,\n        mediaManagerButtonText\n    ] = await getStrings(['imagebuttontitle', 'mediabuttontitle', 'mediamanagerbuttontitle'].map((key) => ({key, component})));\n\n    const [\n        mediaManagerButtonImage,\n    ] = await Promise.all([\n        getButtonImage('filemanager', component)\n    ]);\n\n    // Note: The function returned here must be synchronous and cannot use promises.\n    // All promises must be resolved prior to returning the function.\n    return (editor) => {\n        registerImageCommand(editor, imageButtonText);\n        registerEmbedCommand(editor, mediaButtonText);\n        registerManagerCommand(editor, mediaManagerButtonText, mediaManagerButtonImage);\n    };\n};\n"],"names":["_ref","isImage","node","nodeName","toLowerCase","isVideo","registerImageCommand","editor","imageButtonText","handleImageAction","MediaImage","displayDialogue","ui","registry","addToggleButton","imageButtonName","icon","tooltip","onAction","onSetup","api","selection","selectorChangedWithUnbind","setActive","unbind","addMenuItem","text","addContextToolbar","predicate","items","position","scope","addContextMenu","update","registerEmbedCommand","videoButtonText","handleEmbedAction","MediaEmbed","videoButtonName","registerManagerCommand","mediaManagerButtonText","mediaManagerButtonImage","handleMediaManager","MediaManager","addIcon","html","addButton","mediaManagerButtonName","getSetup","_regeneratorRuntime","mark","_callee","_yield$getStrings","_yield$getStrings2","mediaButtonText","_yield$Promise$all","_yield$Promise$all2","wrap","_context","prev","next","getStrings","map","key","component","sent","_slicedToArray","Promise","all","getButtonImage","abrupt","stop","apply","this","arguments","_exports"],"mappings":"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"}