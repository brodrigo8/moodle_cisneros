{"version":3,"file":"checker.min.js","sources":["../src/checker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_accessibilitychecker\n * @copyright  2022, Stevani Andolo  <stevani@hotmail.com.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {component} from './common';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport ColorBase from './colorbase';\nimport {getPlaceholderSelectors} from 'editor_tiny/options';\n\n/**\n * @typedef ProblemDetail\n * @type {object}\n * @param {string} description The description of the problem\n * @param {ProblemNode[]} problemNodes The list of affected nodes\n */\n\n/**\n * @typedef ProblemNode\n * @type {object}\n * @param {string} nodeName The node name for the affected node\n * @param {string} nodeIndex The indexd of the node\n * @param {string} text A description of the issue\n * @param {string} src The source of the image\n */\n\nexport default class {\n\n    constructor(editor) {\n        this.editor = editor;\n        this.colorBase = new ColorBase();\n        this.modal = null;\n        this.placeholderSelectors = null;\n        const placeholders = getPlaceholderSelectors(this.editor);\n        if (placeholders.length) {\n            this.placeholderSelectors = placeholders.join(', ');\n        }\n    }\n\n    destroy() {\n        delete this.editor;\n        delete this.colorBase;\n\n        this.modal.destroy();\n        delete this.modal;\n    }\n\n    async displayDialogue() {\n        this.modal = await Modal.create({\n            type: Modal.types.DEFAULT,\n            large: true,\n            title: getString('pluginname', component),\n            body: this.getDialogueContent()\n        });\n\n        // Destroy the class when hiding the modal.\n        this.modal.getRoot().on(ModalEvents.hidden, () => this.destroy());\n\n        this.modal.getRoot()[0].addEventListener('click', (event) => {\n            const faultLink = event.target.closest('[data-action=\"highlightfault\"]');\n            if (!faultLink) {\n                return;\n            }\n\n            event.preventDefault();\n\n            const nodeName = faultLink.dataset.nodeName;\n            let selectedNode = null;\n            if (nodeName) {\n                if (nodeName.includes(',') || nodeName === 'body') {\n                    selectedNode = this.editor.dom.select('body')[0];\n                } else {\n                    const nodeIndex = faultLink.dataset.nodeIndex ?? 0;\n                    selectedNode = this.editor.dom.select(nodeName)[nodeIndex];\n                }\n            }\n\n            if (selectedNode && selectedNode.nodeName.toUpperCase() !== 'BODY') {\n                this.selectAndScroll(selectedNode);\n            }\n\n            this.modal.hide();\n        });\n\n        this.modal.show();\n    }\n\n    async getAllWarningStrings() {\n        const keys = [\n            'emptytext',\n            'entiredocument',\n            'imagesmissingalt',\n            'needsmorecontrast',\n            'needsmoreheadings',\n            'nowarnings',\n            'nowarningsonselected',\n            'tablesmissingcaption',\n            'tablesmissingheaders',\n            'tableswithmergedcells',\n        ];\n\n        const stringValues = await getStrings(keys.map((key) => ({key, component})));\n        return new Map(keys.map((key, index) => ([key, stringValues[index]])));\n    }\n\n    /**\n     * Return the dialogue content.\n     *\n     * @return {Promise<Array>} A template promise containing the rendered dialogue content.\n     */\n     async getDialogueContent() {\n        const langStrings = await this.getAllWarningStrings();\n\n        // Translate langstrings into real strings.\n        const warnings = this.getWarnings().map((warning) => {\n            if (warning.description) {\n                if (warning.description.type === 'langstring') {\n                    warning.description = langStrings.get(warning.description.value);\n                } else {\n                    warning.description = warning.description.value;\n                }\n            }\n\n            warning.nodeData = warning.nodeData.map((problemNode) => {\n                if (problemNode.text) {\n                    if (problemNode.text.type === 'langstring') {\n                        problemNode.text = langStrings.get(problemNode.text.value);\n                    } else {\n                        problemNode.text = problemNode.text.value;\n                    }\n                }\n\n                return problemNode;\n            });\n\n            return warning;\n        });\n\n        return Templates.render('tiny_accessibilitychecker/warning_content', {\n            warnings\n        });\n    }\n\n    /**\n     * Set the selection and scroll to the selected element.\n     *\n     * @param {node} node\n     */\n    selectAndScroll(node) {\n        this.editor.selection.select(node).scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest'\n        });\n    }\n\n    /**\n     * Find all problems with the content editable region.\n     *\n     * @return {ProblemDetail[]} A complete list of all warnings and problems.\n     */\n    getWarnings() {\n        const warnings = [];\n\n        // Check Images with no alt text or dodgy alt text.\n        warnings.push(this.createWarnings('imagesmissingalt', this.checkImage(), true));\n        warnings.push(this.createWarnings('needsmorecontrast', this.checkOtherElements(), false));\n\n        // Check for no headings.\n        if (this.editor.getContent({format: 'text'}).length > 1000 && this.editor.dom.select('h3,h4,h5').length < 1) {\n            warnings.push(this.createWarnings('needsmoreheadings', [this.editor], false));\n        }\n\n        // Check for tables with no captions.\n        warnings.push(this.createWarnings('tablesmissingcaption', this.checkTableCaption(), false));\n\n        // Check for tables with merged cells.\n        warnings.push(this.createWarnings('tableswithmergedcells', this.checkTableMergedCells(), false));\n\n        // Check for tables with no row/col headers.\n        warnings.push(this.createWarnings('tablesmissingheaders', this.checkTableHeaders(), false));\n\n        return warnings.filter((warning) => warning.nodeData.length > 0);\n    }\n\n    /**\n     * Generate the data that describes the issues found.\n     *\n     * @param {String} description Description of this failure.\n     * @param {HTMLElement[]} nodes An array of failing nodes.\n     * @param {boolean} isImageType Whether the warnings are related to image type checks\n     * @return {ProblemDetail[]} A set of problem details\n     */\n    createWarnings(description, nodes, isImageType) {\n        const getTextValue = (node) => {\n            if (node === this.editor) {\n                return {\n                    type: 'langstring',\n                    value: 'entiredocument',\n                };\n            }\n\n            const emptyStringValue = {\n                type: 'langstring',\n                value: 'emptytext',\n            };\n            if ('innerText' in node) {\n                const value = node.innerText.trim();\n                return value.length ? {type: 'raw', value} : emptyStringValue;\n            } else if ('textContent' in node) {\n                const value = node.textContent.trim();\n                return value.length ? {type: 'raw', value} : emptyStringValue;\n            }\n\n            return {type: 'raw', value: node.nodeName};\n        };\n\n        const getEventualNode = (node) => {\n            if (node !== this.editor) {\n                return node;\n            }\n            const childNodes = node.dom.select('body')[0].childNodes;\n            if (childNodes.length) {\n                return document.body;\n            } else {\n                return childNodes;\n            }\n        };\n\n        const warning = {\n            description: {\n                type: 'langstring',\n                value: description,\n            },\n            nodeData: [],\n        };\n\n        warning.nodeData = [...nodes].filter((node) => {\n            // If the failed node is a placeholder element. We should remove it from the list.\n            if (node !== this.editor && this.placeholderSelectors) {\n                return node.matches(this.placeholderSelectors) === false;\n            }\n\n            return node;\n        }).map((node) => {\n            const describedNode = getEventualNode(node);\n\n            // Find the index of the node within the type of node.\n            // This is used to select the correct node when the user selects it.\n            const nodeIndex = this.editor.dom.select(describedNode.nodeName).indexOf(describedNode);\n            const warning = {\n                src: null,\n                text: null,\n                nodeName: describedNode.nodeName,\n                nodeIndex,\n            };\n\n            if (isImageType) {\n                warning.src = node.getAttribute('src');\n            } else {\n                warning.text = getTextValue(node);\n            }\n\n            return warning;\n        });\n\n        return warning;\n    }\n\n    /**\n     * Check accessiblity issue only for img type.\n     *\n     * @return {Node} A complete list of all warnings and problems.\n     */\n    checkImage() {\n        const problemNodes = [];\n        this.editor.dom.select('img').forEach((img) => {\n            const alt = img.getAttribute('alt');\n            if (!alt && img.getAttribute('role') !== 'presentation') {\n                problemNodes.push(img);\n            }\n        });\n        return problemNodes;\n    }\n\n    /**\n     * Look for any table without a caption.\n     *\n     * @return {Node} A complete list of all warnings and problems.\n     */\n    checkTableCaption() {\n        const problemNodes = [];\n        this.editor.dom.select('table').forEach((table) => {\n            const caption = table.querySelector('caption');\n            if (!caption?.textContent.trim()) {\n                problemNodes.push(table);\n            }\n        });\n\n        return problemNodes;\n    }\n\n    /**\n     * Check accessiblity issue for not img and table only.\n     *\n     * @return {Node} A complete list of all warnings and problems.\n     * @private\n     */\n    checkOtherElements() {\n        const problemNodes = [];\n\n        const getRatio = (lum1, lum2) => {\n            // Algorithm from \"http://www.w3.org/TR/WCAG20-GENERAL/G18.html\".\n            if (lum1 > lum2) {\n                return (lum1 + 0.05) / (lum2 + 0.05);\n            } else {\n                return (lum2 + 0.05) / (lum1 + 0.05);\n            }\n        };\n        this.editor.dom.select('body > *')\n            .filter((node) => node.textContent?.trim().length)\n            .forEach((node) => {\n                const foreground = this.colorBase.fromArray(\n                    this.getComputedBackgroundColor(\n                        node,\n                        window.getComputedStyle(node, null).getPropertyValue('color')\n                    ),\n                    this.colorBase.TYPES.RGBA\n                );\n                const background = this.colorBase.fromArray(\n                    this.getComputedBackgroundColor(\n                        node\n                    ),\n                    this.colorBase.TYPES.RGBA\n                );\n\n                const lum1 = this.getLuminanceFromCssColor(foreground);\n                const lum2 = this.getLuminanceFromCssColor(background);\n                const ratio = getRatio(lum1, lum2);\n\n                if (ratio <= 4.5) {\n                    window.console.log(`\n                        Contrast ratio is too low: ${ratio}\n                        Colour 1: ${foreground}\n                        Colour 2: ${background}\n                        Luminance 1: ${lum1}\n                        Luminance 2: ${lum2}\n                    `);\n\n                    // We only want the highest node with dodgy contrast reported.\n                    if (!problemNodes.find((existingProblemNode) => existingProblemNode.contains(node))) {\n                        problemNodes.push(node);\n                    }\n                }\n            });\n        return problemNodes;\n    }\n\n    /**\n     * Check accessiblity issue only for table with merged cells.\n     *\n     * @return {Node} A complete list of all warnings and problems.\n     * @private\n     */\n    checkTableMergedCells() {\n        const problemNodes = [];\n        this.editor.dom.select('table').forEach((table) => {\n            const rowcolspan = table.querySelectorAll('[colspan], [rowspan]');\n            if (rowcolspan.length) {\n                problemNodes.push(table);\n            }\n        });\n        return problemNodes;\n    }\n\n    /**\n     * Check accessiblity issue only for table with no headers.\n     *\n     * @return {Node} A complete list of all warnings and problems.\n     * @private\n     */\n    checkTableHeaders() {\n        const problemNodes = [];\n\n        this.editor.dom.select('table').forEach((table) => {\n            if (table.querySelector('tr').querySelector('td')) {\n                // The first row has a non-header cell, so all rows must have at least one header.\n                const missingHeader = [...table.querySelectorAll('tr')].some((row) => {\n                    const header = row.querySelector('th');\n                    if (!header) {\n                        return true;\n                    }\n\n                    if (!header.textContent.trim()) {\n                        return true;\n                    }\n\n                    return false;\n                });\n                if (missingHeader) {\n                    // At least one row is missing the header, or it is empty.\n                    problemNodes.push(table);\n                }\n            } else {\n                // Every header must have some content.\n                if ([...table.querySelectorAll('tr th')].some((header) => !header.textContent.trim())) {\n                    problemNodes.push(table);\n                }\n            }\n        });\n        return problemNodes;\n    }\n\n    /**\n     * Convert a CSS color to a luminance value.\n     *\n     * @param {String} colortext The Hex value for the colour\n     * @return {Number} The luminance value.\n     * @private\n     */\n    getLuminanceFromCssColor(colortext) {\n        if (colortext === 'transparent') {\n            colortext = '#ffffff';\n        }\n        const color = this.colorBase.toArray(this.colorBase.toRGB(colortext));\n\n        // Algorithm from \"http://www.w3.org/TR/WCAG20-GENERAL/G18.html\".\n        const part1 = (a) => {\n            a = parseInt(a, 10) / 255.0;\n            if (a <= 0.03928) {\n                a = a / 12.92;\n            } else {\n                a = Math.pow(((a + 0.055) / 1.055), 2.4);\n            }\n            return a;\n        };\n\n        const r1 = part1(color[0]);\n        const g1 = part1(color[1]);\n        const b1 = part1(color[2]);\n\n        return 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1;\n    }\n\n    /**\n     * Get the computed RGB converted to full alpha value, considering the node hierarchy.\n     *\n     * @param {Node} node\n     * @param {String} color The initial colour. If not specified, fetches the backgroundColor from the node.\n     * @return {Array} Colour in Array form (RGBA)\n     * @private\n     */\n    getComputedBackgroundColor(node, color) {\n        if (!node.parentNode) {\n            // This is the document node and has no colour.\n            // We cannot use window.getComputedStyle on the document.\n            // If we got here, then the document has no background colour. Fall back to white.\n            return this.colorBase.toArray('rgba(255, 255, 255, 1)');\n        }\n        color = color ? color : window.getComputedStyle(node, null).getPropertyValue('background-color');\n\n        if (color.toLowerCase() === 'rgba(0, 0, 0, 0)' || color.toLowerCase() === 'transparent') {\n            color = 'rgba(1, 1, 1, 0)';\n        }\n\n        // Convert the colour to its constituent parts in RGBA format, then fetch the alpha.\n        const colorParts = this.colorBase.toArray(color);\n        const alpha = colorParts[3];\n\n        if (alpha === 1) {\n            // If the alpha of the background is already 1, then the parent background colour does not change anything.\n            return colorParts;\n        }\n\n        // Fetch the computed background colour of the parent and use it to calculate the RGB of this item.\n        const parentColor = this.getComputedBackgroundColor(node.parentNode);\n        return [\n            // RGB = (alpha * R|G|B) + (1 - alpha * solid parent colour).\n            (1 - alpha) * parentColor[0] + alpha * colorParts[0],\n            (1 - alpha) * parentColor[1] + alpha * colorParts[1],\n            (1 - alpha) * parentColor[2] + alpha * colorParts[2],\n            // We always return a colour with full alpha.\n            1\n        ];\n    }\n}\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","Symbol","iterator","constructor","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","o","minLen","n","toString","slice","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","len","length","i","arr2","_regeneratorRuntime","exports","Op","hasOwn","value","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_templates","Modal","ModalEvents","_colorbase","_default","editor","instance","Constructor","_classCallCheck","colorBase","ColorBase","modal","placeholderSelectors","placeholders","getPlaceholderSelectors","join","protoProps","staticProps","_getDialogueContent","_getAllWarningStrings","_displayDialogue","destroy","_callee","_this","_context","types","DEFAULT","large","title","getString","component","body","getDialogueContent","getRoot","on","hidden","addEventListener","event","faultLink","closest","preventDefault","nodeName","dataset","selectedNode","includes","dom","select","_faultLink$dataset$no","nodeIndex","toUpperCase","selectAndScroll","hide","show","_callee2","stringValues","_context2","getStrings","map","Map","index","_callee3","langStrings","warnings","_context3","getAllWarningStrings","getWarnings","warning","description","nodeData","problemNode","text","Templates","render","node","selection","scrollIntoView","behavior","block","createWarnings","checkImage","checkOtherElements","getContent","format","checkTableCaption","checkTableMergedCells","checkTableHeaders","filter","nodes","isImageType","_this2","matches","describedNode","childNodes","document","getEventualNode","indexOf","src","getAttribute","emptyStringValue","innerText","trim","textContent","getTextValue","problemNodes","img","table","caption","querySelector","_this3","_node$textContent","foreground","fromArray","getComputedBackgroundColor","window","getComputedStyle","getPropertyValue","TYPES","RGBA","background","lum1","getLuminanceFromCssColor","lum2","ratio","getRatio","console","log","concat","find","existingProblemNode","contains","querySelectorAll","some","row","header","colortext","color","toArray","toRGB","part1","a","parseInt","Math","pow","parentNode","toLowerCase","colorParts","alpha","parentColor","_exports"],"mappings":"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"}