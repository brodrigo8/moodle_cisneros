{"version":3,"file":"audience.min.js","sources":["../src/audience.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder audiences\n *\n * @module      core_reportbuilder/audience\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport 'core/inplace_editable';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport DynamicForm from 'core_form/dynamicform';\nimport {add as addToast} from 'core/toast';\nimport {deleteAudience} from 'core_reportbuilder/local/repository/audiences';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {loadFragment} from 'core/fragment';\nimport {markFormAsDirty} from 'core_form/changechecker';\n\nlet reportId = 0;\nlet contextId = 0;\n\n/**\n * Add audience card\n *\n * @param {String} className\n * @param {String} title\n */\nconst addAudienceCard = (className, title) => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:add');\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCardLength = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard).length;\n\n    const params = {\n        classname: className,\n        reportid: reportId,\n        showormessage: (audienceCardLength > 0),\n        title: title,\n    };\n\n    // Load audience card fragment, render and then initialise the form within.\n    loadFragment('core_reportbuilder', 'audience_form', contextId, params)\n        .then((html, js) => {\n            const audienceCard = Templates.appendNodeContents(audiencesContainer, html, js)[0];\n            const audienceEmptyMessage = audiencesContainer.querySelector(reportSelectors.regions.audienceEmptyMessage);\n\n            const audienceForm = initAudienceCardForm(audienceCard);\n            // Mark as dirty new audience form created to prevent users leaving the page without saving it.\n            markFormAsDirty(audienceForm.getFormNode());\n            audienceEmptyMessage.classList.add('hidden');\n\n            return getString('audienceadded', 'core_reportbuilder', title);\n        })\n        .then(addToast)\n        .then(() => pendingPromise.resolve())\n        .catch(Notification.exception);\n};\n\n/**\n * Edit audience card\n *\n * @param {Element} audienceCard\n */\nconst editAudienceCard = audienceCard => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:edit');\n\n    // Load audience form with data for editing, then toggle visible controls in the card.\n    const audienceForm = initAudienceCardForm(audienceCard);\n    audienceForm.load({id: audienceCard.dataset.instanceid})\n        .then(() => {\n            const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n            const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n            const audienceEdit = audienceCard.querySelector(reportSelectors.actions.audienceEdit);\n\n            audienceFormContainer.classList.remove('hidden');\n            audienceDescription.classList.add('hidden');\n            audienceEdit.disabled = true;\n\n            return pendingPromise.resolve();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Initialise dynamic form within given audience card\n *\n * @param {Element} audienceCard\n * @return {DynamicForm}\n */\nconst initAudienceCardForm = audienceCard => {\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const audienceForm = new DynamicForm(audienceFormContainer, '\\\\core_reportbuilder\\\\form\\\\audience');\n\n    // After submitting the form, update the card instance and description properties.\n    audienceForm.addEventListener(audienceForm.events.FORM_SUBMITTED, data => {\n        const audienceHeading = audienceCard.querySelector(reportSelectors.regions.audienceHeading);\n        const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n\n        audienceCard.dataset.instanceid = data.detail.instanceid;\n\n        audienceHeading.innerHTML = data.detail.heading;\n        audienceDescription.innerHTML = data.detail.description;\n\n        closeAudienceCardForm(audienceCard);\n\n        return getString('audiencesaved', 'core_reportbuilder')\n            .then(addToast);\n    });\n\n    // If cancelling the form, close the card or remove it if it was never created.\n    audienceForm.addEventListener(audienceForm.events.FORM_CANCELLED, () => {\n        if (audienceCard.dataset.instanceid > 0) {\n            closeAudienceCardForm(audienceCard);\n        } else {\n            removeAudienceCard(audienceCard);\n        }\n    });\n\n    return audienceForm;\n};\n\n/**\n * Delete audience card\n *\n * @param {Element} audienceDelete\n */\nconst deleteAudienceCard = audienceDelete => {\n    const audienceCard = audienceDelete.closest(reportSelectors.regions.audienceCard);\n    const audienceTitle = audienceCard.dataset.title;\n\n    Notification.saveCancelPromise(\n        getString('deleteaudience', 'core_reportbuilder', audienceTitle),\n        getString('deleteaudienceconfirm', 'core_reportbuilder', audienceTitle),\n        getString('delete', 'core'),\n        {triggerElement: audienceDelete}\n    ).then(() => {\n        const pendingPromise = new Pending('core_reportbuilder/audience:delete');\n\n        return deleteAudience(reportId, audienceCard.dataset.instanceid)\n            .then(() => addToast(getString('audiencedeleted', 'core_reportbuilder', audienceTitle)))\n            .then(() => {\n                removeAudienceCard(audienceCard);\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Close audience card form\n *\n * @param {Element} audienceCard\n */\nconst closeAudienceCardForm = audienceCard => {\n    // Remove the [data-region=\"audience-form-container\"] (with all the event listeners attached to it), and create it again.\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const NewAudienceFormContainer = audienceFormContainer.cloneNode(false);\n    audienceCard.querySelector(reportSelectors.regions.audienceForm).replaceChild(NewAudienceFormContainer, audienceFormContainer);\n    // Show the description container and enable the action buttons.\n    audienceCard.querySelector(reportSelectors.regions.audienceDescription).classList.remove('hidden');\n    audienceCard.querySelector(reportSelectors.actions.audienceEdit).disabled = false;\n    audienceCard.querySelector(reportSelectors.actions.audienceDelete).disabled = false;\n};\n\n/**\n * Remove audience card\n *\n * @param {Element} audienceCard\n */\nconst removeAudienceCard = audienceCard => {\n    audienceCard.remove();\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCards = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard);\n\n    // Show message if there are no cards remaining, ensure first card's separator is not present.\n    if (audienceCards.length === 0) {\n        const audienceEmptyMessage = document.querySelector(reportSelectors.regions.audienceEmptyMessage);\n        audienceEmptyMessage.classList.remove('hidden');\n    } else {\n        const audienceFirstCardSeparator = audienceCards[0].querySelector('.audience-separator');\n        audienceFirstCardSeparator?.remove();\n    }\n};\n\nlet initialized = false;\n\n/**\n * Initialise audiences tab.\n *\n * @param {Number} id\n * @param {Number} contextid\n */\nexport const init = (id, contextid) => {\n    prefetchStrings('core_reportbuilder', [\n        'audienceadded',\n        'audiencedeleted',\n        'audiencesaved',\n        'deleteaudience',\n        'deleteaudienceconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    reportId = id;\n    contextId = contextid;\n\n    if (initialized) {\n        // We already added the event listeners (can be called multiple times by mustache template).\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Add instance.\n        const audienceAdd = event.target.closest(reportSelectors.actions.audienceAdd);\n        if (audienceAdd) {\n            event.preventDefault();\n            addAudienceCard(audienceAdd.dataset.uniqueIdentifier, audienceAdd.dataset.name);\n        }\n\n        // Edit instance.\n        const audienceEdit = event.target.closest(reportSelectors.actions.audienceEdit);\n        if (audienceEdit) {\n            const audienceEditCard = audienceEdit.closest(reportSelectors.regions.audienceCard);\n\n            event.preventDefault();\n            editAudienceCard(audienceEditCard);\n        }\n\n        // Delete instance.\n        const audienceDelete = event.target.closest(reportSelectors.actions.audienceDelete);\n        if (audienceDelete) {\n            event.preventDefault();\n            deleteAudienceCard(audienceDelete);\n        }\n    });\n\n    initialized = true;\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","_exports","value","init","_templates","_notification","_pending","_dynamicform","reportSelectors","_typeof","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","reportId","contextId","initAudienceCardForm","audienceCard","audienceFormContainer","querySelector","regions","audienceForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","data","audienceHeading","audienceDescription","dataset","instanceid","detail","innerHTML","heading","description","closeAudienceCardForm","getString","get_string","then","addToast","FORM_CANCELLED","removeAudienceCard","NewAudienceFormContainer","cloneNode","replaceChild","classList","remove","actions","audienceEdit","disabled","audienceDelete","audienceCards","document","audiencesContainer","querySelectorAll","length","audienceEmptyMessage","audienceFirstCardSeparator","initialized","id","contextid","prefetchStrings","event","className","title","pendingPromise","audienceCardLength","params","audienceAdd","target","closest","preventDefault","uniqueIdentifier","name","Pending","classname","reportid","showormessage","loadFragment","html","js","Templates","appendNodeContents","markFormAsDirty","getFormNode","add","resolve","catch","Notification","exception","audienceEditCard","load","editAudienceCard","audienceTitle","saveCancelPromise","triggerElement","deleteAudience","deleteAudienceCard"],"mappings":"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"}