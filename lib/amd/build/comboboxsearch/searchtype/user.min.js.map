{"version":3,"file":"user.min.js","sources":["../../../src/comboboxsearch/searchtype/user.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for learners within the grade area.\n *\n * @module    core/comboboxsearch/searchtype/user\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport TertiarySearchClass from 'core/comboboxsearch/search_combobox';\nimport * as Repository from 'core_grades/searchwidget/repository';\nimport {get_strings as getStrings} from 'core/str';\nimport {renderForPromise, replaceNodeContents} from 'core/templates';\nimport $ from 'jquery';\n\n// Define our standard lookups.\nconst selectors = {\n    component: '.user-search',\n    courseid: '[data-region=\"courseid\"]',\n    groupid: '[data-region=\"groupid\"]',\n    resetPageButton: '[data-action=\"resetpage\"]',\n};\nconst component = document.querySelector(selectors.component);\nconst courseID = component.querySelector(selectors.courseid).dataset.courseid;\nconst groupID = document.querySelector(selectors.groupid)?.dataset?.groupid;\nconst bannedFilterFields = ['profileimageurlsmall', 'profileimageurl', 'id', 'link', 'matchingField', 'matchingFieldName'];\n\nexport default class UserSearch extends TertiarySearchClass {\n\n    // A map of user profile field names that is human-readable.\n    profilestringmap = null;\n\n    constructor() {\n        super();\n        // Register a small click event onto the document since we need to check if they are clicking off the component.\n        document.addEventListener('click', (e) => {\n            // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n            if (!e.target.closest(this.selectors.component) && this.searchDropdown.classList.contains('show')) {\n                this.toggleDropdown();\n            }\n        });\n    }\n\n    static init() {\n        return new UserSearch();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setComponentSelector() {\n        return '.user-search';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    setDropdownSelector() {\n        return '.usersearchdropdown';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setTriggerSelector() {\n        return '.usersearchwidget';\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/search/resultset', {\n            users: this.getMatchedResults().slice(0, 5),\n            hasresults: this.getMatchedResults().length > 0,\n            matches: this.getMatchedResults().length,\n            searchterm: this.getSearchTerm(),\n            selectall: this.selectAllResultsLink(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    fetchDataset() {\n        // Small typing checks as sometimes groups don't exist therefore the element returns a empty string.\n        const gts = typeof (groupID) === \"string\" && groupID === '' ? 0 : groupID;\n        return Repository.userFetch(courseID, gts).then((r) => r.users);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} The users that match the given criteria.\n     */\n    async filterDataset(filterableData) {\n        return filterableData.filter((user) => Object.keys(user).some((key) => {\n            if (user[key] === \"\" || user[key] === null || bannedFilterFields.includes(key)) {\n                return false;\n            }\n            return user[key].toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        }));\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     *\n     * @returns {Array} The results with the matched fields inserted.\n     */\n    async filterMatchDataset() {\n        const stringMap = await this.getStringMap();\n        this.setMatchedResults(\n            this.getMatchedResults().map((user) => {\n                for (const [key, value] of Object.entries(user)) {\n                    // Sometimes users have null values in their profile fields.\n                    if (value === null) {\n                        continue;\n                    }\n                    const valueString = value.toString().toLowerCase();\n                    if (valueString.includes(this.getPreppedSearchTerm()) && !bannedFilterFields.includes(key)) {\n                        // Ensure we have a good string, otherwise fallback to the key.\n                        user.matchingFieldName = stringMap.get(key) ?? key;\n                        user.matchingField = valueString.replace(\n                            this.getPreppedSearchTerm(),\n                            `<span class=\"font-weight-bold\">${this.getSearchTerm()}</span>`\n                        );\n                        user.matchingField = `${user.matchingField} (${user.email})`;\n                        user.link = this.selectOneLink(user.id);\n                        break;\n                    }\n                }\n                return user;\n            })\n        );\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        super.clickHandler(e);\n        if (e.target.closest(this.selectors.component)) {\n            // Forcibly prevent BS events so that we can control the open and close.\n            // Really needed because by default input elements cant trigger a dropdown.\n            e.stopImmediatePropagation();\n        }\n        if (e.target === this.getHTMLElements().currentViewAll && e.button === 0) {\n            window.location = this.selectAllResultsLink();\n        }\n        if (e.target.closest(selectors.resetPageButton)) {\n            window.location = e.target.closest(selectors.resetPageButton).href;\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {KeyboardEvent} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        super.keyHandler(e);\n\n        if (e.target === this.getHTMLElements().currentViewAll && (e.key === 'Enter' || e.key === 'Space')) {\n            window.location = this.selectAllResultsLink();\n        }\n\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'Enter':\n            case ' ':\n                if (document.activeElement === this.getHTMLElements().searchInput) {\n                    if (e.key === 'Enter' && this.selectAllResultsLink() !== null) {\n                        window.location = this.selectAllResultsLink();\n                    }\n                }\n                if (document.activeElement === this.getHTMLElements().clearSearchButton) {\n                    this.closeSearch(true);\n                    break;\n                }\n                if (e.target.closest(selectors.resetPageButton)) {\n                    window.location = e.target.closest(selectors.resetPageButton).href;\n                    break;\n                }\n                if (e.target.closest('.dropdown-item')) {\n                    e.preventDefault();\n                    window.location = e.target.closest('.dropdown-item').href;\n                    break;\n                }\n                break;\n            case 'Escape':\n                this.toggleDropdown();\n                this.searchInput.focus({preventScroll: true});\n                break;\n            case 'Tab':\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(this.selectors.clearSearch)) {\n                    if (this.currentViewAll && !e.shiftKey) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        this.closeSearch();\n                    }\n                }\n                break;\n        }\n    }\n\n    /**\n     * When called, hide or show the users dropdown.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    toggleDropdown(on = false) {\n        if (on) {\n            this.searchDropdown.classList.add('show');\n            $(this.searchDropdown).show();\n            this.component.setAttribute('aria-expanded', 'true');\n        } else {\n            this.searchDropdown.classList.remove('show');\n            $(this.searchDropdown).hide();\n            this.component.setAttribute('aria-expanded', 'false');\n        }\n    }\n\n    /**\n     * Build up the view all link.\n     */\n    selectAllResultsLink() {\n        throw new Error(`selectAllResultsLink() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Build up the view all link that is dedicated to a particular result.\n     *\n     * @param {Number} userID The ID of the user selected.\n     */\n    selectOneLink(userID) {\n        throw new Error(`selectOneLink(${userID}) must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    getStringMap() {\n        if (!this.profilestringmap) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.profilestringmap = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.profilestringmap;\n    }\n}\n"],"names":["selectors","courseID","document","querySelector","dataset","courseid","groupID","_document$querySelect","_document$querySelect2","groupid","bannedFilterFields","UserSearch","TertiarySearchClass","constructor","addEventListener","e","target","closest","this","component","searchDropdown","classList","contains","toggleDropdown","setComponentSelector","setDropdownSelector","setTriggerSelector","html","js","users","getMatchedResults","slice","hasresults","length","matches","searchterm","getSearchTerm","selectall","selectAllResultsLink","getHTMLElements","fetchDataset","gts","Repository","userFetch","then","r","filterableData","filter","user","Object","keys","some","key","includes","toString","toLowerCase","getPreppedSearchTerm","stringMap","getStringMap","setMatchedResults","map","value","entries","valueString","matchingFieldName","get","matchingField","replace","email","link","selectOneLink","id","clickHandler","stopImmediatePropagation","currentViewAll","button","window","location","href","keyHandler","activeElement","searchInput","clearSearchButton","closeSearch","preventDefault","focus","preventScroll","clearSearch","shiftKey","add","show","setAttribute","remove","hide","Error","name","userID","profilestringmap","requiredStrings","stringArray","Map","index"],"mappings":"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"}