{"version":3,"file":"statemanager.min.js","sources":["../../../src/local/reactive/statemanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive simple state manager.\n *\n * The state manager contains the state data, trigger update events and\n * can lock and unlock the state data.\n *\n * This file contains the three main elements of the state manager:\n * - State manager: the public class to alter the state, dispatch events and process update messages.\n * - Proxy handler: a private class to keep track of the state object changes.\n * - StateMap class: a private class extending Map class that triggers event when a state list is modifed.\n *\n * @module     core/local/reactive/stateManager\n * @class     core/local/reactive/stateManager\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * State manager class.\n *\n * This class handle the reactive state and ensure only valid mutations can modify the state.\n * It also provide methods to apply batch state update messages (see processUpdates function doc\n * for more details on update messages).\n *\n * Implementing a deep state manager is complex and will require many frontend resources. To keep\n * the state fast and simple, the state can ONLY store two kind of data:\n *  - Object with attributes\n *  - Sets of objects with id attributes.\n *\n * This is an example of a valid state:\n *\n * {\n *  course: {\n *      name: 'course name',\n *      shortname: 'courseshort',\n *      sectionlist: [21, 34]\n *  },\n *  sections: [\n *      {id: 21, name: 'Topic 1', visible: true},\n *      {id: 34, name: 'Topic 2', visible: false,\n *  ],\n * }\n *\n * The following cases are NOT allowed at a state ROOT level (throws an exception if they are assigned):\n *  - Simple values (strings, boolean...).\n *  - Arrays of simple values.\n *  - Array of objects without ID attribute (all arrays will be converted to maps and requires an ID).\n *\n * Thanks to those limitations it can simplify the state update messages and the event names. If You\n * need to store simple data, just group them in an object.\n *\n * To grant any state change triggers the proper events, the class uses two private structures:\n * - proxy handler: any object stored in the state is proxied using this class.\n * - StateMap class: any object set in the state will be converted to StateMap using the\n *   objects id attribute.\n */\nexport default class StateManager {\n\n    /**\n     * Create a basic reactive state store.\n     *\n     * The state manager is meant to work with native JS events. To ensure each reactive module can use\n     * it in its own way, the parent element must provide a valid event dispatcher function and an optional\n     * DOM element to anchor the event.\n     *\n     * @param {function} dispatchEvent the function to dispatch the custom event when the state changes.\n     * @param {element} target the state changed custom event target (document if none provided)\n     */\n    constructor(dispatchEvent, target) {\n\n        // The dispatch event function.\n        /** @package */\n        this.dispatchEvent = dispatchEvent;\n\n        // The DOM container to trigger events.\n        /** @package */\n        this.target = target ?? document;\n\n        // State can be altered freely until initial state is set.\n        /** @package */\n        this.readonly = false;\n\n        // List of state changes pending to be published as events.\n        /** @package */\n        this.eventsToPublish = [];\n\n        // The update state types functions.\n        /** @package */\n        this.updateTypes = {\n            \"create\": this.defaultCreate.bind(this),\n            \"update\": this.defaultUpdate.bind(this),\n            \"delete\": this.defaultDelete.bind(this),\n            \"put\": this.defaultPut.bind(this),\n            \"override\": this.defaultOverride.bind(this),\n            \"remove\": this.defaultRemove.bind(this),\n            \"prepareFields\": this.defaultPrepareFields.bind(this),\n        };\n\n        // The state_loaded event is special because it only happens one but all components\n        // may react to that state, even if they are registered after the setIinitialState.\n        // For these reason we use a promise for that event.\n        this.initialPromise = new Promise((resolve) => {\n            const initialStateDone = (event) => {\n                resolve(event.detail.state);\n            };\n            this.target.addEventListener('state:loaded', initialStateDone);\n        });\n    }\n\n    /**\n     * Loads the initial state.\n     *\n     * Note this method will trigger a state changed event with \"state:loaded\" actionname.\n     *\n     * The state mode will be set to read only when the initial state is loaded.\n     *\n     * @param {object} initialState\n     */\n    setInitialState(initialState) {\n\n        if (this.state !== undefined) {\n            throw Error('Initial state can only be initialized ones');\n        }\n\n        // Create the state object.\n        const state = new Proxy({}, new Handler('state', this, true));\n        for (const [prop, propValue] of Object.entries(initialState)) {\n            state[prop] = propValue;\n        }\n        this.state = state;\n\n        // When the state is loaded we can lock it to prevent illegal changes.\n        this.readonly = true;\n\n        this.dispatchEvent({\n            action: 'state:loaded',\n            state: this.state,\n        }, this.target);\n    }\n\n    /**\n     * Generate a promise that will be resolved when the initial state is loaded.\n     *\n     * In most cases the final state will be loaded using an ajax call. This is the reason\n     * why states manager are created unlocked and won't be reactive until the initial state is set.\n     *\n     * @return {Promise} the resulting promise\n     */\n    getInitialPromise() {\n        return this.initialPromise;\n    }\n\n    /**\n     * Locks or unlocks the state to prevent illegal updates.\n     *\n     * Mutations use this method to modify the state. Once the state is updated, they must\n     * block again the state.\n     *\n     * All changes done while the state is writable will be registered using registerStateAction.\n     * When the state is set again to read only the method will trigger _publishEvents to communicate\n     * changes to all watchers.\n     *\n     * @param {bool} readonly if the state is in read only mode enabled\n     */\n    setReadOnly(readonly) {\n\n        this.readonly = readonly;\n\n        let mode = 'off';\n\n        // When the state is in readonly again is time to publish all pending events.\n        if (this.readonly) {\n            mode = 'on';\n            this._publishEvents();\n        }\n\n        // Dispatch a read only event.\n        this.dispatchEvent({\n            action: `readmode:${mode}`,\n            state: this.state,\n            element: null,\n        }, this.target);\n    }\n\n    /**\n     * Add methods to process update state messages.\n     *\n     * The state manager provide a default update, create and delete methods. However,\n     * some applications may require to override the default methods or even add new ones\n     * like \"refresh\" or \"error\".\n     *\n     * @param {Object} newFunctions the new update types functions.\n     */\n    addUpdateTypes(newFunctions) {\n        for (const [updateType, updateFunction] of Object.entries(newFunctions)) {\n            if (typeof updateFunction === 'function') {\n                this.updateTypes[updateType] = updateFunction.bind(newFunctions);\n            }\n        }\n    }\n\n    /**\n     * Process a state updates array and do all the necessary changes.\n     *\n     * Note this method unlocks the state while it is executing and relocks it\n     * when finishes.\n     *\n     * @param {array} updates\n     * @param {Object} updateTypes optional functions to override the default update types.\n     */\n    processUpdates(updates, updateTypes) {\n        if (!Array.isArray(updates)) {\n            throw Error('State updates must be an array');\n        }\n        this.setReadOnly(false);\n        updates.forEach((update) => {\n            if (update.name === undefined) {\n                throw Error('Missing state update name');\n            }\n            this.processUpdate(\n                update.name,\n                update.action,\n                update.fields,\n                updateTypes\n            );\n        });\n        this.setReadOnly(true);\n    }\n\n    /**\n     * Process a single state update.\n     *\n     * Note this method will not lock or unlock the state by itself.\n     *\n     * @param {string} updateName the state element to update\n     * @param {string} action to action to perform\n     * @param {object} fields the new data\n     * @param {Object} updateTypes optional functions to override the default update types.\n     */\n    processUpdate(updateName, action, fields, updateTypes) {\n\n        if (!fields) {\n            throw Error('Missing state update fields');\n        }\n\n        if (updateTypes === undefined) {\n            updateTypes = {};\n        }\n\n        action = action ?? 'update';\n\n        const method = updateTypes[action] ?? this.updateTypes[action];\n\n        if (method === undefined) {\n            throw Error(`Unkown update action ${action}`);\n        }\n\n        // Some state data may require some cooking before sending to the\n        // state. Reactive instances can overrdide the default fieldDefaults\n        // method to add extra logic to all updates.\n        const prepareFields = updateTypes.prepareFields ?? this.updateTypes.prepareFields;\n\n        method(this, updateName, prepareFields(this, updateName, fields));\n    }\n\n    /**\n     * Prepare fields for processing.\n     *\n     * This method is used to add default values or calculations from the frontend side.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    defaultPrepareFields(stateManager, updateName, fields) {\n        return fields;\n    }\n\n\n    /**\n     * Process a create state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     */\n    defaultCreate(stateManager, updateName, fields) {\n\n        let state = stateManager.state;\n\n        // Create can be applied only to lists, not to objects.\n        if (state[updateName] instanceof StateMap) {\n            state[updateName].add(fields);\n            return;\n        }\n        state[updateName] = fields;\n    }\n\n    /**\n     * Process a delete state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     */\n    defaultDelete(stateManager, updateName, fields) {\n\n        // Get the current value.\n        let current = stateManager.get(updateName, fields.id);\n        if (!current) {\n            throw Error(`Inexistent ${updateName} ${fields.id}`);\n        }\n\n        // Process deletion.\n        let state = stateManager.state;\n\n        if (state[updateName] instanceof StateMap) {\n            state[updateName].delete(fields.id);\n            return;\n        }\n        delete state[updateName];\n    }\n\n    /**\n     * Process a remove state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     */\n    defaultRemove(stateManager, updateName, fields) {\n\n        // Get the current value.\n        let current = stateManager.get(updateName, fields.id);\n        if (!current) {\n            return;\n        }\n\n        // Process deletion.\n        let state = stateManager.state;\n\n        if (state[updateName] instanceof StateMap) {\n            state[updateName].delete(fields.id);\n            return;\n        }\n        delete state[updateName];\n    }\n\n    /**\n     * Process a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     */\n    defaultUpdate(stateManager, updateName, fields) {\n\n        // Get the current value.\n        let current = stateManager.get(updateName, fields.id);\n        if (!current) {\n            throw Error(`Inexistent ${updateName} ${fields.id}`);\n        }\n\n        // Execute updates.\n        for (const [fieldName, fieldValue] of Object.entries(fields)) {\n            current[fieldName] = fieldValue;\n        }\n    }\n\n    /**\n     * Process a put state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     */\n    defaultPut(stateManager, updateName, fields) {\n\n        // Get the current value.\n        let current = stateManager.get(updateName, fields.id);\n        if (current) {\n            // Update attributes.\n            for (const [fieldName, fieldValue] of Object.entries(fields)) {\n                current[fieldName] = fieldValue;\n            }\n        } else {\n            // Create new object.\n            let state = stateManager.state;\n            if (state[updateName] instanceof StateMap) {\n                state[updateName].add(fields);\n                return;\n            }\n            state[updateName] = fields;\n        }\n    }\n\n    /**\n     * Process an override state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     */\n    defaultOverride(stateManager, updateName, fields) {\n\n        // Get the current value.\n        let current = stateManager.get(updateName, fields.id);\n        if (current) {\n            // Remove any unnecessary fields.\n            for (const [fieldName] of Object.entries(current)) {\n                if (fields[fieldName] === undefined) {\n                    delete current[fieldName];\n                }\n            }\n            // Update field.\n            for (const [fieldName, fieldValue] of Object.entries(fields)) {\n                current[fieldName] = fieldValue;\n            }\n        } else {\n            // Create the element if not exists.\n            let state = stateManager.state;\n            if (state[updateName] instanceof StateMap) {\n                state[updateName].add(fields);\n                return;\n            }\n            state[updateName] = fields;\n        }\n    }\n\n    /**\n     * Get an element from the state or form an alternative state object.\n     *\n     * The altstate param is used by external update functions that gets the current\n     * state as param.\n     *\n     * @param {String} name the state object name\n     * @param {*} id and object id for state maps.\n     * @return {Object|undefined} the state object found\n     */\n    get(name, id) {\n        const state = this.state;\n\n        let current = state[name];\n        if (current instanceof StateMap) {\n            if (id === undefined) {\n                throw Error(`Missing id for ${name} state update`);\n            }\n            current = state[name].get(id);\n        }\n\n        return current;\n    }\n\n    /**\n     * Register a state modification and generate the necessary events.\n     *\n     * This method is used mainly by proxy helpers to dispatch state change event.\n     * However, mutations can use it to inform components about non reactive changes\n     * in the state (only the two first levels of the state are reactive).\n     *\n     * Each action can produce several events:\n     * - The specific attribute updated, created or deleter (example: \"cm.visible:updated\")\n     * - The general state object updated, created or deleted (example: \"cm:updated\")\n     * - If the element has an ID attribute, the specific event with id (example: \"cm[42].visible:updated\")\n     * - If the element has an ID attribute, the general event with id (example: \"cm[42]:updated\")\n     * - A generic state update event \"state:update\"\n     *\n     * @param {string} field the affected state field name\n     * @param {string|null} prop the affecter field property (null if affect the full object)\n     * @param {string} action the action done (created/updated/deleted)\n     * @param {*} data the affected data\n     */\n    registerStateAction(field, prop, action, data) {\n\n        let parentAction = 'updated';\n\n        if (prop !== null) {\n            this.eventsToPublish.push({\n                eventName: `${field}.${prop}:${action}`,\n                eventData: data,\n                action,\n            });\n        } else {\n            parentAction = action;\n        }\n\n        // Trigger extra events if the element has an ID attribute.\n        if (data.id !== undefined) {\n            if (prop !== null) {\n                this.eventsToPublish.push({\n                    eventName: `${field}[${data.id}].${prop}:${action}`,\n                    eventData: data,\n                    action,\n                });\n            }\n            this.eventsToPublish.push({\n                eventName: `${field}[${data.id}]:${parentAction}`,\n                eventData: data,\n                action: parentAction,\n            });\n        }\n\n        // Register the general change.\n        this.eventsToPublish.push({\n            eventName: `${field}:${parentAction}`,\n            eventData: data,\n            action: parentAction,\n        });\n\n        // Register state updated event.\n        this.eventsToPublish.push({\n            eventName: `state:updated`,\n            eventData: data,\n            action: 'updated',\n        });\n    }\n\n    /**\n     * Internal method to publish events.\n     *\n     * This is a private method, it will be invoked when the state is set back to read only mode.\n     */\n    _publishEvents() {\n        const fieldChanges = this.eventsToPublish;\n        this.eventsToPublish = [];\n\n        // Dispatch a transaction start event.\n        this.dispatchEvent({\n            action: 'transaction:start',\n            state: this.state,\n            element: null,\n            changes: fieldChanges,\n        }, this.target);\n\n        // State changes can be registered in any order. However it will avoid many\n        // components errors if they are sorted to have creations-updates-deletes in case\n        // some component needs to create or destroy DOM elements before updating them.\n        fieldChanges.sort((a, b) => {\n            const weights = {\n                created: 0,\n                updated: 1,\n                deleted: 2,\n            };\n            const aweight = weights[a.action] ?? 0;\n            const bweight = weights[b.action] ?? 0;\n            // In case both have the same weight, the eventName length decide.\n            if (aweight === bweight) {\n                return a.eventName.length - b.eventName.length;\n            }\n            return aweight - bweight;\n        });\n\n        // List of the published events to prevent redundancies.\n        let publishedEvents = new Set();\n\n        fieldChanges.forEach((event) => {\n\n            const eventkey = `${event.eventName}.${event.eventData.id ?? 0}`;\n\n            if (!publishedEvents.has(eventkey)) {\n                this.dispatchEvent({\n                    action: event.eventName,\n                    state: this.state,\n                    element: event.eventData\n                }, this.target);\n\n                publishedEvents.add(eventkey);\n            }\n        });\n\n        // Dispatch a transaction end event.\n        this.dispatchEvent({\n            action: 'transaction:end',\n            state: this.state,\n            element: null,\n        }, this.target);\n    }\n}\n\n// Proxy helpers.\n\n/**\n * The proxy handler.\n *\n * This class will inform any value change directly to the state manager.\n *\n * The proxied variable will throw an error if it is altered when the state manager is\n * in read only mode.\n */\nclass Handler {\n\n    /**\n     * Class constructor.\n     *\n     * @param {string} name the variable name used for identify triggered actions\n     * @param {StateManager} stateManager the state manager object\n     * @param {boolean} proxyValues if new values must be proxied (used only at state root level)\n     */\n    constructor(name, stateManager, proxyValues) {\n        this.name = name;\n        this.stateManager = stateManager;\n        this.proxyValues = proxyValues ?? false;\n    }\n\n    /**\n     * Set trap to trigger events when the state changes.\n     *\n     * @param {object} obj the source object (not proxied)\n     * @param {string} prop the attribute to set\n     * @param {*} value the value to save\n     * @param {*} receiver the proxied element to be attached to events\n     * @returns {boolean} if the value is set\n     */\n    set(obj, prop, value, receiver) {\n\n        // Only mutations should be able to set state values.\n        if (this.stateManager.readonly) {\n            throw new Error(`State locked. Use mutations to change ${prop} value in ${this.name}.`);\n        }\n\n        // Check any data change.\n        if (JSON.stringify(obj[prop]) === JSON.stringify(value)) {\n            return true;\n        }\n\n        const action = (obj[prop] !== undefined) ? 'updated' : 'created';\n\n        // Proxy value if necessary (used at state root level).\n        if (this.proxyValues) {\n            if (Array.isArray(value)) {\n                obj[prop] = new StateMap(prop, this.stateManager).loadValues(value);\n            } else {\n                obj[prop] = new Proxy(value, new Handler(prop, this.stateManager));\n            }\n        } else {\n            obj[prop] = value;\n        }\n\n        // If the state is not ready yet means the initial state is not yet loaded.\n        if (this.stateManager.state === undefined) {\n            return true;\n        }\n\n        this.stateManager.registerStateAction(this.name, prop, action, receiver);\n\n        return true;\n    }\n\n    /**\n     * Delete property trap to trigger state change events.\n     *\n     * @param {*} obj the affected object (not proxied)\n     * @param {*} prop the prop to delete\n     * @returns {boolean} if prop is deleted\n     */\n    deleteProperty(obj, prop) {\n        // Only mutations should be able to set state values.\n        if (this.stateManager.readonly) {\n            throw new Error(`State locked. Use mutations to delete ${prop} in ${this.name}.`);\n        }\n        if (prop in obj) {\n\n            delete obj[prop];\n\n            this.stateManager.registerStateAction(this.name, prop, 'deleted', obj);\n        }\n        return true;\n    }\n}\n\n/**\n * Class to add events dispatching to the JS Map class.\n *\n * When the state has a list of objects (with IDs) it will be converted into a StateMap.\n * StateMap is used almost in the same way as a regular JS map. Because all elements have an\n * id attribute, it has some specific methods:\n *  - add: a convenient method to add an element without specifying the key (\"id\" attribute will be used as a key).\n *  - loadValues: to add many elements at once wihout specifying keys (\"id\" attribute will be used).\n *\n * Apart, the main difference between regular Map and MapState is that this one will inform any change to the\n * state manager.\n */\nclass StateMap extends Map {\n\n    /**\n     * Create a reactive Map.\n     *\n     * @param {string} name the property name\n     * @param {StateManager} stateManager the state manager\n     * @param {iterable} iterable an iterable object to create the Map\n     */\n    constructor(name, stateManager, iterable) {\n        // We don't have any \"this\" until be call super.\n        super(iterable);\n        this.name = name;\n        this.stateManager = stateManager;\n    }\n\n    /**\n     * Set an element into the map.\n     *\n     * Each value needs it's own id attribute. Objects without id will be rejected.\n     * The function will throw an error if the value id and the key are not the same.\n     *\n     * @param {*} key the key to store\n     * @param {*} value the value to store\n     * @returns {Map} the resulting Map object\n     */\n    set(key, value) {\n\n        // Only mutations should be able to set state values.\n        if (this.stateManager.readonly) {\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\n        }\n\n        // Normalize keys as string to prevent json decoding errors.\n        key = this.normalizeKey(key);\n\n        this.checkValue(value);\n\n        if (key === undefined || key === null) {\n            throw Error('State lists keys cannot be null or undefined');\n        }\n\n        // ID is mandatory and should be the same as the key.\n        if (this.normalizeKey(value.id) !== key) {\n            throw new Error(`State error: ${this.name} list element ID (${value.id}) and key (${key}) mismatch`);\n        }\n\n        const action = (super.has(key)) ? 'updated' : 'created';\n\n        // Save proxied data into the list.\n        const result = super.set(key, new Proxy(value, new Handler(this.name, this.stateManager)));\n\n        // If the state is not ready yet means the initial state is not yet loaded.\n        if (this.stateManager.state === undefined) {\n            return result;\n        }\n\n        this.stateManager.registerStateAction(this.name, null, action, super.get(key));\n\n        return result;\n    }\n\n    /**\n     * Check if a value is valid to be stored in a a State List.\n     *\n     * Only objects with id attribute can be stored in State lists.\n     *\n     * This method throws an error if the value is not valid.\n     *\n     * @param {object} value (with ID)\n     */\n    checkValue(value) {\n        if (!typeof value === 'object' && value !== null) {\n            throw Error('State lists can contain objects only');\n        }\n\n        if (value.id === undefined) {\n            throw Error('State lists elements must contain at least an id attribute');\n        }\n    }\n\n    /**\n     * Return a normalized key value for state map.\n     *\n     * Regular maps uses strict key comparissons but state maps are indexed by ID.JSON conversions\n     * and webservices sometimes do unexpected types conversions so we convert any integer key to string.\n     *\n     * @param {*} key the provided key\n     * @returns {string}\n     */\n    normalizeKey(key) {\n        return String(key).valueOf();\n    }\n\n    /**\n     * Insert a new element int a list.\n     *\n     * Each value needs it's own id attribute. Objects withouts id will be rejected.\n     *\n     * @param {object} value the value to add (needs an id attribute)\n     * @returns {Map} the resulting Map object\n     */\n    add(value) {\n        this.checkValue(value);\n        return this.set(value.id, value);\n    }\n\n    /**\n     * Return a state map element.\n     *\n     * @param {*} key the element id\n     * @return {Object}\n     */\n    get(key) {\n        return super.get(this.normalizeKey(key));\n    }\n\n    /**\n     * Check whether an element with the specified key exists or not.\n     *\n     * @param {*} key the key to find\n     * @return {boolean}\n     */\n    has(key) {\n        return super.has(this.normalizeKey(key));\n    }\n\n    /**\n     * Delete an element from the map.\n     *\n     * @param {*} key\n     * @returns {boolean}\n     */\n    delete(key) {\n        // State maps uses only string keys to avoid strict comparisons.\n        key = this.normalizeKey(key);\n\n        // Only mutations should be able to set state values.\n        if (this.stateManager.readonly) {\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\n        }\n\n        const previous = super.get(key);\n\n        const result = super.delete(key);\n        if (!result) {\n            return result;\n        }\n\n        this.stateManager.registerStateAction(this.name, null, 'deleted', previous);\n\n        return result;\n    }\n\n    /**\n     * Return a suitable structure for JSON conversion.\n     *\n     * This function is needed because new values are compared in JSON. StateMap has Private\n     * attributes which cannot be stringified (like this.stateManager which will produce an\n     * infinite recursivity).\n     *\n     * @returns {array}\n     */\n    toJSON() {\n        let result = [];\n        this.forEach((value) => {\n            result.push(value);\n        });\n        return result;\n    }\n\n    /**\n     * Insert a full list of values using the id attributes as keys.\n     *\n     * This method is used mainly to initialize the list. Note each element is indexed by its \"id\" attribute.\n     * This is a basic restriction of StateMap. All elements need an id attribute, otherwise it won't be saved.\n     *\n     * @param {iterable} values the values to load\n     * @returns {StateMap} return the this value\n     */\n    loadValues(values) {\n        values.forEach((data) => {\n            this.checkValue(data);\n            let key = data.id;\n            let newvalue = new Proxy(data, new Handler(this.name, this.stateManager));\n            this.set(key, newvalue);\n        });\n        return this;\n    }\n}\n"],"names":["StateManager","dispatchEvent","target","_this","this","_classCallCheck","document","readonly","eventsToPublish","updateTypes","create","defaultCreate","bind","update","defaultUpdate","delete","defaultDelete","put","defaultPut","override","defaultOverride","remove","defaultRemove","prepareFields","defaultPrepareFields","initialPromise","Promise","resolve","addEventListener","event","detail","state","_createClass","key","value","initialState","undefined","Error","Proxy","Handler","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","prop","propValue","action","mode","_publishEvents","concat","element","newFunctions","_i2","_Object$entries2","_Object$entries2$_i","updateType","updateFunction","updates","_this2","Array","isArray","setReadOnly","forEach","name","processUpdate","fields","updateName","_action","_updateTypes$action","_updateTypes$prepareF","method","stateManager","StateMap","add","get","id","current","_i3","_Object$entries3","_Object$entries3$_i","fieldName","fieldValue","_i4","_Object$entries4","_Object$entries4$_i","_i5","_Object$entries5","_i6","_Object$entries6","_Object$entries6$_i","field","data","parentAction","push","eventName","eventData","_this3","fieldChanges","changes","sort","a","b","_weights$a$action","_weights$b$action","weights","created","updated","deleted","aweight","bweight","publishedEvents","Set","_event$eventData$id","eventkey","has","_exports","default","proxyValues","obj","receiver","JSON","stringify","loadValues","registerStateAction","_Map","_inherits","_super","iterable","_this4","call","normalizeKey","checkValue","_get","_getPrototypeOf","prototype","result","_typeof","String","valueOf","set","previous","values","_this5","newvalue","_wrapNativeSuper","Map"],"mappings":"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"}