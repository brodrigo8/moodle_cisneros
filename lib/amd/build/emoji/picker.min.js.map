{"version":3,"file":"picker.min.js","sources":["../../src/emoji/picker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Emoji picker.\n *\n * @module core/emoji/picker\n * @copyright  2019 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport LocalStorage from 'core/localstorage';\nimport * as EmojiData from 'core/emoji/data';\nimport {throttle, debounce} from 'core/utils';\nimport {get_string as getString} from 'core/str';\nimport {render as renderTemplate} from 'core/templates';\n\nconst VISIBLE_ROW_COUNT = 10;\nconst ROW_RENDER_BUFFER_COUNT = 5;\nconst RECENT_EMOJIS_STORAGE_KEY = 'moodle-recent-emojis';\nconst ROW_HEIGHT_RAW = 40;\nconst EMOJIS_PER_ROW = 7;\nconst MAX_RECENT_COUNT = EMOJIS_PER_ROW * 3;\nconst ROW_TYPE = {\n    EMOJI: 0,\n    HEADER: 1\n};\nconst SELECTORS = {\n    CATEGORY_SELECTOR: '[data-action=\"show-category\"]',\n    EMOJIS_CONTAINER: '[data-region=\"emojis-container\"]',\n    EMOJI_PREVIEW: '[data-region=\"emoji-preview\"]',\n    EMOJI_SHORT_NAME: '[data-region=\"emoji-short-name\"]',\n    ROW_CONTAINER: '[data-region=\"row-container\"]',\n    SEARCH_INPUT: '[data-region=\"search-input\"]',\n    SEARCH_RESULTS_CONTAINER: '[data-region=\"search-results-container\"]'\n};\n\n/**\n * Create the row data for a category.\n *\n * @method\n * @param {String} categoryName The category name\n * @param {String} categoryDisplayName The category display name\n * @param {Array} emojis The emoji data\n * @param {Number} totalRowCount The total number of rows generated so far\n * @return {Array}\n */\nconst createRowDataForCategory = (categoryName, categoryDisplayName, emojis, totalRowCount) => {\n    const rowData = [];\n    rowData.push({\n        index: totalRowCount + rowData.length,\n        type: ROW_TYPE.HEADER,\n        data: {\n            name: categoryName,\n            displayName: categoryDisplayName\n        }\n    });\n\n    for (let i = 0; i < emojis.length; i += EMOJIS_PER_ROW) {\n        const rowEmojis = emojis.slice(i, i + EMOJIS_PER_ROW);\n        rowData.push({\n            index: totalRowCount + rowData.length,\n            type: ROW_TYPE.EMOJI,\n            data: rowEmojis\n        });\n    }\n\n    return rowData;\n};\n\n/**\n * Add each row's index to it's value in the row data.\n *\n * @method\n * @param {Array} rowData List of emoji row data\n * @return {Array}\n */\nconst addIndexesToRowData = (rowData) => {\n    return rowData.map((data, index) => {\n        return {...data, index};\n    });\n};\n\n/**\n * Calculate the scroll position for the beginning of each category from\n * the row data.\n *\n * @method\n * @param {Array} rowData List of emoji row data\n * @return {Object}\n */\nconst getCategoryScrollPositionsFromRowData = (rowData) => {\n    return rowData.reduce((carry, row, index) => {\n        if (row.type === ROW_TYPE.HEADER) {\n            carry[row.data.name] = index * ROW_HEIGHT_RAW;\n        }\n        return carry;\n    }, {});\n};\n\n/**\n * Create a header row element for the category name.\n *\n * @method\n * @param {Number} rowIndex Index of the row in the row data\n * @param {String} name The category display name\n * @return {Element}\n */\nconst createHeaderRow = async(rowIndex, name) => {\n    const context = {\n        index: rowIndex,\n        text: name\n    };\n    const html = await renderTemplate('core/emoji/header_row', context);\n    const temp = document.createElement('div');\n    temp.innerHTML = html;\n    return temp.firstChild;\n};\n\n/**\n * Create an emoji row element.\n *\n * @method\n * @param {Number} rowIndex Index of the row in the row data\n * @param {Array} emojis The list of emoji data for the row\n * @return {Element}\n */\nconst createEmojiRow = async(rowIndex, emojis) => {\n    const context = {\n        index: rowIndex,\n        emojis: emojis.map(emojiData => {\n            const charCodes = emojiData.unified.split('-').map(code => `0x${code}`);\n            const emojiText = String.fromCodePoint.apply(null, charCodes);\n            return {\n                shortnames: `:${emojiData.shortnames.join(': :')}:`,\n                unified: emojiData.unified,\n                text: emojiText,\n                spacer: false\n            };\n        }),\n        spacers: Array(EMOJIS_PER_ROW - emojis.length).fill(true)\n    };\n    const html = await renderTemplate('core/emoji/emoji_row', context);\n    const temp = document.createElement('div');\n    temp.innerHTML = html;\n    return temp.firstChild;\n};\n\n/**\n * Check if the element is an emoji element.\n *\n * @method\n * @param {Element} element Element to check\n * @return {Bool}\n */\nconst isEmojiElement = element => element.getAttribute('data-short-names') !== null;\n\n/**\n * Search from an element and up through it's ancestors to fine the category\n * selector element and return it.\n *\n * @method\n * @param {Element} element Element to begin searching from\n * @return {Element|null}\n */\nconst findCategorySelectorFromElement = element => {\n    if (!element) {\n        return null;\n    }\n\n    if (element.getAttribute('data-action') === 'show-category') {\n        return element;\n    } else {\n        return findCategorySelectorFromElement(element.parentElement);\n    }\n};\n\nconst getCategorySelectorByCategoryName = (root, name) => {\n    return root.querySelector(`[data-category=\"${name}\"]`);\n};\n\n/**\n * Sets the given category selector element as active.\n *\n * @method\n * @param {Element} root The root picker element\n * @param {Element} element The category selector element to make active\n */\nconst setCategorySelectorActive = (root, element) => {\n    const allCategorySelectors = root.querySelectorAll(SELECTORS.CATEGORY_SELECTOR);\n\n    for (let i = 0; i < allCategorySelectors.length; i++) {\n        const selector = allCategorySelectors[i];\n        selector.classList.remove('selected');\n    }\n\n    element.classList.add('selected');\n};\n\n/**\n * Get the category selector element and the scroll positions for the previous and\n * next categories for the given scroll position.\n *\n * @method\n * @param {Element} root The picker root element\n * @param {Number} position The position to get the category for\n * @param {Object} categoryScrollPositions Set of scroll positions for all categories\n * @return {Array}\n */\nconst getCategoryByScrollPosition = (root, position, categoryScrollPositions) => {\n    let positions = [];\n\n    if (position < 0) {\n        position = 0;\n    }\n\n    // Get all of the category positions.\n    for (const categoryName in categoryScrollPositions) {\n        const categoryPosition = categoryScrollPositions[categoryName];\n        positions.push([categoryPosition, categoryName]);\n    }\n\n    // Sort the positions in ascending order.\n    positions.sort(([a], [b]) => {\n        if (a < b) {\n            return -1;\n        } else if (a > b) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n\n    // Get the current category name as well as the previous and next category\n    // positions from the sorted list of positions.\n    const {categoryName, previousPosition, nextPosition} = positions.reduce(\n        (carry, candidate) => {\n            const [categoryPosition, categoryName] = candidate;\n\n            if (categoryPosition <= position) {\n                carry.categoryName = categoryName;\n                carry.previousPosition = carry.currentPosition;\n                carry.currentPosition = position;\n            } else if (carry.nextPosition === null) {\n                carry.nextPosition = categoryPosition;\n            }\n\n            return carry;\n        },\n        {\n            categoryName: null,\n            currentPosition: null,\n            previousPosition: null,\n            nextPosition: null\n        }\n    );\n\n    return [getCategorySelectorByCategoryName(root, categoryName), previousPosition, nextPosition];\n};\n\n/**\n * Get the list of recent emojis data from local storage.\n *\n * @method\n * @return {Array}\n */\nconst getRecentEmojis = () => {\n    const storedData = LocalStorage.get(RECENT_EMOJIS_STORAGE_KEY);\n    return storedData ? JSON.parse(storedData) : [];\n};\n\n/**\n * Save the list of recent emojis in local storage.\n *\n * @method\n * @param {Array} recentEmojis List of emoji data to save\n */\nconst saveRecentEmoji = (recentEmojis) => {\n    LocalStorage.set(RECENT_EMOJIS_STORAGE_KEY, JSON.stringify(recentEmojis));\n};\n\n/**\n * Add an emoji data to the set of recent emojis. This function will update the row\n * data to ensure that the recent emoji rows are correct and all of the rows are\n * re-indexed.\n *\n * The new set of recent emojis are saved in local storage and the full set of updated\n * row data and new emoji row count are returned.\n *\n * @method\n * @param {Array} rowData The emoji rows data\n * @param {Number} recentEmojiRowCount Count of the recent emoji rows\n * @param {Object} newEmoji The emoji data for the emoji to add to the recent emoji list\n * @return {Array}\n */\nconst addRecentEmoji = (rowData, recentEmojiRowCount, newEmoji) => {\n    // The first set of rows is always the recent emojis.\n    const categoryName = rowData[0].data.name;\n    const categoryDisplayName = rowData[0].data.displayName;\n    const recentEmojis = getRecentEmojis();\n    // Add the new emoji to the start of the list of recent emojis.\n    let newRecentEmojis = [newEmoji, ...recentEmojis.filter(emoji => emoji.unified != newEmoji.unified)];\n    // Limit the number of recent emojis.\n    newRecentEmojis = newRecentEmojis.slice(0, MAX_RECENT_COUNT);\n    const newRecentEmojiRowData = createRowDataForCategory(categoryName, categoryDisplayName, newRecentEmojis);\n\n    // Save the new list in local storage.\n    saveRecentEmoji(newRecentEmojis);\n\n    return [\n        // Return the new rowData and re-index it to make sure it's all correct.\n        addIndexesToRowData(newRecentEmojiRowData.concat(rowData.slice(recentEmojiRowCount))),\n        newRecentEmojiRowData.length\n    ];\n};\n\n/**\n * Calculate which rows should be visible based on the given scroll position. Adds a\n * buffer to amount to either side of the total number of requested rows so that\n * scrolling the emoji rows container is smooth.\n *\n * @method\n * @param {Number} scrollPosition Scroll position within the emoji container\n * @param {Number} visibleRowCount How many rows should be visible\n * @param {Array} rowData The emoji rows data\n * @return {Array}\n */\nconst getRowsToRender = (scrollPosition, visibleRowCount, rowData) => {\n    const minVisibleRow = scrollPosition > ROW_HEIGHT_RAW ? Math.floor(scrollPosition / ROW_HEIGHT_RAW) : 0;\n    const start = minVisibleRow >= ROW_RENDER_BUFFER_COUNT ? minVisibleRow - ROW_RENDER_BUFFER_COUNT : minVisibleRow;\n    const end = minVisibleRow + visibleRowCount + ROW_RENDER_BUFFER_COUNT;\n    const rows = rowData.slice(start, end);\n    return rows;\n};\n\n/**\n * Create a row element from the row data.\n *\n * @method\n * @param {Object} rowData The emoji row data\n * @return {Element}\n */\nconst createRowElement = async(rowData) => {\n    let row = null;\n    if (rowData.type === ROW_TYPE.HEADER) {\n        row = await createHeaderRow(rowData.index, rowData.data.displayName);\n    } else {\n        row = await createEmojiRow(rowData.index, rowData.data);\n    }\n\n    row.style.position = 'absolute';\n    row.style.left = 0;\n    row.style.right = 0;\n    row.style.top = `${rowData.index * ROW_HEIGHT_RAW}px`;\n\n    return row;\n};\n\n/**\n * Check if the given rows match.\n *\n * @method\n * @param {Object} a The first row\n * @param {Object} b The second row\n * @return {Bool}\n */\nconst doRowsMatch = (a, b) => {\n    if (a.index !== b.index) {\n        return false;\n    }\n\n    if (a.type !== b.type) {\n        return false;\n    }\n\n    if (typeof a.data != typeof b.data) {\n        return false;\n    }\n\n    if (a.type === ROW_TYPE.HEADER) {\n        return a.data.name === b.data.name;\n    } else {\n        if (a.data.length !== b.data.length) {\n            return false;\n        }\n\n        for (let i = 0; i < a.data.length; i++) {\n            if (a.data[i].unified != b.data[i].unified) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\n/**\n * Update the visible rows. Deletes any row elements that should no longer\n * be visible and creates the newly visible row elements. Any rows that haven't\n * changed visibility will be left untouched.\n *\n * @method\n * @param {Element} rowContainer The container element for the emoji rows\n * @param {Array} currentRows List of row data that matches the currently visible rows\n * @param {Array} nextRows List of row data containing the new list of rows to be made visible\n */\nconst renderRows = async(rowContainer, currentRows, nextRows) => {\n    // We need to add any rows that are in nextRows but not in currentRows.\n    const toAdd = nextRows.filter(nextRow => !currentRows.some(currentRow => doRowsMatch(currentRow, nextRow)));\n    // Remember which rows will still be visible so that we can insert our element in the correct place in the DOM.\n    let toKeep = currentRows.filter(currentRow => nextRows.some(nextRow => doRowsMatch(currentRow, nextRow)));\n    // We need to remove any rows that are in currentRows but not in nextRows.\n    const toRemove = currentRows.filter(currentRow => !nextRows.some(nextRow => doRowsMatch(currentRow, nextRow)));\n    const toRemoveElements = toRemove.map(rowData => rowContainer.querySelectorAll(`[data-row=\"${rowData.index}\"]`));\n\n    // Render all of the templates first.\n    const rows = await Promise.all(toAdd.map(rowData => createRowElement(rowData)));\n\n    rows.forEach((row, index) => {\n        const rowData = toAdd[index];\n        let nextRowIndex = null;\n\n        for (let i = 0; i < toKeep.length; i++) {\n            const candidate = toKeep[i];\n            if (candidate.index > rowData.index) {\n                nextRowIndex = i;\n                break;\n            }\n        }\n\n        // Make sure the elements get added to the DOM in the correct order (ascending by row data index)\n        // so that they appear naturally in the tab order.\n        if (nextRowIndex !== null) {\n            const nextRowData = toKeep[nextRowIndex];\n            const nextRowNode = rowContainer.querySelector(`[data-row=\"${nextRowData.index}\"]`);\n\n            rowContainer.insertBefore(row, nextRowNode);\n            toKeep.splice(nextRowIndex, 0, toKeep);\n        } else {\n            toKeep.push(rowData);\n            rowContainer.appendChild(row);\n        }\n    });\n\n    toRemoveElements.forEach(rows => {\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            rowContainer.removeChild(row);\n        }\n    });\n};\n\n/**\n * Build a function to render the visible emoji rows for a given scroll\n * position.\n *\n * @method\n * @param {Element} rowContainer The container element for the emoji rows\n * @return {Function}\n */\nconst generateRenderRowsAtPositionFunction = (rowContainer) => {\n    let currentRows = [];\n    let nextRows = [];\n    let rowCount = 0;\n    let isRendering = false;\n    const renderNextRows = async() => {\n        if (!nextRows.length) {\n            return;\n        }\n\n        if (isRendering) {\n            return;\n        }\n\n        isRendering = true;\n        const nextRowsToRender = nextRows.slice();\n        nextRows = [];\n\n        await renderRows(rowContainer, currentRows, nextRowsToRender);\n        currentRows = nextRowsToRender;\n        isRendering = false;\n        renderNextRows();\n    };\n\n    return (scrollPosition, rowData, rowLimit = VISIBLE_ROW_COUNT) => {\n        nextRows = getRowsToRender(scrollPosition, rowLimit, rowData);\n        renderNextRows();\n\n        if (rowCount !== rowData.length) {\n            // Adjust the height of the container to match the number of rows.\n            rowContainer.style.height = `${rowData.length * ROW_HEIGHT_RAW}px`;\n        }\n\n        rowCount = rowData.length;\n    };\n};\n\n/**\n * Show the search results container and hide the emoji container.\n *\n * @method\n * @param {Element} emojiContainer The emojis container\n * @param {Element} searchResultsContainer The search results container\n */\nconst showSearchResults = (emojiContainer, searchResultsContainer) => {\n    searchResultsContainer.classList.remove('hidden');\n    emojiContainer.classList.add('hidden');\n};\n\n/**\n * Hide the search result container and show the emojis container.\n *\n * @method\n * @param {Element} emojiContainer The emojis container\n * @param {Element} searchResultsContainer The search results container\n * @param {Element} searchInput The search input\n */\nconst clearSearch = (emojiContainer, searchResultsContainer, searchInput) => {\n    searchResultsContainer.classList.add('hidden');\n    emojiContainer.classList.remove('hidden');\n    searchInput.value = '';\n};\n\n/**\n * Build function to handle mouse hovering an emoji. Shows the preview.\n *\n * @method\n * @param {Element} emojiPreview The emoji preview element\n * @param {Element} emojiShortName The emoji short name element\n * @return {Function}\n */\nconst getHandleMouseEnter = (emojiPreview, emojiShortName) => {\n    return (e) => {\n        const target = e.target;\n        if (isEmojiElement(target)) {\n            emojiShortName.textContent = target.getAttribute('data-short-names');\n            emojiPreview.textContent = target.textContent;\n        }\n    };\n};\n\n/**\n * Build function to handle mouse leaving an emoji. Removes the preview.\n *\n * @method\n * @param {Element} emojiPreview The emoji preview element\n * @param {Element} emojiShortName The emoji short name element\n * @return {Function}\n */\nconst getHandleMouseLeave = (emojiPreview, emojiShortName) => {\n    return (e) => {\n        const target = e.target;\n        if (isEmojiElement(target)) {\n            emojiShortName.textContent = '';\n            emojiPreview.textContent = '';\n        }\n    };\n};\n\n/**\n * Build the function to handle a user clicking something in the picker.\n *\n * The function currently handles clicking on the category selector or selecting\n * a specific emoji.\n *\n * @method\n * @param {Number} recentEmojiRowCount Number of rows of recent emojis\n * @param {Element} emojiContainer Container element for the visible of emojis\n * @param {Element} searchResultsContainer Contaienr element for the search results\n * @param {Element} searchInput Search input element\n * @param {Function} selectCallback Callback function to execute when a user selects an emoji\n * @param {Function} renderAtPosition Render function to display current visible emojis\n * @return {Function}\n */\nconst getHandleClick = (\n    recentEmojiRowCount,\n    emojiContainer,\n    searchResultsContainer,\n    searchInput,\n    selectCallback,\n    renderAtPosition\n) => {\n    return (e, rowData, categoryScrollPositions) => {\n        const target = e.target;\n        let newRowData = rowData;\n        let newCategoryScrollPositions = categoryScrollPositions;\n\n        // Hide the search results if they are visible.\n        clearSearch(emojiContainer, searchResultsContainer, searchInput);\n\n        if (isEmojiElement(target)) {\n            // Emoji selected.\n            const unified = target.getAttribute('data-unified');\n            const shortnames = target.getAttribute('data-short-names').replace(/:/g, '').split(' ');\n            // Build the emoji data from the selected element.\n            const emojiData = {unified, shortnames};\n            const currentScrollTop = emojiContainer.scrollTop;\n            const isRecentEmojiRowVisible = emojiContainer.querySelector(`[data-row=\"${recentEmojiRowCount - 1}\"]`) !== null;\n            // Save the selected emoji in the recent emojis list.\n            [newRowData, recentEmojiRowCount] = addRecentEmoji(rowData, recentEmojiRowCount, emojiData);\n            // Re-index the category scroll positions because the additional recent emoji may have\n            // changed their positions.\n            newCategoryScrollPositions = getCategoryScrollPositionsFromRowData(newRowData);\n\n            if (isRecentEmojiRowVisible) {\n                // If the list of recent emojis is currently visible then we need to re-render the emojis\n                // to update the display and show the newly selected recent emoji.\n                renderAtPosition(currentScrollTop, newRowData);\n            }\n\n            // Call the client's callback function with the selected emoji.\n            selectCallback(target.textContent);\n            // Return the newly calculated row data and scroll positions.\n            return [newRowData, newCategoryScrollPositions];\n        }\n\n        const categorySelector = findCategorySelectorFromElement(target);\n        if (categorySelector) {\n            // Category selector.\n            const selectedCategory = categorySelector.getAttribute('data-category');\n            const position = categoryScrollPositions[selectedCategory];\n            // Scroll the container to the selected category. This will trigger the\n            // on scroll handler to re-render the visibile emojis.\n            emojiContainer.scrollTop = position;\n        }\n\n        return [newRowData, newCategoryScrollPositions];\n    };\n};\n\n/**\n * Build the function that handles scrolling of the emoji container to display the\n * correct emojis.\n *\n * We render the emoji rows as they are needed rather than all up front so that we\n * can avoid adding tends of thousands of elements to the DOM unnecessarily which\n * would bog down performance.\n *\n * @method\n * @param {Element} root The picker root element\n * @param {Number} currentVisibleRowScrollPosition The current scroll position of the container\n * @param {Element} emojiContainer The emojis container element\n * @param {Object} initialCategoryScrollPositions Scroll positions for each category\n * @param {Function} renderAtPosition Function to render the appropriate emojis for a scroll position\n * @return {Function}\n */\nconst getHandleScroll = (\n    root,\n    currentVisibleRowScrollPosition,\n    emojiContainer,\n    initialCategoryScrollPositions,\n    renderAtPosition\n) => {\n    // Scope some local variables to track the scroll positions of the categories. We need to\n    // recalculate these because adding recent emojis can change those positions by adding\n    // additional rows.\n    let [\n        currentCategoryElement,\n        previousCategoryPosition,\n        nextCategoryPosition\n    ] = getCategoryByScrollPosition(root, emojiContainer.scrollTop, initialCategoryScrollPositions);\n\n    return (categoryScrollPositions, rowData) => {\n        const newScrollPosition = emojiContainer.scrollTop;\n        const upperScrollBound = currentVisibleRowScrollPosition + ROW_HEIGHT_RAW;\n        const lowerScrollBound = currentVisibleRowScrollPosition - ROW_HEIGHT_RAW;\n        // We only need to update the active category indicator if the user has scrolled into a\n        // new category scroll position.\n        const updateActiveCategory = (newScrollPosition >= nextCategoryPosition) ||\n                       (newScrollPosition < previousCategoryPosition);\n        // We only need to render new emoji rows if the user has scrolled far enough that a new row\n        // would be visible (i.e. they've scrolled up or down more than 40px - the height of a row).\n        const updateRenderRows = (newScrollPosition < lowerScrollBound) || (newScrollPosition > upperScrollBound);\n\n        if (updateActiveCategory) {\n            // New category is visible so update the active category selector and re-index the\n            // positions incase anything has changed.\n            [\n                currentCategoryElement,\n                previousCategoryPosition,\n                nextCategoryPosition\n            ] = getCategoryByScrollPosition(root, newScrollPosition, categoryScrollPositions);\n            setCategorySelectorActive(root, currentCategoryElement);\n        }\n\n        if (updateRenderRows) {\n            // A new row should be visible so re-render the visible emojis at this new position.\n            // We request an animation frame from the browser so that we're not blocking anything.\n            // The animation only needs to occur as soon as the browser is ready not immediately.\n            requestAnimationFrame(() => {\n                renderAtPosition(newScrollPosition, rowData);\n                // Remember the updated position.\n                currentVisibleRowScrollPosition = newScrollPosition;\n            });\n        }\n    };\n};\n\n/**\n * Build the function that handles search input from the user.\n *\n * @method\n * @param {Element} searchInput The search input element\n * @param {Element} searchResultsContainer Container element to display the search results\n * @param {Element} emojiContainer Container element for the emoji rows\n * @return {Function}\n */\nconst getHandleSearch = (searchInput, searchResultsContainer, emojiContainer) => {\n    const rowContainer = searchResultsContainer.querySelector(SELECTORS.ROW_CONTAINER);\n    // Build a render function for the search results.\n    const renderSearchResultsAtPosition = generateRenderRowsAtPositionFunction(rowContainer);\n    searchResultsContainer.appendChild(rowContainer);\n\n    return async() => {\n        const searchTerm = searchInput.value.toLowerCase();\n\n        if (searchTerm) {\n            // Display the search results container and hide the emojis container.\n            showSearchResults(emojiContainer, searchResultsContainer);\n\n            // Find which emojis match the user's search input.\n            const matchingEmojis = Object.keys(EmojiData.byShortName).reduce((carry, shortName) => {\n                if (shortName.includes(searchTerm)) {\n                    carry.push({\n                        shortnames: [shortName],\n                        unified: EmojiData.byShortName[shortName]\n                    });\n                }\n                return carry;\n            }, []);\n\n            const searchResultsString = await getString('searchresults', 'core');\n            const rowData = createRowDataForCategory(searchResultsString, searchResultsString, matchingEmojis, 0);\n            // Show the emoji rows for the search results.\n            renderSearchResultsAtPosition(0, rowData, rowData.length);\n        } else {\n            // Hide the search container and show the emojis container.\n            clearSearch(emojiContainer, searchResultsContainer, searchInput);\n        }\n    };\n};\n\n/**\n * Register the emoji picker event listeners.\n *\n * @method\n * @param {Element} root The picker root element\n * @param {Element} emojiContainer Root element containing the list of visible emojis\n * @param {Function} renderAtPosition Function to render the visible emojis at a given scroll position\n * @param {Number} currentVisibleRowScrollPosition What is the current scroll position\n * @param {Function} selectCallback Function to execute when the user picks an emoji\n * @param {Object} categoryScrollPositions Scroll positions for where each of the emoji categories begin\n * @param {Array} rowData Data representing each of the display rows for hte emoji container\n * @param {Number} recentEmojiRowCount Number of rows of recent emojis\n */\nconst registerEventListeners = (\n    root,\n    emojiContainer,\n    renderAtPosition,\n    currentVisibleRowScrollPosition,\n    selectCallback,\n    categoryScrollPositions,\n    rowData,\n    recentEmojiRowCount\n) => {\n    const searchInput = root.querySelector(SELECTORS.SEARCH_INPUT);\n    const searchResultsContainer = root.querySelector(SELECTORS.SEARCH_RESULTS_CONTAINER);\n    const emojiPreview = root.querySelector(SELECTORS.EMOJI_PREVIEW);\n    const emojiShortName = root.querySelector(SELECTORS.EMOJI_SHORT_NAME);\n    // Build the click handler function.\n    const clickHandler = getHandleClick(\n        recentEmojiRowCount,\n        emojiContainer,\n        searchResultsContainer,\n        searchInput,\n        selectCallback,\n        renderAtPosition\n    );\n    // Build the scroll handler function.\n    const scrollHandler = getHandleScroll(\n        root,\n        currentVisibleRowScrollPosition,\n        emojiContainer,\n        categoryScrollPositions,\n        renderAtPosition\n    );\n    const searchHandler = getHandleSearch(searchInput, searchResultsContainer, emojiContainer);\n\n    // Mouse enter/leave events to show the emoji preview on hover or focus.\n    root.addEventListener('focus', getHandleMouseEnter(emojiPreview, emojiShortName), true);\n    root.addEventListener('blur', getHandleMouseLeave(emojiPreview, emojiShortName), true);\n    root.addEventListener('mouseenter', getHandleMouseEnter(emojiPreview, emojiShortName), true);\n    root.addEventListener('mouseleave', getHandleMouseLeave(emojiPreview, emojiShortName), true);\n    // User selects an emoji or clicks on one of the emoji category selectors.\n    root.addEventListener('click', e => {\n        // Update the row data and category scroll positions because they may have changes if the\n        // user selects an emoji which updates the recent emojis list.\n        [rowData, categoryScrollPositions] = clickHandler(e, rowData, categoryScrollPositions);\n    });\n    // Throttle the scroll event to only execute once every 50 milliseconds to prevent performance issues\n    // in the browser when re-rendering the picker emojis. The scroll event fires a lot otherwise.\n    emojiContainer.addEventListener('scroll', throttle(() => scrollHandler(categoryScrollPositions, rowData), 50));\n    // Debounce the search input so that it only executes 200 milliseconds after the user has finished typing.\n    searchInput.addEventListener('input', debounce(searchHandler, 200));\n};\n\n/**\n * Initialise the emoji picker.\n *\n * @method\n * @param {Element} root The root element for the picker\n * @param {Function} selectCallback Callback for when the user selects an emoji\n */\nexport default (root, selectCallback) => {\n    const emojiContainer = root.querySelector(SELECTORS.EMOJIS_CONTAINER);\n    const rowContainer = emojiContainer.querySelector(SELECTORS.ROW_CONTAINER);\n    const recentEmojis = getRecentEmojis();\n    // Add the recent emojis category to the list of standard categories.\n    const allData = [{\n        name: 'Recent',\n        emojis: recentEmojis\n    }, ...EmojiData.byCategory];\n    let rowData = [];\n    let recentEmojiRowCount = 0;\n\n    /**\n     * Split categories data into rows which represent how they will be displayed in the\n     * picker. Each category will add a row containing the display name for the category\n     * and a row for every 9 emojis in the category. The row data will be used to calculate\n     * which emojis should be visible in the picker at any given time.\n     *\n     * E.g.\n     * input = [\n     *  {name: 'example1', emojis: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]},\n     *  {name: 'example2', emojis: [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]},\n     * ]\n     * output = [\n     *      {type: 'categoryName': data: 'Example 1'},\n     *      {type: 'emojiRow': data: [1, 2, 3, 4, 5, 6, 7, 8, 9]},\n     *      {type: 'emojiRow': data: [10, 11, 12]},\n     *      {type: 'categoryName': data: 'Example 2'},\n     *      {type: 'emojiRow': data: [13, 14, 15, 16, 17, 18, 19, 20, 21]},\n     *      {type: 'emojiRow': data: [22, 23]},\n     * ]\n     */\n    allData.forEach(category => {\n        const categorySelector = getCategorySelectorByCategoryName(root, category.name);\n        // Get the display name from the category selector button so that we don't need to\n        // send an ajax request for the string.\n        const categoryDisplayName = categorySelector.title;\n        const categoryRowData = createRowDataForCategory(category.name, categoryDisplayName, category.emojis, rowData.length);\n\n        if (category.name === 'Recent') {\n            // Remember how many recent emoji rows there are because it needs to be used to\n            // re-index the row data later when we're adding more recent emojis.\n            recentEmojiRowCount = categoryRowData.length;\n        }\n\n        rowData = rowData.concat(categoryRowData);\n    });\n\n    // Index the row data so that we can calculate which rows should be visible.\n    rowData = addIndexesToRowData(rowData);\n    // Calculate the scroll positions for each of the categories within the emoji container.\n    // These are used to know where to jump to when the user selects a specific category.\n    const categoryScrollPositions = getCategoryScrollPositionsFromRowData(rowData);\n    const renderAtPosition = generateRenderRowsAtPositionFunction(rowContainer);\n    // Display the initial set of emojis.\n    renderAtPosition(0, rowData);\n\n    registerEventListeners(\n        root,\n        emojiContainer,\n        renderAtPosition,\n        0,\n        selectCallback,\n        categoryScrollPositions,\n        rowData,\n        recentEmojiRowCount\n    );\n};\n"],"names":["obj","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_typeof","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_unsupportedIterableToArray","TypeError","_nonIterableSpread","_slicedToArray","i","_arrayWithHoles","_i","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","return","_iterableToArrayLimit","_nonIterableRest","o","minLen","n","toString","slice","name","test","len","arr2","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","defineProperty","key","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread","target","source","_defineProperty","getOwnPropertyDescriptors","defineProperties","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_toPropertyKey","_localstorage","__esModule","default","EmojiData","cache","has","get","newObj","hasPropertyDescriptor","set","_interopRequireWildcard","_ref","_ref2","_ref7","_ref8","ROW_TYPE","SELECTORS","createRowDataForCategory","categoryName","categoryDisplayName","emojis","totalRowCount","rowData","index","data","rowEmojis","addIndexesToRowData","map","getCategoryScrollPositionsFromRowData","reduce","carry","row","createHeaderRow","_callee","rowIndex","html","temp","_context","text","renderTemplate","render","document","createElement","innerHTML","firstChild","_x2","createEmojiRow","_callee2","_context2","emojiData","charCodes","unified","split","code","concat","emojiText","fromCodePoint","shortnames","join","spacer","spacers","fill","_x3","_x4","isEmojiElement","element","getAttribute","findCategorySelectorFromElement","parentElement","getCategorySelectorByCategoryName","root","querySelector","getCategoryByScrollPosition","position","categoryScrollPositions","positions","categoryPosition","sort","_ref3","_ref4","a","b","candidate","_candidate","previousPosition","currentPosition","nextPosition","getRecentEmojis","storedData","LocalStorage","JSON","parse","addRecentEmoji","recentEmojiRowCount","newEmoji","recentEmojis","newRecentEmojis","emoji","EMOJIS_PER_ROW","newRecentEmojiRowData","stringify","saveRecentEmoji","getRowsToRender","scrollPosition","visibleRowCount","minVisibleRow","Math","floor","start","end","createRowElement","_context3","style","left","right","top","_callee3","_x5","doRowsMatch","renderRows","rowContainer","currentRows","nextRows","toAdd","toKeep","toRemove","toRemoveElements","_context4","nextRow","some","currentRow","querySelectorAll","all","nextRowIndex","nextRowData","nextRowNode","insertBefore","splice","appendChild","rows","removeChild","_callee4","_x6","_x7","_x8","generateRenderRowsAtPositionFunction","_ref9","rowCount","isRendering","renderNextRows","_callee5","nextRowsToRender","_context5","rowLimit","height","showSearchResults","emojiContainer","searchResultsContainer","classList","remove","add","clearSearch","searchInput","getHandleMouseEnter","emojiPreview","emojiShortName","e","textContent","getHandleMouseLeave","getHandleScroll","currentVisibleRowScrollPosition","initialCategoryScrollPositions","renderAtPosition","_getCategoryByScrollP2","scrollTop","currentCategoryElement","previousCategoryPosition","nextCategoryPosition","newScrollPosition","updateRenderRows","_getCategoryByScrollP4","allCategorySelectors","setCategorySelectorActive","requestAnimationFrame","registerEventListeners","selectCallback","clickHandler","newRowData","newCategoryScrollPositions","replace","currentScrollTop","isRecentEmojiRowVisible","_addRecentEmoji2","categorySelector","getHandleClick","scrollHandler","searchHandler","renderSearchResultsAtPosition","_callee6","searchTerm","matchingEmojis","searchResultsString","_context6","toLowerCase","byShortName","shortName","includes","getString","get_string","getHandleSearch","addEventListener","_clickHandler2","throttle","debounce","_exports","allData","byCategory","category","title","categoryRowData"],"mappings":"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"}