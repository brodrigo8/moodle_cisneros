{"version":3,"file":"reactive.min.js","sources":["../../../src/local/reactive/reactive.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A generic single state reactive module.\n *\n * @module     core/reactive/local/reactive/reactive\n * @class     core/reactive/local/reactive/reactive\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport log from 'core/log';\nimport StateManager from 'core/local/reactive/statemanager';\nimport Pending from 'core/pending';\n\n// Count the number of pending operations done to ensure we have a unique id for each one.\nlet pendingCount = 0;\n\n/**\n * Set up general reactive class to create a single state application with components.\n *\n * The reactive class is used for registering new UI components and manage the access to the state values\n * and mutations.\n *\n * When a new reactive instance is created, it will contain an empty state and and empty mutations\n * lists. When the state data is ready, the initial state can be loaded using the \"setInitialState\"\n * method. This will protect the state from writing and will trigger all the components \"stateReady\"\n * methods.\n *\n * State can only be altered by mutations. To replace all the mutations with a specific class,\n * use \"setMutations\" method. If you need to just add some new mutation methods, use \"addMutations\".\n *\n * To register new components into a reactive instance, use \"registerComponent\".\n *\n * Inside a component, use \"dispatch\" to invoke a mutation on the state (components can only access\n * the state in read only mode).\n */\nexport default class {\n\n    /**\n     * The component descriptor data structure.\n     *\n     * @typedef {object} description\n     * @property {string} eventName the custom event name used for state changed events\n     * @property {Function} eventDispatch the state update event dispatch function\n     * @property {Element} [target] the target of the event dispatch. If not passed a fake element will be created\n     * @property {Object} [mutations] an object with state mutations functions\n     * @property {Object} [state] an object to initialize the state.\n     */\n\n    /**\n     * Create a basic reactive manager.\n     *\n     * Note that if your state is not async loaded, you can pass directly on creation by using the\n     * description.state attribute. However, this will initialize the state, this means\n     * setInitialState will throw an exception because the state is already defined.\n     *\n     * @param {description} description reactive manager description.\n     */\n    constructor(description) {\n\n        if (description.eventName === undefined || description.eventDispatch === undefined) {\n            throw new Error(`Reactivity event required`);\n        }\n\n        if (description.name !== undefined) {\n            this.name = description.name;\n        }\n\n        // Each reactive instance has its own element anchor to propagate state changes internally.\n        // By default the module will create a fake DOM element to target custom events but\n        // if all reactive components is constrait to a single element, this can be passed as\n        // target in the description.\n        this.target = description.target ?? document.createTextNode(null);\n\n        this.eventName = description.eventName;\n        this.eventDispatch = description.eventDispatch;\n\n        // State manager is responsible for dispatch state change events when a mutation happens.\n        this.stateManager = new StateManager(this.eventDispatch, this.target);\n\n        // An internal registry of watchers and components.\n        this.watchers = new Map([]);\n        this.components = new Set([]);\n\n        // Mutations can be overridden later using setMutations method.\n        this.mutations = description.mutations ?? {};\n\n        // Register the event to alert watchers when specific state change happens.\n        this.target.addEventListener(this.eventName, this.callWatchersHandler.bind(this));\n\n        // Add a pending operation waiting for the initial state.\n        this.pendingState = new Pending(`core/reactive:registerInstance${pendingCount++}`);\n\n        // Set initial state if we already have it.\n        if (description.state !== undefined) {\n            this.setInitialState(description.state);\n        }\n\n        // Check if we have a debug instance to register the instance.\n        if (M.reactive !== undefined) {\n            M.reactive.registerNewInstance(this);\n        }\n    }\n\n    /**\n     * State changed listener.\n     *\n     * This function take any state change and send it to the proper watchers.\n     *\n     * To prevent internal state changes from colliding with other reactive instances, only the\n     * general \"state changed\" is triggered at document level. All the internal changes are\n     * triggered at private target level without bubbling. This way any reactive instance can alert\n     * only its own watchers.\n     *\n     * @param {CustomEvent} event\n     */\n    callWatchersHandler(event) {\n        // Execute any registered component watchers.\n        this.target.dispatchEvent(new CustomEvent(event.detail.action, {\n            bubbles: false,\n            detail: event.detail,\n        }));\n    }\n\n    /**\n     * Set the initial state.\n     *\n     * @param {object} stateData the initial state data.\n     */\n    setInitialState(stateData) {\n        this.pendingState.resolve();\n        this.stateManager.setInitialState(stateData);\n    }\n\n    /**\n     * Add individual functions to the mutations.\n     *\n     * Note new mutations will be added to the existing ones. To replace the full mutation\n     * object with a new one, use setMutations method.\n     *\n     * @method addMutations\n     * @param {Object} newFunctions an object with new mutation functions.\n     */\n    addMutations(newFunctions) {\n        // Mutations can provide an init method to do some setup in the statemanager.\n        if (newFunctions.init !== undefined) {\n            newFunctions.init(this.stateManager);\n        }\n        // Save all mutations.\n        for (const [mutation, mutationFunction] of Object.entries(newFunctions)) {\n            this.mutations[mutation] = mutationFunction.bind(newFunctions);\n        }\n    }\n\n    /**\n     * Replace the current mutations with a new object.\n     *\n     * This method is designed to override the full mutations class, for example by extending\n     * the original one. To add some individual mutations, use addMutations instead.\n     *\n     * @param {object} manager the new mutations intance\n     */\n    setMutations(manager) {\n        this.mutations = manager;\n        // Mutations can provide an init method to do some setup in the statemanager.\n        if (manager.init !== undefined) {\n            manager.init(this.stateManager);\n        }\n    }\n\n    /**\n     * Return the current state.\n     *\n     * @return {object}\n     */\n    get state() {\n        return this.stateManager.state;\n    }\n\n    /**\n     * Get state data.\n     *\n     * Components access the state frequently. This convenience method is a shortcut to\n     * this.reactive.state.stateManager.get() method.\n     *\n     * @param {String} name the state object name\n     * @param {*} id an optional object id for state maps.\n     * @return {Object|undefined} the state object found\n     */\n    get(name, id) {\n        return this.stateManager.get(name, id);\n    }\n\n    /**\n     * Return the initial state promise.\n     *\n     * Typically, components do not require to use this promise because registerComponent\n     * will trigger their stateReady method automatically. But it could be useful for complex\n     * components that require to combine state, template and string loadings.\n     *\n     * @method getState\n     * @return {Promise}\n     */\n    getInitialStatePromise() {\n        return this.stateManager.getInitialPromise();\n    }\n\n    /**\n     * Register a new component.\n     *\n     * Component can provide some optional functions to the reactive module:\n     * - getWatchers: returns an array of watchers\n     * - stateReady: a method to call when the initial state is loaded\n     *\n     * It can also provide some optional attributes:\n     * - name: the component name (default value: \"Unkown component\") to customize debug messages.\n     *\n     * The method will also use dispatchRegistrationSuccess and dispatchRegistrationFail. Those\n     * are BaseComponent methods to inform parent components of the registration status.\n     * Components should not override those methods.\n     *\n     * @method registerComponent\n     * @param {object} component the new component\n     * @param {string} [component.name] the component name to display in warnings and errors.\n     * @param {Function} [component.dispatchRegistrationSuccess] method to notify registration success\n     * @param {Function} [component.dispatchRegistrationFail] method to notify registration fail\n     * @param {Function} [component.getWatchers] getter of the component watchers\n     * @param {Function} [component.stateReady] method to call when the state is ready\n     * @return {object} the registered component\n     */\n    registerComponent(component) {\n\n        // Component name is an optional attribute to customize debug messages.\n        const componentName = component.name ?? 'Unkown component';\n\n        // Components can provide special methods to communicate registration to parent components.\n        let dispatchSuccess = () => {\n            return;\n        };\n        let dispatchFail = dispatchSuccess;\n        if (component.dispatchRegistrationSuccess !== undefined) {\n            dispatchSuccess = component.dispatchRegistrationSuccess.bind(component);\n        }\n        if (component.dispatchRegistrationFail !== undefined) {\n            dispatchFail = component.dispatchRegistrationFail.bind(component);\n        }\n\n        // Components can be registered only one time.\n        if (this.components.has(component)) {\n            dispatchSuccess();\n            return component;\n        }\n\n        // Components are fully registered only when the state ready promise is resolved.\n        const pendingPromise = new Pending(`core/reactive:registerComponent${pendingCount++}`);\n\n        // Keep track of the event listeners.\n        let listeners = [];\n\n        // Register watchers.\n        let handlers = [];\n        if (component.getWatchers !== undefined) {\n            handlers = component.getWatchers();\n        }\n        handlers.forEach(({watch, handler}) => {\n\n            if (watch === undefined) {\n                dispatchFail();\n                throw new Error(`Missing watch attribute in ${componentName} watcher`);\n            }\n            if (handler === undefined) {\n                dispatchFail();\n                throw new Error(`Missing handler for watcher ${watch} in ${componentName}`);\n            }\n\n            const listener = (event) => {\n                // Prevent any watcher from losing the page focus.\n                const currentFocus = document.activeElement;\n                // Execute watcher.\n                handler.apply(component, [event.detail]);\n                // Restore focus in case it is lost.\n                if (document.activeElement === document.body && document.body.contains(currentFocus)) {\n                    currentFocus.focus();\n                }\n            };\n\n            // Save the listener information in case the component must be unregistered later.\n            listeners.push({target: this.target, watch, listener});\n\n            // The state manager triggers a general \"state changed\" event at a document level. However,\n            // for the internal watchers, each component can listen to specific state changed custom events\n            // in the target element. This way we can use the native event loop without colliding with other\n            // reactive instances.\n            this.target.addEventListener(watch, listener);\n        });\n\n        // Register state ready function. There's the possibility a component is registered after the initial state\n        // is loaded. For those cases we have a state promise to handle this specific state change.\n        if (component.stateReady !== undefined) {\n            this.getInitialStatePromise()\n                .then(state => {\n                    component.stateReady(state);\n                    pendingPromise.resolve();\n                    return true;\n                })\n                .catch(reason => {\n                    pendingPromise.resolve();\n                    log.error(`Initial state in ${componentName} rejected due to: ${reason}`);\n                    log.error(reason);\n                });\n        }\n\n        // Save unregister data.\n        this.watchers.set(component, listeners);\n        this.components.add(component);\n\n        // Dispatch an event to communicate the registration to the debug module.\n        this.target.dispatchEvent(new CustomEvent('registerComponent:success', {\n            bubbles: false,\n            detail: {component},\n        }));\n\n        dispatchSuccess();\n        return component;\n    }\n\n    /**\n     * Unregister a component and its watchers.\n     *\n     * @param {object} component the object instance to unregister\n     * @returns {object} the deleted component\n     */\n    unregisterComponent(component) {\n        if (!this.components.has(component)) {\n            return component;\n        }\n\n        this.components.delete(component);\n\n        // Remove event listeners.\n        const listeners = this.watchers.get(component);\n        if (listeners === undefined) {\n            return component;\n        }\n\n        listeners.forEach(({target, watch, listener}) => {\n            target.removeEventListener(watch, listener);\n        });\n\n        this.watchers.delete(component);\n\n        return component;\n    }\n\n    /**\n     * Dispatch a change in the state.\n     *\n     * This method is the only way for components to alter the state. Watchers will receive a\n     * read only state to prevent illegal changes. If some user action require a state change, the\n     * component should dispatch a mutation to trigger all the necessary logic to alter the state.\n     *\n     * @method dispatch\n     * @param {string} actionName the action name (usually the mutation name)\n     * @param {mixed} params any number of params the mutation needs.\n     */\n    async dispatch(actionName, ...params) {\n        if (typeof actionName !== 'string') {\n            throw new Error(`Dispatch action name must be a string`);\n        }\n        // JS does not have private methods yet. However, we prevent any component from calling\n        // a method starting with \"_\" because the most accepted convention for private methods.\n        if (actionName.charAt(0) === '_') {\n            throw new Error(`Illegal Private ${actionName} mutation method dispatch`);\n        }\n        if (this.mutations[actionName] === undefined) {\n            throw new Error(`Unkown ${actionName} mutation`);\n        }\n\n        const pendingPromise = new Pending(`core/reactive:${actionName}${pendingCount++}`);\n\n        const mutationFunction = this.mutations[actionName];\n        try {\n            await mutationFunction.apply(this.mutations, [this.stateManager, ...params]);\n            pendingPromise.resolve();\n        } catch (error) {\n            // Ensure the state is locked.\n            this.stateManager.setReadOnly(true);\n            pendingPromise.resolve();\n            throw error;\n        }\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_regeneratorRuntime","exports","Op","Object","hasOwn","hasOwnProperty","defineProperty","key","desc","value","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_i","_s","_e","_x","_r","_arr","_n","_d","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","len","arr2","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_log","_statemanager","_pending","pendingCount","_default","description","_description$target","_description$mutation","instance","Constructor","_classCallCheck","eventName","eventDispatch","document","createTextNode","stateManager","StateManager","watchers","Map","components","Set","mutations","addEventListener","callWatchersHandler","bind","pendingState","Pending","setInitialState","M","reactive","registerNewInstance","protoProps","staticProps","_dispatch","event","dispatchEvent","CustomEvent","detail","action","bubbles","stateData","newFunctions","init","_Object$entries","entries","_Object$entries$_i","mutation","mutationFunction","manager","get","id","getInitialPromise","component","_component$name","_this","componentName","dispatchSuccess","dispatchFail","dispatchRegistrationSuccess","dispatchRegistrationFail","has","pendingPromise","listeners","handlers","getWatchers","_ref","watch","handler","concat","listener","currentFocus","activeElement","apply","body","contains","focus","stateReady","getInitialStatePromise","reason","log","set","add","delete","_ref2","removeEventListener","actionName","_len","params","_key","_args","arguments","_context","t0","setReadOnly","_callee","args","_x2","_exports"],"mappings":"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"}