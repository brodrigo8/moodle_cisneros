{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * Tiny Record RTC type.\n *\n * @module      tiny_recordrtc/recording/base\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {component} from './common';\nimport Pending from 'core/pending';\nimport {getData} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\n\n/**\n * The RecordRTC base class for audio, video, and any other future types\n */\nexport default class {\n\n    stopRequested = false;\n\n    /**\n     * Constructor for the RecordRTC class\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     */\n    constructor(editor, modal) {\n        this.ready = false;\n\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n\n        this.editor = editor;\n        this.config = getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\n        this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\n\n        // Disable the record button untilt he stream is acquired.\n        this.setRecordButtonState(false);\n\n        this.player = this.configurePlayer();\n        this.registerEventListeners();\n        this.ready = true;\n\n        this.captureUserMedia();\n        this.prefetchContent();\n    }\n\n    /**\n     * Check whether the browser is compatible.\n     *\n     * @returns {boolean}\n     */\n    isReady() {\n        return this.ready;\n    }\n\n    // Disable eslint's valid-jsdoc rule as the following methods are abstract and mnust be overridden by the child class.\n\n    /* eslint-disable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the Player element for this type.\n     *\n     * @returns {HTMLElement} The player element, typically an audio or video tag.\n     */\n    configurePlayer() {\n        throw new Error(`configurePlayer() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the list of supported mimetypes for this recorder.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported}\n     *\n     * @returns {string[]} The list of supported mimetypes.\n     */\n    getSupportedTypes() {\n        throw new Error(`getSupportedTypes() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get any recording options passed into the MediaRecorder.\n     * Please note that the mimeType will be fetched from {@link getSupportedTypes()}.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#options}\n     * @returns {Object}\n     */\n    getRecordingOptions() {\n        throw new Error(`getRecordingOptions() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a filename for the generated file.\n     *\n     * Typically this function will take a prefix and add a type-specific suffix such as the extension to it.\n     *\n     * @param {string} prefix The prefix for the filename generated by the recorder.\n     * @returns {string}\n     */\n    getFileName(prefix) {\n        throw new Error(`getFileName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a list of constraints as required by the getUserMedia() function.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#constraints}\n     *\n     * @returns {Object}\n     */\n    getMediaConstraints() {\n        throw new Error(`getMediaConstraints() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Whether to start playing the recording as it is captured.\n     * @returns {boolean} Whether to start playing the recording as it is captured.\n     */\n    playOnCapture() {\n        return false;\n    }\n\n    /**\n     * Get the time limit for this recording type.\n     *\n     * @returns {number} The time limit in seconds.\n     */\n    getTimeLimit() {\n        throw new Error(`getTimeLimit() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the name of the template used when embedding the URL in the editor content.\n     *\n     * @returns {string}\n     */\n    getEmbedTemplateName() {\n        throw new Error(`getEmbedTemplateName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Fetch the Class of the Modal to be displayed.\n     *\n     * @returns {Modal}\n     */\n    static getModalClass() {\n        throw new Error(`getModalClass() must be implemented in ${this.constructor.name}`);\n    }\n\n    /* eslint-enable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the options for the MediaRecorder.\n     *\n     * @returns {object} The options for the MediaRecorder instance.\n     */\n    getParsedRecordingOptions() {\n        const types = this.getSupportedTypes();\n        const options = this.getParsedRecordingOptions();\n        const compatTypes = types.filter((type) => window.MediaRecorder.isTypeSupported(type));\n\n        if (compatTypes.length !== 0) {\n            options.mimeType = compatTypes[0];\n        }\n\n        return options;\n    }\n\n    /**\n     * Start capturing the User Media and handle success or failure of the capture.\n     */\n    async captureUserMedia() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia(this.getMediaConstraints());\n            this.handleCaptureSuccess(stream);\n        } catch (error) {\n            this.handleCaptureFailure(error);\n        }\n    }\n\n    /**\n     * Prefetch some of the content that will be used in the UI.\n     *\n     * Note: not all of the strings used are pre-fetched.\n     * Some of the strings will be fetched because their template is used.\n     */\n    prefetchContent() {\n        prefetchStrings(component, [\n            'uploading',\n            'recordagain_title',\n            'recordagain_desc',\n            'discard_title',\n            'discard_desc',\n            'confirm_yes',\n            'recordinguploaded',\n            'maxfilesizehit',\n            'maxfilesizehit_title',\n            'uploadfailed',\n        ]);\n\n        prefetchTemplates([\n            this.getEmbedTemplateName(),\n            'tiny_recordrtc/timeremaining',\n        ]);\n    }\n\n    /**\n     * Display an error message to the user.\n     *\n     * @param {Promise<string>} title The error title\n     * @param {Promise<string>} content The error message\n     * @returns {Promise<Modal>}\n     */\n    async displayAlert(title, content) {\n        const pendingPromise = new Pending('core/confirm:alert');\n        const ModalFactory = await import('core/modal_factory');\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: title,\n            body: content,\n            removeOnClose: true,\n        });\n\n        modal.show();\n        pendingPromise.resolve();\n\n        return modal;\n    }\n\n    /**\n     * Handle successful capture of the User Media.\n     *\n     * @param {MediaStream} stream The stream as captured by the User Media.\n     */\n    handleCaptureSuccess(stream) {\n        // Set audio player source to microphone stream.\n        this.player.srcObject = stream;\n\n        if (this.playOnCapture()) {\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n\n        this.stream = stream;\n        this.setupPlayerSource();\n        this.setRecordButtonState(true);\n    }\n\n    /**\n     * Setup the player to use the stream as a source.\n     */\n    setupPlayerSource() {\n        if (!this.player.srcObject) {\n            this.player.srcObject = this.stream;\n\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n    }\n\n    /**\n     * Enable the record button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setRecordButtonState(enabled) {\n        this.startStopButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the record button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setRecordButtonVisibility(visible) {\n        const container = this.getButtonContainer('start-stop');\n        container.classList.toggle('hide', !visible);\n    }\n\n    /**\n     * Enable the upload button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setUploadButtonState(enabled) {\n        this.uploadButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the upload button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setUploadButtonVisibility(visible) {\n        const container = this.getButtonContainer('upload');\n        container.classList.toggle('hide', !visible);\n    }\n    /**\n     * Handle failure to capture the User Media.\n     *\n     * @param {Error} error\n     */\n    handleCaptureFailure(error) {\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        var subject = `gum${error.name.replace('Error', '').toLowerCase()}`;\n        this.displayAlert(\n            getString(`${subject}_title`, component),\n            getString(subject, component)\n        );\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEventListeners() {\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.cleanupStream();\n            this.requestRecordingStop();\n        });\n    }\n\n    /**\n     * Prevent the Modal from closing when recording is on process.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    async outsideClickHandler(event) {\n        if (this.isRecording()) {\n            // The user is recording.\n            // Do not distract with a confirmation, just prevent closing.\n            event.preventDefault();\n        } else if (this.hasData()) {\n            // If there is a blobsize then there is data that may be lost.\n            // Ask the user to confirm they want to close the modal.\n            // We prevent default here, and then close the modal if they confirm.\n            event.preventDefault();\n\n            try {\n                await saveCancelPromise(\n                    await getString(\"discard_title\", component),\n                    await getString(\"discard_desc\", component),\n                    await getString(\"confirm_yes\", component),\n                );\n                this.modal.hide();\n            } catch (error) {\n                // Do nothing, the modal will not close.\n            }\n        }\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    handleModalClick(event) {\n        const button = event.target.closest('button');\n        if (button && button.dataset.action) {\n            const action = button.dataset.action;\n            if (action === 'startstop') {\n                this.handleRecordingStartStopRequested();\n            }\n\n            if (action === 'upload') {\n                this.uploadRecording();\n            }\n        }\n    }\n\n    /**\n     * Handle the click event for the recording start/stop button.\n     */\n    handleRecordingStartStopRequested() {\n        if (this.mediaRecorder?.state === 'recording') {\n            this.requestRecordingStop();\n        } else {\n            this.startRecording();\n        }\n    }\n\n    /**\n     * Handle the media stream after it has finished.\n     */\n    async onMediaStopped() {\n        // Set source of audio player.\n        this.blob = new Blob(this.data.chunks, {\n            type: this.mediaRecorder.mimeType\n        });\n        this.player.srcObject = null;\n        this.player.src = URL.createObjectURL(this.blob);\n\n        // Change the label to \"Record again\".\n        this.setRecordButtonTextFromString('recordagain');\n\n        // Show audio player with controls enabled, and unmute.\n        this.player.muted = false;\n        this.player.controls = true;\n        this.getButtonContainer('player')?.classList.toggle('hide', false);\n\n        // Show upload button.\n        this.setUploadButtonVisibility(true);\n        this.setUploadButtonState(true);\n    }\n\n    /**\n     * Upload the recording and insert it into the editor content.\n     */\n    async uploadRecording() {\n        // Trigger error if no recording has been made.\n        if (this.data.chunks.length === 0) {\n            this.displayAlert('norecordingfound');\n            return;\n        }\n\n        const fileName = this.getFileName((Math.random() * 1000).toString().replace('.', ''));\n\n        // Upload recording to server.\n        try {\n            // Once uploading starts, do not allow any further changes to the recording.\n            this.setRecordButtonVisibility(false);\n\n            // Disable the upload button.\n            this.setUploadButtonState(false);\n\n            // Upload the recording.\n            const fileURL = await uploadFile(this.editor, 'media', this.blob, fileName, (progress) => {\n                this.setUploadButtonTextProgress(progress);\n            });\n            this.insertMedia(fileURL);\n            this.close();\n            addToast(await getString('recordinguploaded', component));\n        } catch (error) {\n            // Show a toast and unhide the button.\n            this.setUploadButtonState(true);\n\n            addToast(await getString('uploadfailed', component, {error}), {\n                type: 'error',\n            });\n\n        }\n    }\n\n    /**\n     * Helper to get the container that a button is in.\n     *\n     * @param {string} purpose The button purpose\n     * @returns {HTMLElement}\n     */\n    getButtonContainer(purpose) {\n        return this.modalRoot.querySelector(`[data-purpose=\"${purpose}-container\"]`);\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media.\n     *\n     * @returns {boolean}\n     */\n    static isBrowserCompatible() {\n        return this.checkSecure() && this.hasUserMedia();\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: {},\n            large: true,\n        });\n\n        // Set up the VideoRecorder.\n        const recorder = new this(editor, modal);\n        if (recorder.isReady()) {\n            modal.show();\n        }\n        return modal;\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media, and display a warning if not.\n     *\n     * @returns {boolean}\n     */\n    checkAndWarnAboutBrowserCompatibility() {\n        if (!this.constructor.checkSecure()) {\n            getStrings(['insecurealert_title', 'insecurealert'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        if (!this.constructor.hasUserMedia) {\n            getStrings(['nowebrtc_title', 'nowebrtc'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check whether the browser supports WebRTC.\n     *\n     * @returns {boolean}\n     */\n    static hasUserMedia() {\n        return (navigator.mediaDevices && window.MediaRecorder);\n    }\n\n    /**\n     * Check whether the hostname is either hosted over SSL, or from a valid localhost hostname.\n     *\n     * The UserMedia API can only be used in secure contexts as noted.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security}\n     *\n     * @returns {boolean} Whether the plugin can be loaded.\n     */\n    static checkSecure() {\n        // Note: We can now use window.isSecureContext.\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection\n        // https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext\n        return window.isSecureContext;\n    }\n\n    /**\n     * Update the content of the stop recording button timer.\n     */\n    async setStopRecordingButton() {\n        const {html, js} = await Templates.renderForPromise('tiny_recordrtc/timeremaining', this.getTimeRemaining());\n        Templates.replaceNodeContents(this.startStopButton, html, js);\n        this.buttonTimer = setInterval(this.updateRecordButtonTime.bind(this), 500);\n    }\n\n    /**\n     * Update the time on the stop recording button.\n     */\n    updateRecordButtonTime() {\n        const {remaining, minutes, seconds} = this.getTimeRemaining();\n        if (remaining < 0) {\n            this.requestRecordingStop();\n        } else {\n            this.startStopButton.querySelector('[data-type=\"minutes\"]').textContent = minutes;\n            this.startStopButton.querySelector('[data-type=\"seconds\"]').textContent = seconds;\n        }\n    }\n\n    /**\n     * Set the text of the record button using a language string.\n     *\n     * @param {string} string The string identifier\n     */\n    async setRecordButtonTextFromString(string) {\n        this.startStopButton.textContent = await getString(string, component);\n    }\n\n    /**\n     * Set the upload button text progress.\n     *\n     * @param {number} progress The progress\n     */\n    async setUploadButtonTextProgress(progress) {\n        this.uploadButton.textContent = await getString('uploading', component, {\n            progress: Math.round(progress * 100) / 100,\n        });\n    }\n\n    async resetUploadButtonText() {\n        this.uploadButton.textContent = await getString('upload', component);\n    }\n\n    /**\n     * Clear the timer for the stop recording button.\n     */\n    clearButtonTimer() {\n        if (this.buttonTimer) {\n            clearInterval(this.buttonTimer);\n        }\n        this.buttonTimer = null;\n    }\n\n    /**\n     * Get the time remaining for the recording.\n     *\n     * @returns {Object} The minutes and seconds remaining.\n     */\n    getTimeRemaining() {\n        // All times are in milliseconds\n        const now = new Date().getTime();\n        const remaining = Math.floor(this.getTimeLimit() - ((now - this.startTime) / 1000));\n\n        const formatter = new Intl.NumberFormat(navigator.language, {minimumIntegerDigits: 2});\n        const seconds = formatter.format(remaining % 60);\n        const minutes = formatter.format(Math.floor((remaining - seconds) / 60));\n        return {\n            remaining,\n            minutes,\n            seconds,\n        };\n    }\n\n    /**\n     * Get the maximum file size that can be uploaded.\n     *\n     * @returns {number} The max byte size\n     */\n    getMaxUploadSize() {\n        return this.config.maxrecsize;\n    }\n\n    /**\n     * Stop the recording.\n     * Please note that this should only stop the recording.\n     * Anything related to processing the recording should be handled by the\n     * mediaRecorder's stopped event handler which is processed after it has stopped.\n     */\n    requestRecordingStop() {\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n            this.stopRequested = true;\n        } else {\n            // There is no recording to stop, but the stream must still be cleaned up.\n            this.cleanupStream();\n        }\n    }\n\n    stopRecorder() {\n        this.mediaRecorder.stop();\n\n        // Unmute the player so that the audio is heard during playback.\n        this.player.muted = false;\n    }\n\n    /**\n     * Clean up the stream.\n     *\n     * This involves stopping any track which is still active.\n     */\n    cleanupStream() {\n        if (this.stream) {\n            this.stream.getTracks()\n                .filter((track) => track.readyState !== 'ended')\n                .forEach((track) => track.stop());\n        }\n    }\n\n    /**\n     * Handle the mediaRecorder `stop` event.\n     */\n    handleStopped() {\n        // Handle the stream data.\n        this.onMediaStopped();\n\n        // Clear the button timer.\n        this.clearButtonTimer();\n    }\n\n    /**\n     * Handle the mediaRecorder `start` event.\n     *\n     * This event is called when the recording starts.\n     */\n    handleStarted() {\n        this.startTime = new Date().getTime();\n        this.setStopRecordingButton();\n    }\n\n    /**\n     * Handle the mediaRecorder `dataavailable` event.\n     *\n     * @param {Event} event\n     */\n    handleDataAvailable(event) {\n        if (this.isRecording()) {\n            const newSize = this.data.blobSize + event.data.size;\n            // Recording stops when either the maximum upload size is reached, or the time limit expires.\n            // The time limit is checked in the `updateButtonTime` function.\n            if (newSize >= this.getMaxUploadSize()) {\n                this.stopRecorder();\n                this.displayFileLimitHitMessage();\n            } else {\n                // Push recording slice to array.\n                this.data.chunks.push(event.data);\n\n                // Size of all recorded data so far.\n                this.data.blobSize = newSize;\n\n                if (this.stopRequested) {\n                    this.stopRecorder();\n                }\n            }\n        }\n    }\n\n    async displayFileLimitHitMessage() {\n        addToast(await getString('maxfilesizehit', component), {\n            title: await getString('maxfilesizehit_title', component),\n            type: 'error',\n        });\n    }\n\n    /**\n     * Check whether the recording is in progress.\n     *\n     * @returns {boolean}\n     */\n    isRecording() {\n        return this.mediaRecorder?.state === 'recording';\n    }\n\n    /**\n     * Whether any data has been recorded.\n     *\n     * @returns {boolean}\n     */\n    hasData() {\n        return !!this.data?.blobSize;\n    }\n\n    /**\n     * Start the recording\n     */\n    async startRecording() {\n        if (this.mediaRecorder) {\n            // Stop the existing recorder if it exists.\n            if (this.isRecording()) {\n                this.mediaRecorder.stop();\n            }\n\n            if (this.hasData()) {\n                const resetRecording = await this.recordAgainConfirmation();\n                if (!resetRecording) {\n                    // User cancelled at the confirmation to reset the data, so exit early.\n                    return;\n                }\n                this.setUploadButtonVisibility(false);\n            }\n\n            this.mediaRecorder = null;\n        }\n\n        // The options for the recording codecs and bitrates.\n        this.mediaRecorder = new MediaRecorder(this.stream, this.getParsedRecordingOptions());\n\n        this.mediaRecorder.addEventListener('dataavailable', this.handleDataAvailable.bind(this));\n        this.mediaRecorder.addEventListener('stop', this.handleStopped.bind(this));\n        this.mediaRecorder.addEventListener('start', this.handleStarted.bind(this));\n\n        this.data = {\n            chunks: [],\n            blobSize: 0\n        };\n        this.setupPlayerSource();\n        this.stopRequested = false;\n\n        // Capture in 50ms chunks.\n        this.mediaRecorder.start(50);\n    }\n\n    /**\n     * Confirm whether the user wants to reset the existing recoring.\n     *\n     * @returns {Promise<boolean>} Whether the user confirmed the reset.\n     */\n    async recordAgainConfirmation() {\n        try {\n            await saveCancelPromise(\n                await getString(\"recordagain_title\", component),\n                await getString(\"recordagain_desc\", component),\n                await getString(\"confirm_yes\", component)\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Insert the HTML to embed the recording into the editor content.\n     *\n     * @param {string} source The URL to view the media.\n     */\n    async insertMedia(source) {\n        const {html} = await Templates.renderForPromise(\n            this.getEmbedTemplateName(),\n            this.getEmbedTemplateContext({\n                source,\n            })\n        );\n        this.editor.insertContent(html);\n    }\n\n    /**\n     * Add or modify the template parameters for the specified type.\n     *\n     * @param {Object} templateContext The Tempalte context to use\n     * @returns {Object} The finalised template context\n     */\n    getEmbedTemplateContext(templateContext) {\n        return templateContext;\n    }\n}\n"],"names":["_pending","_interopRequireDefault","_uploader","ModalEvents","_interopRequireWildcard","ModalFactory","Templates","_systemImportTransformerGlobalIdentifier","window","self","global","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Symbol","iterator","constructor","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","length","err","return","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","toString","slice","name","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","_regeneratorRuntime","exports","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperties","target","props","descriptor","_toPropertyKey","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","_default","editor","modal","instance","Constructor","_classCallCheck","ready","checkAndWarnAboutBrowserCompatibility","config","getData","params","modalRoot","getRoot","startStopButton","querySelector","uploadButton","setRecordButtonState","player","configurePlayer","registerEventListeners","captureUserMedia","prefetchContent","protoProps","staticProps","_display","_insertMedia","_recordAgainConfirmation","_startRecording","_displayFileLimitHitMessage","_resetUploadButtonText","_setUploadButtonTextProgress","_setRecordButtonTextFromString","_setStopRecordingButton","_uploadRecording","_onMediaStopped","_outsideClickHandler","_displayAlert","_captureUserMedia","concat","prefix","types","getSupportedTypes","options","getParsedRecordingOptions","compatTypes","filter","MediaRecorder","isTypeSupported","mimeType","_callee","stream","_context","navigator","mediaDevices","getUserMedia","getMediaConstraints","handleCaptureSuccess","t0","handleCaptureFailure","prefetchStrings","component","prefetchTemplates","getEmbedTemplateName","_callee2","title","content","pendingPromise","_context2","Pending","amd","require","module","loader","ALERT","body","removeOnClose","show","_x2","srcObject","playOnCapture","muted","play","setupPlayerSource","enabled","disabled","visible","getButtonContainer","classList","toggle","subject","replace","toLowerCase","displayAlert","getString","get_string","hide","_this","addEventListener","handleModalClick","bind","on","outsideClick","outsideClickHandler","hidden","cleanupStream","requestRecordingStop","event","_context3","isRecording","preventDefault","hasData","saveCancelPromise","t1","t2","t3","t4","_callee3","_x3","button","closest","dataset","action","handleRecordingStartStopRequested","uploadRecording","_this$mediaRecorder","mediaRecorder","startRecording","_callee4","_this$getButtonContai","_context4","blob","Blob","data","chunks","src","URL","createObjectURL","setRecordButtonTextFromString","controls","setUploadButtonVisibility","setUploadButtonState","_callee5","fileName","fileURL","_this2","_context5","getFileName","Math","random","setRecordButtonVisibility","uploadFile","progress","setUploadButtonTextProgress","insertMedia","close","addToast","add","t5","purpose","checkSecure","hasUserMedia","getStrings","map","_ref3","_ref4","message","_ref","_ref2","_callee6","_yield$Templates$rend","html","js","_context6","renderForPromise","getTimeRemaining","replaceNodeContents","buttonTimer","setInterval","updateRecordButtonTime","_this$getTimeRemainin","remaining","minutes","seconds","textContent","string","_context7","_callee7","_x4","_context8","round","_callee8","_x5","_callee9","_context9","clearInterval","now","Date","getTime","floor","getTimeLimit","startTime","formatter","Intl","NumberFormat","language","minimumIntegerDigits","format","maxrecsize","stopRequested","getTracks","track","readyState","onMediaStopped","clearButtonTimer","setStopRecordingButton","newSize","blobSize","size","getMaxUploadSize","stopRecorder","displayFileLimitHitMessage","_callee10","_context10","_this$mediaRecorder2","_this$data","_callee11","_context11","recordAgainConfirmation","handleDataAvailable","handleStopped","handleStarted","start","_callee12","_context12","source","_yield$Templates$rend2","_context13","getEmbedTemplateContext","insertContent","_callee13","_x6","templateContext","ModalClass","_context14","getModalClass","TYPE","large","isReady","_callee14","_x7","isSecureContext","_exports"],"mappings":"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"}